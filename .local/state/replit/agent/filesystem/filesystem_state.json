{"file_contents":{"README.md":{"content":"# Trans Nzoia County Public Service Board Recruitment System\n\n## Overview\n\nThis is a comprehensive job recruitment and application management system built for Trans Nzoia County Public Service Board. The application serves as a digital platform for managing job postings, applicant profiles, applications, and the entire recruitment workflow from application submission to final selection. It supports multiple user roles including applicants, administrators, and board members, each with tailored interfaces and functionality.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe application uses a modern React-based frontend with TypeScript for type safety. The client-side architecture follows these patterns:\n\n- **Framework**: React 18 with TypeScript for component development\n- **Routing**: Wouter for client-side routing with role-based route protection\n- **State Management**: Zustand for global state management with persistence for authentication\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives for consistent design\n- **Styling**: Tailwind CSS with custom CSS variables for theming support\n- **Form Handling**: React Hook Form with Zod validation for robust form management\n- **Data Fetching**: TanStack Query (React Query) for server state management and caching\n\n### Backend Architecture\nThe server follows a traditional Express.js REST API pattern:\n\n- **Framework**: Express.js with TypeScript for the REST API server\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **API Structure**: RESTful endpoints organized by feature (auth, jobs, applications, etc.)\n- **File Handling**: Multer middleware for document uploads with file type validation\n- **Session Management**: Express sessions with PostgreSQL storage for authentication state\n\n### Authentication & Authorization\nThe system implements Replit's OpenID Connect authentication:\n\n- **Authentication Provider**: Replit OIDC for secure user authentication\n- **Session Storage**: PostgreSQL-backed sessions using connect-pg-simple\n- **Authorization**: Role-based access control with three user types (applicant, admin, board)\n- **User Management**: Automatic user creation and profile management upon first login\n\n### Database Design\nUses PostgreSQL with a comprehensive schema supporting the recruitment workflow:\n\n- **User Management**: Users table with role-based permissions\n- **Geographic Data**: Counties, constituencies, and wards for location-based filtering\n- **Job Management**: Jobs table with relationships to departments and designations\n- **Application Process**: Applications table tracking status from draft to hired\n- **Profile Data**: Comprehensive applicant profiles with education, employment history, and documents\n- **Administrative Data**: Departments, designations, awards, and other reference data\n\n### Development & Build Architecture\nThe project uses a monorepo structure with shared code:\n\n- **Monorepo Structure**: Shared schema and types between client and server\n- **Build System**: Vite for frontend bundling with React plugin and development server\n- **TypeScript**: Shared TypeScript configuration across client, server, and shared modules\n- **Path Aliases**: Configured import aliases for clean code organization\n- **Development Server**: Integrated development experience with hot reloading\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: PostgreSQL database hosting with connection pooling\n- **Database Migration**: Drizzle Kit for schema migrations and database management\n\n### Authentication Services\n- **Replit Authentication**: OpenID Connect provider for user authentication and authorization\n- **Session Storage**: PostgreSQL-backed session persistence\n\n### File Storage & Upload\n- **Local File System**: Multer for handling document uploads (PDF, DOC, images)\n- **File Validation**: Mime type checking and file size limits (10MB max)\n\n### UI & Component Libraries\n- **Radix UI**: Headless component primitives for accessibility\n- **Shadcn/ui**: Pre-built component library for consistent design\n- **Lucide React**: Icon library for UI elements\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n\n### Development & Build Tools\n- **Vite**: Frontend build tool and development server\n- **ESBuild**: Server-side TypeScript compilation for production\n- **PostCSS**: CSS processing with Tailwind and Autoprefixer\n- **TypeScript**: Static type checking across the entire codebase\n\n### Data Validation & Forms\n- **Zod**: Schema validation for both client and server\n- **React Hook Form**: Form state management and validation\n- **Drizzle Zod**: Integration between Drizzle ORM and Zod schemas\n\n### Additional Libraries\n- **Date-fns**: Date manipulation and formatting\n- **Class Variance Authority**: Component variant management\n- **Memoizee**: Function memoization for performance optimization\n- **WebSocket**: Real-time communication support (via Neon serverless)\n","size_bytes":5045},"drizzle.config.ts":{"content":"import 'dotenv/config';\nimport { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n\n","size_bytes":350},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Trans Nzoia County Public Service Board Recruitment System\n\n## Overview\n\nThis is a comprehensive job recruitment and application management system built for Trans Nzoia County Public Service Board. The application serves as a digital platform for managing job postings, applicant profiles, applications, and the entire recruitment workflow from application submission to final selection. It supports multiple user roles including applicants, administrators, and board members, each with tailored interfaces and functionality.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe application uses a modern React-based frontend with TypeScript for type safety. The client-side architecture follows these patterns:\n\n- **Framework**: React 18 with TypeScript for component development\n- **Routing**: Wouter for client-side routing with role-based route protection\n- **State Management**: Zustand for global state management with persistence for authentication\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives for consistent design\n- **Styling**: Tailwind CSS with custom CSS variables for theming support\n- **Form Handling**: React Hook Form with Zod validation for robust form management\n- **Data Fetching**: TanStack Query (React Query) for server state management and caching\n\n### Backend Architecture\nThe server follows a traditional Express.js REST API pattern:\n\n- **Framework**: Express.js with TypeScript for the REST API server\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **API Structure**: RESTful endpoints organized by feature (auth, jobs, applications, etc.)\n- **File Handling**: Multer middleware for document uploads with file type validation\n- **Session Management**: Express sessions with PostgreSQL storage for authentication state\n\n### Authentication & Authorization\nThe system implements Replit's OpenID Connect authentication:\n\n- **Authentication Provider**: Replit OIDC for secure user authentication\n- **Session Storage**: PostgreSQL-backed sessions using connect-pg-simple\n- **Authorization**: Role-based access control with three user types (applicant, admin, board)\n- **User Management**: Automatic user creation and profile management upon first login\n\n### Database Design\nUses PostgreSQL with a comprehensive schema supporting the recruitment workflow:\n\n- **User Management**: Users table with role-based permissions\n- **Geographic Data**: Counties, constituencies, and wards for location-based filtering\n- **Job Management**: Jobs table with relationships to departments and designations\n- **Application Process**: Applications table tracking status from draft to hired\n- **Profile Data**: Comprehensive applicant profiles with education, employment history, and documents\n- **Administrative Data**: Departments, designations, awards, and other reference data\n\n### Development & Build Architecture\nThe project uses a monorepo structure with shared code:\n\n- **Monorepo Structure**: Shared schema and types between client and server\n- **Build System**: Vite for frontend bundling with React plugin and development server\n- **TypeScript**: Shared TypeScript configuration across client, server, and shared modules\n- **Path Aliases**: Configured import aliases for clean code organization\n- **Development Server**: Integrated development experience with hot reloading\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: PostgreSQL database hosting with connection pooling\n- **Database Migration**: Drizzle Kit for schema migrations and database management\n\n### Authentication Services\n- **Replit Authentication**: OpenID Connect provider for user authentication and authorization\n- **Session Storage**: PostgreSQL-backed session persistence\n\n### File Storage & Upload\n- **Local File System**: Multer for handling document uploads (PDF, DOC, images)\n- **File Validation**: Mime type checking and file size limits (10MB max)\n\n### UI & Component Libraries\n- **Radix UI**: Headless component primitives for accessibility\n- **Shadcn/ui**: Pre-built component library for consistent design\n- **Lucide React**: Icon library for UI elements\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n\n### Development & Build Tools\n- **Vite**: Frontend build tool and development server\n- **ESBuild**: Server-side TypeScript compilation for production\n- **PostCSS**: CSS processing with Tailwind and Autoprefixer\n- **TypeScript**: Static type checking across the entire codebase\n\n### Data Validation & Forms\n- **Zod**: Schema validation for both client and server\n- **React Hook Form**: Form state management and validation\n- **Drizzle Zod**: Integration between Drizzle ORM and Zod schemas\n\n### Additional Libraries\n- **Date-fns**: Date manipulation and formatting\n- **Class Variance Authority**: Component variant management\n- **Memoizee**: Function memoization for performance optimization\n- **WebSocket**: Real-time communication support (via Neon serverless)","size_bytes":5044},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"// import { Pool, neonConfig } from '@neondatabase/serverless';\nimport \"dotenv/config\";\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport { Pool } from 'pg';\nimport * as schema from '@shared/schema';\n// import { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\n// import * as schema from \"@shared/schema\";\n\n// neonConfig.webSocketConstructor = ws;\n\n// process.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle(pool, { schema });","size_bytes":675},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import passport from \"passport\";\nimport session from \"express-session\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport type { Express, RequestHandler } from \"express\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL!,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n\n  return session({\n    secret: process.env.SESSION_SECRET || \"default-session-secret-for-development\",\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false, // set to true in production\n      maxAge: sessionTtl,\n    },\n  });\n}\nfunction updateUserSession(user: any, profile: any) {\n  user.email = profile.emails?.[0]?.value;\n  user.firstName = profile.name?.givenName;\n  user.lastName = profile.name?.familyName;\n  user.profileImageUrl = profile.photos?.[0]?.value;\n  user.googleId = profile.id;\n}\nasync function upsertUser(profile: any) {\n  await storage.upsertUser({\n    ...profile,\n    email: profile.emails?.[0]?.value,\n    firstName: profile.name?.givenName,\n    lastName: profile.name?.familyName,\n    profileImageUrl: profile.photos?.[0]?.value,\n  });\n}\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport bcrypt from \"bcrypt\";\n\npassport.use(new LocalStrategy(\n  { usernameField: \"email\" },\n  async (email, password, done) => {\n    const user = await storage.getUserByEmail(email);\n    if (!user) return done(null, false, { message: \"Invalid email\" });\n    const valid = await bcrypt.compare(password, user.passwordHash);\n    if (!valid) return done(null, false, { message: \"Invalid password\" });\n    return done(null, user);\n  }\n));\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // TODO: Implement Replit OIDC authentication\n  // Temporarily disable Google OAuth until proper Replit auth is configured\n  if (process.env.GOOGLE_CLIENT && process.env.GOOGLE_SECRET) {\n    passport.use(\n      new GoogleStrategy(\n        {\n          clientID: process.env.GOOGLE_CLIENT!,\n          clientSecret: process.env.GOOGLE_SECRET!,\n          callbackURL: `http://${process.env.REPLIT_DOMAINS}/api/google/callback`,\n        },\n        async (accessToken, refreshToken, profile, done) => {\n          const user: any = {};\n          updateUserSession(user, profile);\n          await upsertUser(profile);\n          done(null, user);\n        }\n      )\n    );\n  }\n\n  passport.serializeUser((user, cb) => cb(null, user));\n  passport.deserializeUser((user, cb) => cb(null, user||null));\n\n  app.get(\"/api/google/login\", passport.authenticate(\"google\", {\n    scope: [\"profile\", \"email\"],\n  }));\n\n  app.get(\"/api/google/callback\", passport.authenticate(\"google\", {\n    successRedirect: \"/\",\n    failureRedirect: \"/api/login\",\n  }));\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => res.redirect(\"/\"));\n  });\n}\nexport const  isAuthenticated: RequestHandler = (req, res, next) => {\n  const user = req.user as any;\n  if (!req.isAuthenticated() || !user?.email) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  return next();\n};\nexport async function insertLogin(data:any) {\n  await storage.upsertUser(data);\n}","size_bytes":3513},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport express from \"express\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport bcrypt from \"bcrypt\";\nimport passport from \"passport\";\nimport { sendOtpHandler, verifyOtpHandler } from \"../client/src/lib/africastalking-sms\";\nimport { ApplicantService } from \"./applicantService\";\nimport { log } from \"util\";\nimport { z } from \"zod\";\n\n// OTP utility functions\nconst applicantService = new ApplicantService(storage);\nfunction generateOtp(): string {\n  return Math.floor(100000 + Math.random() * 900000).toString();\n}\n\n// Simulate SMS sending (in production, integrate with SMS provider like Twilio)\nfunction sendSms(phoneNumber: string, message: string): Promise<boolean> {\n  console.log(`SMS to ${phoneNumber}: ${message}`);\n  // In development, just log the OTP\n  return Promise.resolve(true);\n}\n// Document upload storage configuration with extensions preserved\nconst documentStorage = multer.diskStorage({\n  destination: 'uploads/',\n  filename: (req, file, cb) => {\n    const ext = path.extname(file.originalname);\n    const uniqueName = `${Date.now()}-${Math.round(Math.random() * 1e9)}${ext}`;\n    cb(null, uniqueName);\n  },\n});\n\n// File upload configuration\nconst upload = multer({\n  storage: documentStorage,\n  limits: { fileSize: 10 * 1024 * 1024 }, // 10MB limit\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = ['application/pdf', 'image/jpeg', 'image/jpg', 'image/png', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type'));\n    }\n  }\n});\n// Profile photo upload config with extensions preserved\nconst profilePhotoStorage = multer.diskStorage({\n  destination: \"uploads/profile-photos/\",\n  filename: (req, file, cb) => {\n    const ext = path.extname(file.originalname); // .jpg / .png\n    const uniqueName = `${Date.now()}-${Math.round(Math.random() * 1e9)}${ext}`;\n    cb(null, uniqueName);\n  },\n});\n// Profile photo upload configuration  \nconst profilePhotoUpload = multer({\n  storage: profilePhotoStorage,\n  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB limit for profile photos\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Profile photo must be JPEG or PNG format'));\n    }\n  }\n});\n\n// CSV conversion utility function\nfunction convertToCSV(data: any[], reportType: string): string {\n  if (!data || data.length === 0) {\n    return 'No data available';\n  }\n\n  const keys = Object.keys(data[0]);\n  const csvHeader = keys.join(',');\n  const csvRows = data.map(row => {\n    return keys.map(key => {\n      const value = row[key];\n      // Handle values that might contain commas, quotes, or newlines\n      if (typeof value === 'string' && (value.includes(',') || value.includes('\"') || value.includes('\\n'))) {\n        return `\"${value.replace(/\"/g, '\"\"')}\"`;\n      }\n      return value;\n    }).join(',');\n  });\n  \n  return [csvHeader, ...csvRows].join('\\n');\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  await setupAuth(app);\n  app.use('/uploads', express.static('uploads'));\n\n  // Profile photo upload endpoint\n  app.post('/api/upload/profile-photo', profilePhotoUpload.single('profilePhoto'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: 'No file uploaded' });\n      }\n\n      // Basic validation\n      const file = req.file;\n      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];\n      if (!allowedTypes.includes(file.mimetype)) {\n        return res.status(400).json({ message: 'Invalid file type. Only JPEG and PNG are allowed.' });\n      }\n\n      // Generate file URL\n      const fileUrl = `/uploads/profile-photos/${file.filename}`;\n      \n      res.json({ \n        message: 'Photo uploaded successfully',\n        url: fileUrl,\n        filename: file.filename\n      });\n    } catch (error) {\n      console.error('Error uploading profile photo:', error);\n      res.status(500).json({ message: 'Failed to upload photo' });\n    }\n  });\n\n  // --- Signup ---\n  app.post(\"/api/auth/signup\", profilePhotoUpload.single(\"profilePhoto\"), async (req, res) => {\n    try {\n      const { email, password, surname, phoneNumber, nationalId } = req.body;      \n      const profilePhoto = req.file ? req.file.filename : \"default.jpg\";\n      const fileUrl = `/uploads/profile-photos/${profilePhoto}`\n      const isValidEmail = await storage.verifyEmail(email);\n    if (isValidEmail) {\n      return res.status(401).json({ message: `Your email ${email} already registered` });\n    }\n    if (!password) {\n      return res.status(400).json({ message: \"Password is required\" });\n    }\n      const hashedPassword = await bcrypt.hash(password, 10);    \n      const newUser = await storage.upsertUser({\n        ...req.body,\n        password: hashedPassword,\n        passwordHash: hashedPassword,\n        surname: surname,\n        phoneNumber,\n        profileImageUrl: fileUrl,\n        nationalId\n      });\n\n      // Immediately log the user in\n      req.login(newUser, (err) => {\n        if (err) {\n          console.error(\"Login after signup failed:\", err);\n          return res.status(500).json({ message: \"Failed to login after signup\" });\n        }\n        res.status(201).json({ user: newUser });\n      });\n    } catch (err: any) {\n      console.error(\"Signup error:\", err);\n      res.status(500).json({ message: err.message || \"Signup failed\" });\n    }\n  });\n\n  // --- Login ---\n  app.post(\"/api/auth/login\",\n    passport.authenticate(\"local\"),\n    (req, res) => {\n      res.json({ user: req.user });\n    }\n  );\n\n  // --- Logout ---\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.logout(() => {\n      res.json({ message: \"Logged out\" });\n    });\n  });\n  app.get(\"/api/auth/me\", (req:any, res) => {\n  if (!req.user) {\n    return res.status(401).json({ message: \"Not authenticated\" });\n  }\n\n  // Decide redirectUrl based on role or other logic\n  // --- Get current session user ---\n    let redirectUrl = \"/\"; // default\n\nswitch (req.user?.role) {\n  case \"admin\":\n    redirectUrl = \"/admin\";\n    break;\n  case \"applicant\":\n    redirectUrl = \"/dashboard\";\n    break;\n  default:\n    redirectUrl = \"/\";\n    break;\n}\n\n  res.json({ user: req.user, redirectUrl });\n});\n// Employee verification routes\n  app.post('/api/employee/verify', async (req:any, res) => {\n    try {\n      const { personalNumber, idNumber } = req.body;\n      const userId = req.user.id;\n      if (!personalNumber || !idNumber) {\n        return res.status(400).json({ message: 'Personal number and ID number are required' });\n      }\n      const applicantData = await storage.getApplicant(userId);\n      // Check if employee exists with matching personal number and ID\n      const employee = await storage.verifyEmployee(personalNumber, idNumber);\n      \n      if (!employee) {\n        return res.status(404).json({ message: 'Employee not found or ID number does not match' });\n      }\n      await storage.updateApplicant(applicantData.id, { isEmployee: true }, 1.5);\n      return res.json({ \n        message: 'Employee verified successfully',\n        employee: {\n          personalNumber: employee.personalNumber,\n          designation: employee.designation,\n        }\n      });\n    } catch (error) {\n      console.error('Error verifying employee:', error);\n      return res.status(500).json({ message: 'Failed to verify employee' });\n    }\n  });\n\n  app.post('/api/employee/details', isAuthenticated, async (req:any, res) => {\n    try {\n      const userId = req.user.id;\n      const employeeData = req.body;\n      const applicantId = await applicantService.resolveApplicantId(userId);\n\n      // Get applicant profile first\n      const applicant = await storage.getApplicantById(applicantId);\n      if (!applicant) {\n        return res.status(404).json({ message: 'Applicant profile not found' });\n      }\n\n      // Create or update employee record\n      const employee = await storage.upsertEmployeeDetails(applicantId, employeeData);      \n      \n      res.json({ \n        message: 'Employee details saved successfully',\n        employee \n      });\n    } catch (error) {\n      console.error('Error saving employee details:', error);\n      res.status(500).json({ message: 'Failed to save employee details' });\n    }\n  });\n  // OTP routes using AfricaTalking SMS service\n  app.post(\"/api/auth/send-otp\", sendOtpHandler);\n  app.post(\"/api/auth/verify-otp\", verifyOtpHandler);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Get applicant profile if user is an applicant\n      let applicantProfile = null;\n      if (user.role === 'applicant') {\n        applicantProfile = await storage.getApplicant(userId);\n      }\n\n      // Determine redirect URL based on role and profile completion\n      let redirectUrl = '/';\n      if (user.role === 'applicant') {\n        if (!applicantProfile) {\n          redirectUrl = '/profile?step=1&reason=complete_profile';\n        } else if ((applicantProfile.profileCompletionPercentage || 0) < 100) {\n          redirectUrl = '/profile?step=2&reason=incomplete_profile';\n        } else {\n          redirectUrl = '/dashboard';\n        }\n      } else if (user.role === 'admin') {\n        redirectUrl = '/admin';\n      } else if (user.role === 'board') {\n        redirectUrl = '/board';\n      }\n\n      res.json({ ...user, applicantProfile, redirectUrl });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Public routes (no authentication required)\n  \n  // Get all counties for location dropdowns\n  app.get('/api/public/counties', async (req, res) => {\n    try {\n      const counties = await storage.getCounties();\n      res.json(counties);\n    } catch (error) {\n      console.error('Error fetching counties:', error);\n      res.status(500).json({ message: 'Failed to fetch counties' });\n    }\n  });\n\n  // Get constituencies by county\n  app.get('/api/public/constituencies/:countyId', async (req, res) => {\n    try {\n      const countyId = parseInt(req.params.countyId);\n      const constituencies = await storage.getConstituenciesByCounty(countyId);\n      res.json(constituencies);\n    } catch (error) {\n      console.error('Error fetching constituencies:', error);\n      res.status(500).json({ message: 'Failed to fetch constituencies' });\n    }\n  });\n\n  // Get wards by constituency\n  app.get('/api/public/wards/:constituencyId', async (req, res) => {\n    try {\n      const constituencyId = parseInt(req.params.constituencyId);\n      const wards = await storage.getWardsByConstituency(constituencyId);\n      res.json(wards);\n    } catch (error) {\n      console.error('Error fetching wards:', error);\n      res.status(500).json({ message: 'Failed to fetch wards' });\n    }\n  });\n\n  // Get published notices\n  app.get('/api/public/notices', async (req, res) => {\n    try {\n      const notices = await storage.getNotices(true);\n      res.json(notices);\n    } catch (error) {\n      console.error('Error fetching notices:', error);\n      res.status(500).json({ message: 'Failed to fetch notices' });\n    }\n  });\n\n  // Subscribe to notice notifications\n  app.post('/api/public/subscribe', async (req, res) => {\n    try {\n      // Validate request body using Zod\n      const subscriptionSchema = z.object({\n        email: z.string().email('Invalid email address'),\n        notificationTypes: z.string().default('all')\n      });\n      \n      const validatedData = subscriptionSchema.parse(req.body);\n      const { email, notificationTypes } = validatedData;\n      \n      if (!email) {\n        return res.status(400).json({ message: 'Email address is required' });\n      }\n\n      // Check if email is already subscribed\n      const existingSubscription = await storage.getSubscription(email);\n      if (existingSubscription && existingSubscription.isActive) {\n        return res.status(409).json({ message: 'Email is already subscribed' });\n      }\n\n      // Generate unique subscription token\n      const subscriptionToken = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      \n      const subscriptionData = {\n        email,\n        subscriptionToken,\n        notificationTypes: typeof notificationTypes === 'string' ? notificationTypes : JSON.stringify(notificationTypes),\n        isActive: true,\n        lastNotifiedAt: null,\n        unsubscribedAt: null,\n      };\n\n      const subscription = await storage.createSubscription(subscriptionData);\n      res.status(201).json({ \n        message: 'Successfully subscribed to notice notifications',\n        subscription: {\n          email: subscription.email,\n          subscribedAt: subscription.subscribedAt\n        }\n      });\n    } catch (error) {\n      console.error('Error creating subscription:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: 'Invalid request data',\n          errors: error.errors.map(e => ({ field: e.path.join('.'), message: e.message }))\n        });\n      }\n      res.status(500).json({ message: 'Failed to subscribe' });\n    }\n  });\n\n  // Unsubscribe from notice notifications\n  app.post('/api/public/unsubscribe', async (req, res) => {\n    try {\n      // Validate request body using Zod\n      const unsubscribeSchema = z.object({\n        token: z.string().min(1, 'Subscription token is required')\n      });\n      \n      const validatedData = unsubscribeSchema.parse(req.body);\n      const { token } = validatedData;\n\n      const success = await storage.unsubscribeEmail(token);\n      if (success) {\n        res.json({ message: 'Successfully unsubscribed from notice notifications' });\n      } else {\n        res.status(404).json({ message: 'Subscription not found or already inactive' });\n      }\n    } catch (error) {\n      console.error('Error unsubscribing:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: 'Invalid request data',\n          errors: error.errors.map(e => ({ field: e.path.join('.'), message: e.message }))\n        });\n      }\n      res.status(500).json({ message: 'Failed to unsubscribe' });\n    }\n  });\n  \n  // Public study areas (for job requirements)\n  app.get('/api/public/study-areas', async (req, res) => {\n    try {\n      const studyAreas = await storage.getStudyArea();\n      res.json(studyAreas);\n    } catch (error) {\n      console.error('Error fetching study areas:', error);\n      res.status(500).json({ message: 'Failed to fetch study areas' });\n    }\n  });\n  \n  // Public certificate levels (for job requirements)\n  app.get('/api/public/certificate-levels', async (req, res) => {\n    try {\n      const certLevels = await storage.getCertLevel();\n      res.json(certLevels);\n    } catch (error) {\n      console.error('Error fetching certificate levels:', error);\n      res.status(500).json({ message: 'Failed to fetch certificate levels' });\n    }\n  });\n  app.get('/api/public/faqs', async (req, res) => {\n    try {\n      const faq = await storage.getFaq();\n      res.json(faq);\n    } catch (error) {\n      console.error('Error fetching faq:', error);\n      res.status(500).json({ message: 'Failed to fetch faq' });\n    }\n  });\n\n  // Get gallery items\n  app.get('/api/public/gallery', async (req, res) => {\n    try {\n      const gallery = await storage.getGalleryItems();\n      res.json(gallery);\n    } catch (error) {\n      console.error('Error fetching gallery:', error);\n      res.status(500).json({ message: 'Failed to fetch gallery' });\n    }\n  });\n\n  // Get system configuration\n  app.get('/api/public/system-config', async (req, res) => {\n    try {\n      const section = req.query.section as string;\n      const config = await storage.getSystemConfig(undefined, section);\n      \n      // Convert array to key-value object for easier frontend use\n      const configObj = config.reduce((acc: any, item) => {\n        acc[item.key] = item.value;\n        return acc;\n      }, {});\n      \n      res.json(configObj);\n    } catch (error) {\n      console.error('Error fetching system config:', error);\n      res.status(500).json({ message: 'Failed to fetch system config' });\n    }\n  });\n\n  // Get board members\n  app.get('/api/public/board-members', async (req, res) => {\n    try {\n      const boardMembers = await storage.getBoardMembers();\n      res.json(boardMembers);\n    } catch (error) {\n      console.error('Error fetching board members:', error);\n      res.status(500).json({ message: 'Failed to fetch board members' });\n    }\n  });\n\n  // Admin system configuration routes\n  app.post('/api/admin/system-config', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const config = await storage.upsertSystemConfig(req.body);\n      res.json(config);\n    } catch (error) {\n      console.error('Error creating system config:', error);\n      res.status(500).json({ message: 'Failed to create system config' });\n    }\n  });\n\n  // Admin gallery management routes\n  app.post('/api/admin/gallery', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const galleryItem = await storage.createGalleryItem({...req.body, createdBy:user.id});\n      res.json(galleryItem);\n    } catch (error) {\n      console.error('Error creating gallery item:', error);\n      res.status(500).json({ message: 'Failed to create gallery item' });\n    }\n  });\n\n  // Get user permissions and navigation based on role\n  app.get('/api/auth/permissions', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      \n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      let permissions: string[] = [];\n      let navigation: any[] = [];\n\n      switch (user.role) {\n        case 'admin':\n          permissions = [\n            'admin.dashboard.view',\n            'admin.jobs.manage',\n            'admin.applications.view',\n            'admin.applications.update', \n            'admin.reports.view',\n            'admin.notifications.send',\n            'admin.settings.manage',\n            'admin.users.manage'\n          ];\n          navigation = [\n            { \n              href: '/admin', \n              icon: 'LayoutDashboard', \n              label: 'Dashboard', \n              description: 'Admin overview' \n            },\n            { \n              href: '/admin/jobs', \n              icon: 'Briefcase', \n              label: 'Job Management', \n              description: 'Create & manage jobs' \n            },\n            { \n              href: '/admin/applications', \n              icon: 'Users', \n              label: 'Applications', \n              description: 'Review applications' \n            },\n            { \n              href: '/admin/reports', \n              icon: 'BarChart3', \n              label: 'Reports', \n              description: 'Generate reports' \n            },\n            { \n              href: '/admin/notifications', \n              icon: 'Bell', \n              label: 'Notifications', \n              description: 'Send notifications' \n            },\n            { \n              href: '/admin/settings', \n              icon: 'Settings', \n              label: 'System Config', \n              description: 'System settings' \n            }\n          ];\n          break;\n\n        case 'board':\n          permissions = [\n            'board.dashboard.view',\n            'board.shortlisting.manage',\n            'board.interviews.manage',\n            'board.scoring.manage',\n            'board.reports.view'\n          ];\n          navigation = [\n            { \n              href: '/board', \n              icon: 'LayoutDashboard', \n              label: 'Dashboard', \n              description: 'Committee overview' \n            },\n            { \n              href: '/board/shortlisting', \n              icon: 'CheckCircle', \n              label: 'Shortlisting', \n              description: 'Review & shortlist' \n            },\n            { \n              href: '/board/interviews', \n              icon: 'Calendar', \n              label: 'Interviews', \n              description: 'Schedule & conduct' \n            },\n            { \n              href: '/board/reports', \n              icon: 'BarChart3', \n              label: 'Reports', \n              description: 'Selection reports' \n            }\n          ];\n          break;\n\n        case 'applicant':\n          permissions = [\n            'applicant.dashboard.view',\n            'applicant.profile.manage',\n            'applicant.applications.view',\n            'applicant.applications.create',\n            'applicant.documents.upload',\n            'jobs.public.view'\n          ];\n          navigation = [\n            { \n              href: '/dashboard', \n              icon: 'LayoutDashboard', \n              label: 'Dashboard', \n              description: 'Overview and stats' \n            },\n            { \n              href: '/profile', \n              icon: 'User', \n              label: 'Profile', \n              description: 'Complete your profile' \n            },\n            { \n              href: '/applications', \n              icon: 'FileText', \n              label: 'My Applications', \n              description: 'Track applications' \n            },\n            { \n              href: '/jobs', \n              icon: 'Search', \n              label: 'Browse Jobs', \n              description: 'Find opportunities' \n            },\n            { \n              href: '/documents', \n              icon: 'Upload', \n              label: 'Documents', \n              description: 'Upload certificates' \n            }\n          ];\n          break;\n\n        default:\n          permissions = ['jobs.public.view'];\n          navigation = [];\n      }\n\n      res.json({\n        role: user.role,\n        permissions,\n        navigation,\n        redirectUrl: user.role === 'admin' ? '/admin' : user.role === 'board' ? '/board' : user.role === 'applicant' ? '/dashboard' : '/'\n      });\n    } catch (error) {\n      console.error('Error fetching user permissions:', error);\n      res.status(500).json({ message: 'Failed to fetch permissions' });\n    }\n  });\n\n  // Get available roles (for admin role management)\n  app.get('/api/admin/roles', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const roles = [\n        { value: 'admin', label: 'Administrator', description: 'Full system access and management' },\n        { value: 'board', label: 'Board Member', description: 'Interview and selection management' },\n        { value: 'applicant', label: 'Applicant', description: 'Job application and profile management' }\n      ];\n\n      res.json(roles);\n    } catch (error) {\n      console.error('Error fetching roles:', error);\n      res.status(500).json({ message: 'Failed to fetch roles' });\n    }\n  });\n\n  // Get active jobs\n  app.get('/api/public/jobs', async (req, res) => {\n    try {\n      const departmentId = req.query.departmentId ? parseInt(req.query.departmentId as string) : undefined;\n      const jobs = await storage.getJobs({ isActive: true, departmentId });\n      res.json(jobs);\n    } catch (error) {\n      console.error('Error fetching jobs:', error);\n      res.status(500).json({ message: 'Failed to fetch jobs' });\n    }\n  });\n\n  // Get system configuration data\n  app.get('/api/public/config', async (req:any, res) => {\n    try {\n      const [departments,\n        designations,\n        awards, courses, institutions, studyAreas, specializations,        \n        ethnicity, jobGroups, jobs, certificateLevels, counties,\n        constituencies,\n        wards, notices,faqs,admins,userData\n      ] = await Promise.all([\n        storage.getDepartments(),\n        storage.getDesignations(),\n        storage.getAwards(),\n        storage.getCoursesOffered(),\n        storage.getInstitutions(),\n        storage.getStudyArea(),\n        storage.getSpecializations(),\n        storage.getEthnicity(),\n        storage.getJobGroups(),\n        storage.getJobs(),\n        storage.getCertLevel(),\n        storage.getCounties(),\n        storage.getConstituencies(),\n        storage.getWards(),\n        storage.getNotices(),\n        storage.getFaq(),\n        storage.getUsers(),\n        storage.getApplicant(req.user.id),\n      ]);\n      \n      res.json({\n        departments,\n        designations,\n        awards,\n        courses,\n        institutions,\n        studyAreas,\n        specializations,\n        ethnicity,\n        jobGroups,\n        jobs,\n        certificateLevels,\n        counties,\n        constituencies,\n        wards,\n        notices,\n        faqs,\n        admins,\n        userData,\n      });      \n    } catch (error) {\n      console.error('Error fetching config:', error);\n      res.status(500).json({ message: 'Failed to fetch configuration', error: (error as Error).message });\n    }\n  });\n  // Protected applicant routes  \n  // Create applicant profile\n  app.post('/api/applicant/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const {applicantId, data } = req.body;\n      const user = await storage.getUser(userId); \n      \n      if (!user || user.role !== 'applicant') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      \n      // Check if profile already exists\n      const existingProfile = await storage.getApplicant(userId);      \n      if (existingProfile.applicantId) {\n           const updateProfile = await applicantService.updateBasicInfo(applicantId, data);\n        return res.json(updateProfile);\n      }\n      const profileData = {\n        userId,\n        ...req.body.data,\n      };\n      const profile = await storage.createApplicant(profileData);\n      res.json(profile);\n    } catch (error) {\n      console.error('Error creating profile:', error);\n      res.status(500).json({ message: 'Failed to create profile' }); \n    }\n  });\n  // Update all other components of the stepwises\n  \n  app.patch(\"/api/applicant/profile\", isAuthenticated, async (req, res) => {\n    try {\n    \n    const { applicantId, step, data } = req.body;\n    if (!applicantId) {\n      return res.status(400).json({ error: \"Applicant ID missing\" });\n    }\n    const updatedProfile = await storage.updateApplicant(applicantId, data, step);\n    res.json(updatedProfile);\n  } catch (err) {\n    console.error(\"Failed to update applicant:\", err);\n    res.status(500).json({ error: \"Failed to update applicant profile\" });\n  }\n});  \n  // Mark phone as verified after OTP verification\n  app.post('/api/applicant/verify-phone', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'applicant') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const profile = await storage.getApplicant(userId);\n      if (!profile) {\n        return res.status(404).json({ message: 'Profile not found' });\n      }\n\n      const { phoneNumber } = req.body;\n      \n      // Update phone verification status\n      const updatedProfile = await storage.updateApplicant(profile.id, {\n        phoneVerified: true,\n        phoneNumber,\n      }, 1);\n      \n      res.json(updatedProfile);\n    } catch (error) {\n      console.error('Error verifying phone:', error);\n      res.status(500).json({ message: 'Failed to verify phone' });\n    }\n  });\n\n  // Get applicant's applications\n  app.get('/api/applicant/applications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'applicant') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const profile = await storage.getApplicant(userId);\n      if (!profile) {\n        return res.status(404).json({ message: 'Profile not found' });\n      }\n\n      const applications = await storage.getApplications({ applicantId: profile.id });\n      res.json(applications);\n    } catch (error) {\n      console.error('Error fetching applications:', error);\n      res.status(500).json({ message: 'Failed to fetch applications' });\n    }\n  });\n  app.get('/api/applicant/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'applicant') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const profile = await storage.getApplicant(userId);\n      if (!profile) {\n        return res.status(404).json({ message: 'Profile not found' });\n      }\n      res.json(profile);\n    } catch (error) {\n      console.error('Error fetching applications:', error);\n      res.status(500).json({ message: 'Failed to fetch applications' });\n    }\n  });\n\n  // Apply for a job\n  app.post('/api/applicant/apply', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'applicant') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const profile = await storage.getApplicant(userId);\n      if (!profile) {\n        return res.status(404).json({ message: 'Profile not found' });\n      }\n\n      const { jobId } = req.body;\n      \n      // Get detailed applicant profile with completion data\n      const applicant = await storage.getApplicantById(profile.id);\n      if (!applicant) {\n        return res.status(404).json({ message: 'Applicant profile not found' });\n      }\n      \n      // Get job details with requirements\n      const job = await storage.getJob(parseInt(jobId));\n      if (!job) {\n        return res.status(404).json({ message: 'Job not found' });\n      }\n      \n      // ✅ Eligibility Check 1: Profile must be 100% complete\n      if (applicant.profileCompletionPercentage !== 100) {\n        return res.status(400).json({ \n          message: 'Profile must be 100% complete to apply for jobs',\n          currentCompletion: applicant.profileCompletionPercentage\n        });\n      }\n      \n      // ✅ Eligibility Check 2: Must have exactly 3 referees\n      if (!applicant.referees || applicant.referees.length !== 3) {\n        return res.status(400).json({ \n          message: 'You must have exactly 3 referees to apply for jobs',\n          currentReferees: applicant.referees?.length || 0\n        });\n      }\n      \n      // ✅ Eligibility Check 3: Study area requirement (if job has one)\n      console.log(`job`, job);\n      console.log(`appliacant`, applicant.education);\n\n\n      \n      if (job.jobs?.requiredStudyAreaId) {\n        const hasMatchingStudyArea = applicant.education?.some(\n          (edu: any) => parseInt(edu.studyArea) === job.jobs.requiredStudyAreaId\n        );\n        if (!hasMatchingStudyArea) {\n          return res.status(400).json({ \n            message: 'Your educational background does not match the required study area for this job'\n          });\n        }\n      }\n      \n      // ✅ Eligibility Check 4: Certificate level requirement (if job has one)\n      if (job.jobs?.certificateLevel) {\n        const hasMatchingCertLevel = applicant.education?.some(\n          (edu: any) => edu.certificateLevelId === job.jobs.certificateLevel\n        );\n        if (!hasMatchingCertLevel) {\n          return res.status(400).json({ \n            message: 'Your certificate level does not match the requirements for this job'\n          });\n        }\n      }\n      \n      // Check if already applied\n      const existingApplications = await storage.getApplications({ \n        applicantId: profile.id, \n        jobId: parseInt(jobId) \n      });\n      \n      if (existingApplications.length > 0) {\n        return res.status(400).json({ message: 'Already applied for this job' });\n      }\n\n      const application = await storage.createApplication({\n        jobId: parseInt(jobId),\n        applicantId: profile.id,\n        status: 'submitted',\n        submittedOn: new Date().toISOString().split('T')[0],\n        remarks: null,\n        interviewDate: null,\n        interviewScore: null,\n      });\n\n      res.json(application);\n    } catch (error) {\n      console.error('Error applying for job:', error);\n      res.status(500).json({ message: 'Failed to apply for job' });\n    }\n  });\n  // Protected admin routes  \n  // Get all applications (admin)\n  app.get('/api/admin/applications', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      const jobId = req.query.jobId ? parseInt(req.query.jobId as string) : undefined;\n      const status = req.query.status as string | undefined;      \n      const applications = await storage.getApplications({ jobId, status });\n      res.json(applications);\n    } catch (error) {\n      console.error('Error fetching applications:', error);\n      res.status(500).json({ message: 'Failed to fetch applications' });\n    }\n  });\n\n  // Create job (admin)\n  app.post('/api/admin/jobs', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      const jobData = {\n        ...req.body,\n        createdBy: user.id,\n        description: req.body.description || null,\n      };\n\n      const job = await storage.createJob(jobData);\n      \n      res.json(job);\n    } catch (error) {\n      console.error('Error creating job:', error);\n      res.status(500).json({ message: 'Failed to create job' });\n    }\n  });\n\n  // Update job (admin)\n  app.put('/api/admin/jobs/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const jobId = parseInt(req.params.id);\n      const job = await storage.updateJob(jobId, req.body);\n      res.json(job);\n    } catch (error) {\n      console.error('Error updating job:', error);\n      res.status(500).json({ message: 'Failed to update job' });\n    }\n  });\n  //\n  // route.ts\n\napp.get(\"/api/applicant/:id/progress\", async (req, res) => {\n  const applicantId = Number(req.params.id);\n  const progress = await storage.getProgress(applicantId);\n  res.json(progress);\n});\n\n  // Create notice (admin) - Default published to true\n  app.post('/api/admin/notices', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const noticeData = {\n        ...req.body,\n        createdBy: user.id,\n        type: req.body.type || null,\n        isPublished: req.body.isPublished !== undefined ? req.body.isPublished : true, // Default to true\n        publishedAt: req.body.isPublished !== false ? new Date() : null,\n      };\n\n      const notice = await storage.createNotice(noticeData);\n      res.json(notice);\n    } catch (error) {\n      console.error('Error creating notice:', error);\n      res.status(500).json({ message: 'Failed to create notice' });\n    }\n  });\n\n  // Get active subscriptions (admin)\n  app.get('/api/admin/subscriptions', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const subscriptions = await storage.getActiveSubscriptions();\n      res.json(subscriptions);\n    } catch (error) {\n      console.error('Error fetching subscriptions:', error);\n      res.status(500).json({ message: 'Failed to fetch subscriptions' });\n    }\n  });\n\n  // Get all users for role assignment (admin)\n  app.get('/api/admin/all-users', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const allUsers = await storage.getAllUsersForRoleAssignment();\n      res.json(allUsers);\n    } catch (error) {\n      console.error('Error fetching all users:', error);\n      res.status(500).json({ message: 'Failed to fetch users' });\n    }\n  });\n\n  // Create board member (admin)\n  app.post('/api/admin/board-members', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const boardMemberData = {\n        ...req.body,\n        order: req.body.order || 0,\n      };\n\n      const boardMember = await storage.createBoardMember(boardMemberData);\n      res.json(boardMember);\n    } catch (error) {\n      console.error('Error creating board member:', error);\n      res.status(500).json({ message: 'Failed to create board member' });\n    }\n  });\n\n  // Get notifications (admin)\n  app.get('/api/admin/notifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const notifications = await storage.getNotifications();\n      res.json(notifications);\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      res.status(500).json({ message: 'Failed to fetch notifications' });\n    }\n  });\n\n  // Create notification (admin) with validation\n  app.post('/api/admin/notifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // Basic validation - schema import needed for full Zod validation\n      const requiredFields = ['title', 'message', 'type', 'targetAudience', 'priority'];\n      const missingFields = requiredFields.filter(field => !req.body[field]);\n      \n      if (missingFields.length > 0) {\n        return res.status(400).json({ \n          message: 'Missing required fields',\n          errors: missingFields.map(field => ({ field, message: `${field} is required` }))\n        });\n      }\n\n      // Calculate recipient count based on target audience\n      let recipientCount = 0;\n      const allUsers = await storage.getAllUsersForRoleAssignment();\n      \n      switch (req.body.targetAudience) {\n        case 'all':\n          recipientCount = allUsers.length;\n          break;\n        case 'applicants':\n          recipientCount = allUsers.filter((u: any) => u.role === 'applicant').length;\n          break;\n        case 'admins':\n          recipientCount = allUsers.filter((u: any) => u.role === 'admin').length;\n          break;\n        case 'board':\n          recipientCount = allUsers.filter((u: any) => u.role === 'board').length;\n          break;\n        default:\n          recipientCount = 0;\n      }\n\n      const notificationData = {\n        ...req.body,\n        createdBy: user.id,\n        status: req.body.scheduledAt ? 'scheduled' : 'sent',\n        sentAt: req.body.scheduledAt ? null : new Date(),\n        recipientCount,\n        deliveredCount: req.body.scheduledAt ? 0 : recipientCount, // Mark as delivered immediately if not scheduled\n      };\n\n      const notification = await storage.createNotification(notificationData);\n      res.json(notification);\n    } catch (error) {\n      console.error('Error creating notification:', error);\n      res.status(500).json({ message: 'Failed to create notification' });\n    }\n  });\n\n  // Get notification stats (admin) \n  app.get('/api/admin/notification-stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const stats = await storage.getNotificationStats();\n      res.json(stats);\n    } catch (error) {\n      console.error('Error fetching notification stats:', error);\n      res.status(500).json({ message: 'Failed to fetch notification stats' });\n    }\n  });\n\n  // Removed old notification endpoint as it's been replaced with the full implementation above\n\n  // Create county (admin)\n  app.post('/api/admin/counties', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const county = await storage.seedCounties(req.body);\n      res.json(county);\n    } catch (error) {\n      console.error('Error creating county:', error);\n      res.status(500).json({ message: 'Failed to create county' });\n    }\n  });\n\n  // Create constituency (admin)\n  app.post('/api/admin/constituencies', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const constituency = await storage.seedSubCounties({\n        ...req.body,\n        createdAt: new Date(),\n      });\n      res.json(constituency);\n    } catch (error) {\n      console.error('Error creating constituency:', error);\n      res.status(500).json({ message: 'Failed to create constituency' });\n    }\n  });\n\n  // Create ward (admin)\n  app.post('/api/admin/wards', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const ward = await storage.seedWard({\n        ...req.body,\n        createdAt: new Date(),\n      });\n      res.json(ward);\n    } catch (error) {\n      console.error('Error creating ward:', error);\n      res.status(500).json({ message: 'Failed to create ward' });\n    }\n  });\n\n  // Create study area (admin)\n  app.post('/api/admin/study-areas', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const studyArea = await storage.seedStudy(req.body);\n      res.json(studyArea);\n    } catch (error) {\n      console.error('Error creating study area:', error);\n      res.status(500).json({ message: 'Failed to create study area' });\n    }\n  });\n\n  // Create specialization (admin)\n  app.post('/api/admin/specializations', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const specialization = await storage.seedSpecialize({\n        ...req.body,\n        createdAt: new Date(),\n      });\n      res.json(specialization);\n    } catch (error) {\n      console.error('Error creating specialization:', error);\n      res.status(500).json({ message: 'Failed to create specialization' });\n    }\n  });\n\n  // Create job group (admin)\n  app.post('/api/admin/job-groups', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const jobGroup = await storage.seedJobGroup(req.body);\n      res.json(jobGroup);\n    } catch (error) {\n      console.error('Error creating job group:', error);\n      res.status(500).json({ message: 'Failed to create job group' });\n    }\n  });\n  // Create Department (admin)\n  app.post('/api/admin/dept', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      const dept = await storage.seedDepartment(req.body);\n      res.json(dept);\n    } catch (error) {\n      console.error('Error creating department:', error);\n      res.status(500).json({ message: 'Failed to create department' });\n    }\n  });\n\n  // Create award (admin)\n  app.post('/api/admin/awards', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const award = await storage.seedAward(req.body);\n      res.json(award);\n    } catch (error) {\n      console.error('Error creating award:', error);\n      res.status(500).json({ message: 'Failed to create award' });\n    }\n  });\n\n  // Create ethnicity (admin)\n  app.post('/api/admin/ethnicity', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n       \n      // For now, return success - ethnicity table may need to be created\n      res.json({ \n        id: Date.now(), \n        ...req.body, \n        createdAt: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('Error creating ethnicity:', error);\n      res.status(500).json({ message: 'Failed to create ethnicity' });\n    }\n  });\n\n  // Create FAQ (admin)\n  app.post('/api/admin/faqs', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      const faqs = await storage.createFaqs({\n        ...req.body, \n        createdAt: new Date()\n      });\n      return res.json(faqs);\n    } catch (error) {\n      console.error('Error creating FAQ:', error);\n      res.status(500).json({ message: 'Failed to create FAQ' });\n    }\n  });\n\n  // Create role assignment (admin)\n  app.post('/api/admin/role-assignments', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // For now, return success - role assignment logic can be implemented\n      res.json({ \n        id: Date.now(), \n        ...req.body, \n        assignedAt: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('Error creating role assignment:', error);\n      res.status(500).json({ message: 'Failed to create role assignment' });\n    }\n  });\n\n  // Report routes (admin)\n  app.get('/api/admin/reports', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const { type, startDate, endDate } = req.query;\n      let reportData;\n\n      switch (type) {\n        case 'applications':\n          reportData = await storage.getApplicationsReport(startDate as string, endDate as string);\n          break;\n        case 'jobs':\n          reportData = await storage.getJobsReport(startDate as string, endDate as string);\n          break;\n        case 'users':\n          reportData = await storage.getUsersReport(startDate as string, endDate as string);\n          break;\n        case 'performance':\n          reportData = await storage.getPerformanceReport(startDate as string, endDate as string);\n          break;\n        default:\n          return res.status(400).json({ message: 'Invalid report type' });\n      }\n\n      res.json(reportData);\n    } catch (error) {\n      console.error('Error generating report:', error);\n      res.status(500).json({ message: 'Failed to generate report' });\n    }\n  });\n\n  // Download report (admin)\n  app.get('/api/admin/reports/download', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const { type, format, startDate, endDate } = req.query;\n      let reportData;\n\n      switch (type) {\n        case 'applications':\n          reportData = await storage.getApplicationsReport(startDate as string, endDate as string);\n          break;\n        case 'jobs':\n          reportData = await storage.getJobsReport(startDate as string, endDate as string);\n          break;\n        case 'users':\n          reportData = await storage.getUsersReport(startDate as string, endDate as string);\n          break;\n        case 'performance':\n          reportData = await storage.getPerformanceReport(startDate as string, endDate as string);\n          break;\n        default:\n          return res.status(400).json({ message: 'Invalid report type' });\n      }\n\n      if (format === 'csv') {\n        // Convert to CSV\n        const csvData = convertToCSV(reportData.data, type as string);\n        res.setHeader('Content-Type', 'text/csv');\n        res.setHeader('Content-Disposition', `attachment; filename=\"${type}_report_${Date.now()}.csv\"`);\n        res.send(csvData);\n      } else {\n        // Return JSON for now (can be extended to PDF)\n        res.json(reportData);\n      }\n    } catch (error) {\n      console.error('Error downloading report:', error);\n      res.status(500).json({ message: 'Failed to download report' });\n    }\n  });\n\n  // Protected board committee routes\n  \n  // Get applications for review (board)\n  app.get('/api/board/applications', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'board') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const jobId = req.query.jobId ? parseInt(req.query.jobId as string) : undefined;\n      const status = req.query.status as string | undefined;\n      \n      const applications = await storage.getApplications({ jobId, status });\n      res.json(applications);\n    } catch (error) {\n      console.error('Error fetching applications:', error);\n      res.status(500).json({ message: 'Failed to fetch applications' });\n    }\n  });\n\n  // Update application status (board)\n  app.put('/api/board/applications/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'board') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const applicationId = parseInt(req.params.id);\n      const application = await storage.updateApplication(applicationId, req.body);\n      res.json(application);\n    } catch (error) {\n      console.error('Error updating application:', error);\n      res.status(500).json({ message: 'Failed to update application' });\n    }\n  });\n\n  // Document upload endpoint\n  app.post('/api/applicant/documents', isAuthenticated, upload.single('document'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: 'No file uploaded' });\n      }\n\n      const { type } = req.body;\n      if (!type) {\n        return res.status(400).json({ message: 'Document type is required' });\n      }\n\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'applicant') {\n        return res.status(403).json({ message: 'Only applicants can upload documents' });\n      }\n\n      // Get the applicant profile to get applicant ID\n      const applicantProfile = await storage.getApplicant(userId);\n      if (!applicantProfile) {\n        return res.status(404).json({ message: 'Applicant profile not found' });\n      }\n      // Save document to database\n      const document = await storage.saveDocument({\n        applicantId: applicantProfile.id,\n        type,\n        fileName: req.file.originalname,\n        filePath: `/uploads/${req.file.filename}`,\n        fileSize: req.file.size,\n        mimeType: req.file.mimetype\n      });\n\n      res.json({\n        id: document.id,\n        type: document.type,\n        fileName: document.fileName,\n        filePath: document.filePath,\n        message: 'Document uploaded successfully'\n      });\n    } catch (error) {\n      console.error('Error uploading document:', error);\n      res.status(500).json({ message: 'Failed to upload document' });\n    }\n  });\n\n  // File upload endpoint\n  app.post('/api/upload', isAuthenticated, upload.single('file'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: 'No file uploaded' });\n      }\n\n      // In production, you would upload to cloud storage (AWS S3, etc.)\n      const fileUrl = `/uploads/${req.file.filename}`;\n      \n      res.json({\n        filename: req.file.originalname,\n        url: fileUrl,\n        size: req.file.size,\n        mimeType: req.file.mimetype\n      });\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      res.status(500).json({ message: 'Failed to upload file' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":54548},"server/storage.ts":{"content":"\nimport {\n  users,\n  applicants,\n  jobs,\n  applications,\n  counties,\n  constituencies,\n  wards,\n  departments,\n  designations,\n  awards,\n  institutions,\n  studyArea,\n  specializations,\n  ethnicity,\n  coursesOffered,\n  notices,\n  educationRecords,\n  employmentHistory,\n  referees,\n  documents,\n  otpVerification,\n  employees,\n  payroll,\n  JG,\n  shortCourse,\n  professionalQualifications,\n  certificateLevel,\n  faq,\n  galleryItems,\n  systemConfig,\n  boardMembers,\n  noticeSubscriptions,\n  notifications,\n  notificationRecipients,\n  type User,\n  type UpsertUser,\n  type Applicant,\n  type Job,\n  type Application,\n  type Notice,\n  type County,\n  type Constituency,\n  type Ward,\n  type Department,\n  type Designation,\n  type Award,\n  type Institution,\n  type StudyArea,\n  type Specialization,\n  type Employee,\n  type CourseOffered,\n  type OtpVerification,\n  type InsertEmployee,\n  type Payroll,\n  type Jg,\n  type CertificateLevel,\n  type NoticeSubscription,\n  type InsertNoticeSubscription,\n  type ProfessionalQualification,\n  type Faq,\n  type GalleryItem,\n  type SystemConfig,\n  type BoardMember,\n  type InsertGalleryItem,\n  type InsertSystemConfig,\n  type InsertBoardMember,\n  type Notification,\n  type NotificationRecipient,\n  type InsertNotificationRecipient,\n  type InsertNotification,\n  type Ethnicity,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, like, sql, lt, PromiseOf, or, ne } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Applicant operations\n  getApplicant(userId: string): Promise<Applicant | undefined>;\n  createApplicant(applicant: Omit<Applicant, 'id' | 'createdAt' | 'updatedAt'>): Promise<Applicant>;\n  updateApplicant(id: number, applicant: Partial<Applicant>,step:number): Promise<Applicant>;\n  getApplicantById(id: number): Promise<any | undefined>;\n  // Job operations\n  getJobs(filters?: { isActive?: boolean; departmentId?: number }): Promise<Job[]>;\n  getJob(id?: number): Promise<any | undefined>;\n  createJob(job: Omit<Job, 'id' | 'createdAt' | 'updatedAt'>): Promise<Job>;\n  updateJob(id: number, job: Partial<Job>): Promise<Job>;\n  getStudyAreaByName(name: string): Promise<StudyArea | undefined>\n  getCertLevel(): Promise<CertificateLevel[]>\n\n  // Application operations\n  getApplications(filters?: { applicantId?: number; jobId?: number; status?: string }): Promise<Application[]>;\n  createApplication(application: Omit<Application, 'id' | 'createdAt' | 'updatedAt'>): Promise<Application>;\n  updateApplication(id: number, application: Partial<Application>): Promise<Application>;\n  \n  // Location operations\n  getCounties(): Promise<County[]>;\n  getConstituencies(): Promise<Constituency[]>;\n  getWards(): Promise<Ward[]>;\n  getConstituenciesByCounty(countyId: number): Promise<Constituency[]>;\n  getCountyByCountyName(countyName: string): Promise<County | undefined>;\n  getConstituencyByName(name: string): Promise<Constituency | undefined>\n  getWardsByConstituency(constituencyId: number): Promise<Ward[]>;\n  \n  \n  // System configuration operations\n  getDepartments(): Promise<Department[]>;\n  getDesignations(): Promise<Designation[]>;\n  getAwards(): Promise<Award[]>;\n  getCoursesOffered(): Promise<CourseOffered[]>;\n  \n  // Notice operations\n  getNotices(isPublished?: boolean): Promise<Notice[]>;\n  createNotice(notice: Omit<Notice, 'id' | 'createdAt' | 'updatedAt'>): Promise<Notice>;\n  updateNotice(id: number, notice: Partial<Notice>): Promise<Notice>;\n\n  // Subscription operations\n  createSubscription(subscription: InsertNoticeSubscription): Promise<NoticeSubscription>;\n  getSubscription(email: string): Promise<NoticeSubscription | undefined>;\n  unsubscribeEmail(token: string): Promise<boolean>;\n  getActiveSubscriptions(): Promise<NoticeSubscription[]>;\n\n   // Employee operations\n  verifyEmployee(personalNumber: string, idNumber: string): Promise<Payroll | undefined>;\n  upsertEmployeeDetails(applicantId: number, employeeData: Partial<InsertEmployee>): Promise<Employee>;\n\n  // L\n  // OTP operations\n  createOtp(phoneNumber: string, otp: string): Promise<OtpVerification>;\n  comparePasswords(password: string): Promise<boolean>;\n  verifyOtp(phoneNumber: string, otp: string): Promise<boolean>;\n  getUserByEmail(email: string): Promise<User>;\n  verifyEmail(email: string): Promise<boolean>;\n  cleanupExpiredOtps(): Promise<void>;  \n  // Seed operations\n  seedJobGroup(jobGroup: Omit<Jg, 'id'>): Promise<Jg>;\n  seedCounties(county: Omit<County, 'id'>): Promise<County>;\n  seedSubCounties(subCounty: Omit<Constituency, 'id'>): Promise<Constituency>;\n  seedWard(ward: Omit<Ward, 'id'>): Promise<Ward>;\n  seedAward(award: Omit<Award, 'id'>): Promise<Award>;\n  seedInstitutions(institute: Omit<Institution, 'id'>): Promise<Institution>;\n  seedDesignation(designation: Omit<Designation, 'id'>): Promise<Designation>;\n  seedDepartment(department: Omit<Department, 'id'>): Promise<Department>;\n  //Truncate tables\n  truncateAll(): Promise<void>;\n  \n  // Report operations\n  getApplicationsReport(startDate?: string, endDate?: string): Promise<any>;\n  getJobsReport(startDate?: string, endDate?: string): Promise<any>;\n  getUsersReport(startDate?: string, endDate?: string): Promise<any>;\n  getPerformanceReport(startDate?: string, endDate?: string): Promise<any>;\n  getAllUsersForRoleAssignment(): Promise<any[]>;\n  \n  // Notification operations\n  getNotifications(): Promise<Notification[]>;\n  createNotification(data: InsertNotification): Promise<Notification>;\n  getNotificationStats(): Promise<{\n    totalSent: number;\n    openRate: number;\n    activeUsers: number;\n    pending: number;\n  }>;\n  // Enhanced recipient tracking\n  createNotificationRecipients(notificationId: number, recipients: InsertNotificationRecipient[]): Promise<void>;\n  updateRecipientStatus(recipientId: number, status: string, lastError?: string): Promise<void>;\n  getNotificationRecipients(notificationId: number, status?: string): Promise<NotificationRecipient[]>;\n  retryFailedRecipients(notificationId: number): Promise<void>;\n  trackNotificationOpen(trackingToken: string): Promise<boolean>;\n}\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n  async getUsers(): Promise<any[]> {\n    const user = await db\n      .select({ name: sql<string>`CONCAT(${users.firstName}, ' ', ${users.surname})`, email: users.email })\n      .from(users)\n      .where(or(eq(users.role, 'admin'), eq(users.role, \"board\")));\n    return user;\n  }\n\n  async getAllUsersForRoleAssignment(): Promise<any[]> {\n    const allUsers = await db\n      .select({ \n        id: users.id,\n        name: sql<string>`CONCAT(${users.firstName}, ' ', ${users.surname})`, \n        email: users.email,\n        role: users.role\n      })\n      .from(users)\n      .orderBy(users.firstName);\n    return allUsers;\n  }\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n  // Applicant operations\nasync getApplicant(userId: string): Promise<any> {\n  // First fetch applicant + employee\n  const [applicant] = await db\n    .select()\n    .from(applicants)\n    .leftJoin(users, eq(applicants.userId, users.id))\n    .leftJoin(employees, eq(applicants.id, employees.applicantId))\n    .where(eq(applicants.userId, userId));\n\n  if (!applicant) {\n     const [applicant] =await db.select({firstName:users.firstName,surname:users.surname,nationalId:users.nationalId,idPassportType:users.idPassportType,phoneNumber:users.phoneNumber}).from(users).where(eq(users.id, userId))\n    return applicant;\n  };\n\n  const applicantId = applicant.applicants.id;\n\n  // Fetch related records (arrays)\n  const [\n    educationRecordsArr,\n    shortCourseRecords,\n    qualificationRecords,\n    employmentRecords,\n    refereeRecords,\n    documentRecords,\n  ] = await Promise.all([\n    db.select().from(educationRecords).where(eq(educationRecords.applicantId, applicantId)),\n    db.select().from(shortCourse).where(eq(shortCourse.applicantId, applicantId)),\n    db\n      .select()\n      .from(professionalQualifications)\n      .where(eq(professionalQualifications.applicantId, applicantId)),\n    db\n      .select()\n      .from(employmentHistory)\n      .where(eq(employmentHistory.applicantId, applicantId)),\n    db.select().from(referees).where(eq(referees.applicantId, applicantId)),\n    db.select().from(documents).where(eq(documents.applicantId, applicantId)),\n  ]);\n  // Build the full applicant object\n  const fullApplicant = {\n    ...applicant.applicants,\n    employee: applicant.employees || null,\n    education: educationRecordsArr,\n    shortCourses: shortCourseRecords,\n    professionalQualifications: qualificationRecords,\n    employmentHistory: employmentRecords,\n    referees: refereeRecords,\n    documents: documentRecords,\n  };\n// ✅ Now compute completion\n  const completedSteps = this.computeCompletedSteps(fullApplicant);\n  const totalSteps = 8;\n  const profileCompletionPercentage = Math.round(\n    (completedSteps.length / totalSteps) * 100\n  );\n  // Return nested structure\n  return {\n    ...fullApplicant,\n    completedSteps,\n    profileCompletionPercentage,\n  };\n}\nasync getApplicantById(id: number): Promise<any | undefined> {\n  // Base applicant + employee\n  const [applicant] = await db\n    .select()\n    .from(applicants)\n    .leftJoin(employees, eq(applicants.id, employees.applicantId))\n    .where(eq(applicants.id, id));\n\n  if (!applicant) return undefined;\n  const applicantId = applicant.applicants.id;\n\n  // Fetch related arrays in parallel\n  const [\n    educationRecordsArr,\n    shortCourseRecords,\n    qualificationRecords,\n    employmentRecords,\n    refereeRecords,\n    documentRecords,\n  ] = await Promise.all([\n    db.select().from(educationRecords).where(eq(educationRecords.applicantId, applicantId)),\n    db.select().from(shortCourse).where(eq(shortCourse.applicantId, applicantId)),\n    db\n      .select()\n      .from(professionalQualifications)\n      .where(eq(professionalQualifications.applicantId, applicantId)),\n    db.select().from(employmentHistory).where(eq(employmentHistory.applicantId, applicantId)),\n    db.select().from(referees).where(eq(referees.applicantId, applicantId)),\n    db.select().from(documents).where(eq(documents.applicantId, applicantId)),\n  ]);\n\n  // Build the full applicant object\n  const fullApplicant = {\n    ...applicant.applicants,\n    employee: applicant.employees || null,\n    education: educationRecordsArr,\n    shortCourses: shortCourseRecords,\n    professionalQualifications: qualificationRecords,\n    employmentHistory: employmentRecords,\n    referees: refereeRecords,\n    documents: documentRecords,\n  };\n\n  // ✅ Now compute completion\n  const completedSteps = this.computeCompletedSteps(fullApplicant);\n  const totalSteps = 8;\n  const profileCompletionPercentage = Math.round(\n    (completedSteps.length / totalSteps) * 100\n  );\n\n  return {\n    ...fullApplicant,\n    completedSteps,\n    profileCompletionPercentage,\n  };\n}\n\n  async updateProgress(step: number, applicantId: number) {\n  // Only fetch this applicant’s current progress\n  const [current] = await db\n    .select({ progress: applicants.profileCompletionPercentage })\n    .from(applicants)\n    .where(eq(applicants.id, applicantId))\n    .limit(1);\n\n  // Update only if the new step is ahead of current\n  if (!current || step > (current.progress ?? 0)) {\n    await db\n      .update(applicants)\n      .set({ profileCompletionPercentage: step })\n      .where(eq(applicants.id, applicantId));\n    console.log(`Progress updated to step ${step} for applicant ${applicantId}`);\n  } else {\n    console.log(`Step ${step} ignored (already at ${current.progress})`);\n  }\n}\n\nasync updateApplicant(applicantId: number, data: any, step:number) {\n  // ✅ Update base applicant row\n  await db\n    .update(applicants)\n    .set({\n      firstName: data.firstName,\n      surname: data.surname,\n      otherName: data.otherName,\n      salutation: data.salutation,\n      idPassportType: data.idPassportType,\n      nationalId: data.nationalId,\n      dateOfBirth: data.dateOfBirth,\n      gender: data.gender,\n      nationality: data.nationality,\n      phoneNumber: data.phoneNumber,\n      altPhoneNumber: data.altPhoneNumber,\n      kraPin: data.kraPin,\n      ethnicity: data.ethnicity,\n      religion: data.religion,\n       ...(data.isEmployee !== undefined ? { isEmployee: data.isEmployee } : {}),\n      ...(data.isPwd !== undefined ? { isPwd: data.isPwd } : {}),\n      pwdNumber: data.pwdNumber,\n      countyId: data.countyId,\n      constituencyId: data.constituencyId,\n      wardId: data.wardId,\n      address: data.address,\n      updatedAt: new Date(),\n    })\n    .where(eq(applicants.id, applicantId));\n\n  // ✅ Upsert employee (if exists in payload)\n  if (data.employee) {\n    const existingEmployee = await db\n      .select()\n      .from(employees)\n      .where(eq(employees.applicantId, applicantId));\n\n    if (existingEmployee.length > 0) {\n      await db\n        .update(employees)\n        .set({\n          personalNumber: data.employee.personalNumber,\n          designation: data.employee.designation,\n          dutyStation: data.employee.dutyStation,\n          jg: data.employee.jg,\n          departmentId: data.employee.departmentId,\n          actingPosition: data.employee.actingPosition,\n          dofa: data.employee.dofa,\n          doca: data.employee.doca,\n        })\n        .where(eq(employees.applicantId, applicantId));\n    } else {\n      await db.insert(employees).values({\n        ...data.employee,\n        applicantId,\n      });\n      this.updateProgress(2, applicantId);\n    }\n  }\n\n// ✅ Array-based sections\n  const replaceArray = async (table: any, rows: any[], stepNumber: number) => {\n    await db.delete(table).where(eq(table.applicantId, applicantId));\n    if (rows?.length > 0) {\n      await db.insert(table).values(rows.map(r => ({ ...r, applicantId })));\n    }\n    await this.updateProgress(stepNumber, applicantId);\n  };\n\n  if (step === 3 && data.education) {\n    await replaceArray(educationRecords, data.education, 3);\n  }\n  if (step === 4 && data.shortCourses) {\n    await replaceArray(shortCourse, data.shortCourses, 4);\n  }\n  if (step === 5 && data.professionalQualifications) {\n    await replaceArray(professionalQualifications, data.professionalQualifications, 5);\n  }\n  if (step === 6 && data.employmentHistory) {\n    await replaceArray(employmentHistory, data.employmentHistory, 6);\n  }\n  if (step === 7 && data.referees) {\n    await replaceArray(referees, data.referees, 7);\n  }\n  if (step === 8 && data.documents) {\n    await replaceArray(documents, data.documents, 8);\n  }\n  \n  // ✅ Return updated applicant profile\n  return await this.getApplicantById(applicantId); // reuse your nested fetcher\n}  \n// 🔑 New: get by numeric ID instead of userId\n\n  async createApplicant(applicant: Omit<Applicant, 'id' | 'createdAt' | 'updatedAt'>): Promise<Applicant> {\n    const [newApplicant] = await db\n      .insert(applicants)\n      .values(applicant)\n      .returning();\n    return newApplicant;\n  } \nasync upsertEmploymentHistory(applicantId: number, jobs: any[]) {\n  await db.delete(employmentHistory).where(eq(employmentHistory.applicantId, applicantId));\n  if (jobs.length > 0) {\n    await db.insert(employmentHistory).values(jobs.map(j => ({ ...j, applicantId })));\n  }\n}\n  // Job operations\n  async getJobs(filters?: { isActive?: boolean; departmentId?: number }): Promise<Job[]> {\n  const conditions = [];\n\n  if (filters?.isActive !== undefined) {\n    conditions.push(eq(jobs.isActive, filters.isActive));\n  }\n\n  if (filters?.departmentId) {\n    conditions.push(eq(jobs.departmentId, filters.departmentId));\n  }\n\n  return await db\n    .select()\n    .from(jobs)\n    .where(conditions.length > 0 ? and(...conditions) : undefined)\n    .orderBy(desc(jobs.createdAt));\n}\n// Fetch Jobs\n  async getJob(id: number): Promise<any | undefined> {\n    const [job] = await db\n      .select()\n      .from(jobs)\n      .leftJoin(JG, eq(jobs.jg,JG.id))\n      .where(eq(jobs.id, id));\n    return job;\n  }\n// Create Jobs\n  async createJob(job: Omit<Job, 'id' | 'createdAt' | 'updatedAt'>): Promise<Job> {\n    const [newJob] = await db.insert(jobs).values(job).returning();\n    return newJob;\n  }\n// Update Jobs\n  async updateJob(id: number, job: Partial<Job>): Promise<Job> {\n    const [updatedJob] = await db\n      .update(jobs)\n      .set({ ...job, updatedAt: new Date() })\n      .where(eq(jobs.id, id))\n      .returning();\n    return updatedJob;\n  }\n\n  // Application operations\n  async getApplications(\n  filters?: { applicantId?: number; jobId?: number; status?: string }\n): Promise<Application[]> {\n  const conditions = [];\n\n  if (filters?.applicantId) {\n    conditions.push(eq(applications.applicantId, filters.applicantId));\n  }\n  if (filters?.jobId) {\n    conditions.push(eq(applications.jobId, filters.jobId));\n  }\n  if (filters?.status) {\n    conditions.push(eq(applications.status, filters.status as any));\n  }\n\n  const application = await db\n    .select({\n      id: applications.id,\n      jobId: applications.jobId,\n      applicantId: applications.applicantId,\n      status: applications.status,\n      submittedOn: applications.submittedOn,\n      remarks: applications.remarks,\n      interviewDate: applications.interviewDate,\n      interviewScore: applications.interviewScore,\n      createdAt: applications.createdAt,\n      updatedAt: applications.updatedAt,\n      job: {\n        id: jobs.id,\n        title: jobs.title,\n        department: {\n          id: departments.id,\n          name: departments.name\n        }\n      }\n    })\n    .from(applications)\n    .leftJoin(jobs, eq(applications.jobId, jobs.id))\n    .leftJoin(departments, eq(jobs.departmentId, departments.id))\n    .where(conditions.length > 0 ? and(...conditions) : undefined)\n    .orderBy(desc(applications.createdAt));\n\n    return application;\n}\n  async createApplication(application: Omit<Application, 'id' | 'createdAt' | 'updatedAt'>): Promise<Application> {\n    const [newApplication] = await db\n      .insert(applications)\n      .values(application)\n      .returning();\n    return newApplication;\n  }\n  // Update Applications\n  async updateApplication(id: number, application: Partial<Application>): Promise<Application> {\n    const [updatedApplication] = await db\n      .update(applications)\n      .set({ ...application, updatedAt: new Date() })\n      .where(eq(applications.id, id))\n      .returning();\n    return updatedApplication;\n  }\n  // Location operations\n  async getCounties(): Promise<County[]> {\n    return db.select().from(counties).orderBy(counties.name);\n  }\n  \n  async getConstituencies(): Promise<Constituency[]> {\n    return db.select().from(constituencies).orderBy(constituencies.name);\n  }\n\n  async getWards(): Promise<Ward[]> {\n    return db.select().from(wards).orderBy(wards.name);\n  }\n  \n  async getConstituenciesByCounty(countyId: number): Promise<Constituency[]> {\n    return db\n      .select()\n      .from(constituencies)\n      .where(eq(constituencies.countyId, countyId))\n      .orderBy(constituencies.name);\n  }\n\n  async getWardsByConstituency(constituencyId: number): Promise<Ward[]> {\n    return db\n      .select()\n      .from(wards)\n      .where(eq(wards.constituencyId, constituencyId))\n      .orderBy(wards.name);\n  }\n\n  // System configuration operations\n  async getDepartments(): Promise<Department[]> {\n    return db.select().from(departments).orderBy(departments.name);\n  }\n\n  async getDesignations(): Promise<Designation[]> {\n    return db.select().from(designations).orderBy(designations.name);\n  }\n\n  async getAwards(): Promise<Award[]> {\n    return db.select().from(awards).orderBy(awards.name);\n  }\n\n  async getCoursesOffered(): Promise<CourseOffered[]> {\n    return db.select().from(coursesOffered).orderBy(coursesOffered.name);\n  }\n\n  async getInstitutions(): Promise<Institution[]> {\n    return db.select().from(institutions).orderBy(institutions.name);\n  }\n\n  async getStudyArea(): Promise<StudyArea[]> {\n    return db.select().from(studyArea).orderBy(studyArea.name);\n  }\n\n  async getSpecializations(): Promise<Specialization[]> {\n    return db.select().from(specializations).orderBy(specializations.name);\n  }\n\n  async getEthnicity(): Promise<any[]> {\n    return db.select().from(ethnicity).orderBy(ethnicity.name);\n  }\n  async getJobGroups(): Promise<any[]> {    \n    return db.select().from(JG).orderBy(JG.name);\n  }\n  async getCertLevel(): Promise<CertificateLevel[]> {    \n    return db.select().from(certificateLevel).orderBy(certificateLevel.name);\n  }\n  // Notice operations\n  async getNotices(isPublished?: boolean): Promise<Notice[]> {\n    if (isPublished !== undefined) {\n      return await db\n        .select()\n        .from(notices)\n        .where(eq(notices.isPublished, isPublished))\n        .orderBy(desc(notices.createdAt));\n    }\n    return await db\n      .select()\n      .from(notices)\n      .orderBy(desc(notices.createdAt));\n  }  \nasync getFaq() {\n  return await db\n    .select()\n    .from(faq)\n    // .groupBy(faq.category)\n  .orderBy(desc(faq.category))\n  }\n\n  // Gallery operations\n  async getGalleryItems() {\n    return await db\n      .select()\n      .from(galleryItems)\n      .where(eq(galleryItems.isPublished, true))\n      .orderBy(desc(galleryItems.eventDate));\n  }\n\n  async createGalleryItem(item: InsertGalleryItem) {\n    const [galleryItem] = await db\n      .insert(galleryItems)\n      .values(item)\n      .returning();\n    return galleryItem;\n  }\n\n  // System configuration operations\n  async getSystemConfig(key?: string, section?: string) {\n    if (key) {\n      return await db\n        .select()\n        .from(systemConfig)\n        .where(eq(systemConfig.key, key))\n        .orderBy(systemConfig.key);\n    } else if (section) {\n      return await db\n        .select()\n        .from(systemConfig)\n        .where(eq(systemConfig.section, section))\n        .orderBy(systemConfig.key);\n    } else {\n      return await db\n        .select()\n        .from(systemConfig)\n        .orderBy(systemConfig.key);\n    }\n  }\n\n  async upsertSystemConfig(config: InsertSystemConfig) {\n    const [configItem] = await db\n      .insert(systemConfig)\n      .values(config)\n      .onConflictDoUpdate({\n        target: systemConfig.key,\n        set: {\n          value: config.value,\n          updatedBy: config.updatedBy,\n          updatedAt: sql`now()`\n        }\n      })\n      .returning();\n    return configItem;\n  }\n\n  // Board members operations\n  async getBoardMembers() {\n    return await db\n      .select()\n      .from(boardMembers)\n      .where(eq(boardMembers.isActive, true))\n      .orderBy(boardMembers.order, boardMembers.name);\n  }\n\n  async createBoardMember(member: InsertBoardMember) {\n    const [boardMember] = await db\n      .insert(boardMembers)\n      .values(member)\n      .returning();\n    return boardMember;\n  }\n\n  // Notification operations\n  async getNotifications(): Promise<Notification[]> {\n    return await db\n      .select()\n      .from(notifications)\n      .orderBy(desc(notifications.createdAt));\n  }\n\n  async createNotification(data: InsertNotification): Promise<Notification> {\n    const [notification] = await db\n      .insert(notifications)\n      .values(data)\n      .returning();\n    return notification;\n  }\n\n  async getNotificationStats(): Promise<{\n    totalSent: number;\n    openRate: number;\n    activeUsers: number;\n    pending: number;\n  }> {\n    // For now return mock data - can be enhanced later\n    const totalSent = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(notifications)\n      .where(eq(notifications.status, 'sent'))\n      .then(rows => rows[0]?.count || 0);\n\n    const pending = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(notifications)\n      .where(eq(notifications.status, 'scheduled'))\n      .then(rows => rows[0]?.count || 0);\n\n    const activeUsers = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(users)\n      .then(rows => rows[0]?.count || 0);\n\n    return {\n      totalSent,\n      openRate: 85, // Mock data for now\n      activeUsers,\n      pending,\n    };\n  }\n\n  // Enhanced recipient tracking methods\n  async createNotificationRecipients(notificationId: number, recipients: InsertNotificationRecipient[]): Promise<void> {\n    if (recipients.length > 0) {\n      // Ensure all recipients have the correct notificationId, trackingToken, and defaults\n      const recipientsWithDefaults = recipients.map(recipient => ({\n        ...recipient,\n        notificationId,\n        trackingToken: recipient.trackingToken || this.generateTrackingToken(),\n        status: recipient.status || 'queued',\n        attempts: recipient.attempts || 0,\n      }));\n      await db.insert(notificationRecipients).values(recipientsWithDefaults);\n    }\n  }\n\n  private generateTrackingToken(): string {\n    return Math.random().toString(36).substring(2) + Date.now().toString(36);\n  }\n\n  async updateRecipientStatus(recipientId: number, status: string, lastError?: string): Promise<void> {\n    const updates: any = { status };\n    \n    // Set appropriate timestamp based on status\n    if (status === 'sent') updates.sentAt = new Date();\n    if (status === 'delivered') updates.deliveredAt = new Date();\n    if (status === 'opened') updates.openedAt = new Date();\n    if (lastError) updates.lastError = lastError;\n\n    await db\n      .update(notificationRecipients)\n      .set(updates)\n      .where(eq(notificationRecipients.id, recipientId));\n  }\n\n  async getNotificationRecipients(notificationId: number, status?: string): Promise<NotificationRecipient[]> {\n    const conditions = [eq(notificationRecipients.notificationId, notificationId)];\n    \n    if (status) {\n      conditions.push(eq(notificationRecipients.status, status));\n    }\n\n    const whereClause = conditions.length === 1 ? conditions[0] : and(...conditions);\n\n    return await db\n      .select()\n      .from(notificationRecipients)\n      .where(whereClause)\n      .orderBy(desc(notificationRecipients.queuedAt));\n  }\n\n  async retryFailedRecipients(notificationId: number): Promise<void> {\n    await db\n      .update(notificationRecipients)\n      .set({ \n        status: 'queued',\n        attempts: sql`attempts + 1`,\n        lastError: null,\n      })\n      .where(and(\n        eq(notificationRecipients.notificationId, notificationId),\n        eq(notificationRecipients.status, 'failed')\n      ));\n  }\n\n  async trackNotificationOpen(trackingToken: string): Promise<boolean> {\n    const result = await db\n      .update(notificationRecipients)\n      .set({ \n        status: 'opened',\n        openedAt: new Date(),\n      })\n      .where(and(\n        eq(notificationRecipients.trackingToken, trackingToken),\n        ne(notificationRecipients.status, 'opened') // Only update if not already opened\n      ))\n      .returning({ id: notificationRecipients.id });\n\n    return result.length > 0;\n  }\n  async createNotice(notice: Omit<Notice, 'id' | 'createdAt' | 'updatedAt'>): Promise<Notice> {\n    const [newNotice] = await db.insert(notices).values(notice).returning();\n    return newNotice;\n  }\n\n  async createFaqs( faqs: Omit<Faq,'id' | 'createdAt'>) {\n    const [newFaqs] = await db.insert(faq).values(faqs).returning();\n    return newFaqs;\n  }\n  async updateNotice(id: number, notice: Partial<Notice>): Promise<Notice> {\n    const [updatedNotice] = await db\n      .update(notices)\n      .set({ ...notice, updatedAt: new Date() })\n      .where(eq(notices.id, id))\n      .returning();\n    return updatedNotice;\n  }\n\n  // Subscription operations\n  async createSubscription(subscription: InsertNoticeSubscription): Promise<NoticeSubscription> {\n    const [newSubscription] = await db\n      .insert(noticeSubscriptions)\n      .values(subscription)\n      .returning();\n    return newSubscription;\n  }\n\n  async getSubscription(email: string): Promise<NoticeSubscription | undefined> {\n    const [subscription] = await db\n      .select()\n      .from(noticeSubscriptions)\n      .where(eq(noticeSubscriptions.email, email))\n      .limit(1);\n    return subscription;\n  }\n\n  async unsubscribeEmail(token: string): Promise<boolean> {\n    const [unsubscribed] = await db\n      .update(noticeSubscriptions)\n      .set({ \n        isActive: false, \n        unsubscribedAt: new Date() \n      })\n      .where(eq(noticeSubscriptions.subscriptionToken, token))\n      .returning();\n    return !!unsubscribed;\n  }\n\n  async getActiveSubscriptions(): Promise<NoticeSubscription[]> {\n    return await db\n      .select()\n      .from(noticeSubscriptions)\n      .where(eq(noticeSubscriptions.isActive, true));\n  }\n  // OTP operations\n  async createOtp(phoneNumber: string, otp: string): Promise<OtpVerification> {\n    // Clean up old OTPs for this phone number\n    await db.delete(otpVerification).where(eq(otpVerification.phoneNumber, phoneNumber));\n    \n    // Create new OTP with 5-minute expiration\n    const expiresAt = new Date(Date.now() + 5 * 60 * 1000); // 5 minutes\n    \n    const [newOtp] = await db.insert(otpVerification).values({\n      phoneNumber,\n      otp,\n      expiresAt,\n      verified: false,\n      attempts: 0,\n    }).returning();\n    \n    return newOtp;\n  }\n\n  async verifyEmail(email: string): Promise<boolean> {\n    const [emailRet] = await db\n      .select()\n      .from(users)\n      .where(and(eq(users.email, email)))\n      .limit(1);\n    if (!emailRet) {\n      return false;\n    }\n    \n    return true;\n  }\n  async progressCompletion(step: number):Promise<boolean> {\n  const[res] = await db.select({res: applicants.profileCompletionPercentage}).from(applicants).where(lt(applicants.profileCompletionPercentage, step)).limit(1); //<=\n  console.log(`\"Progress data for ${step} is `, res?.res);\n  \n    if (!res) {\n    return false;\n  }\n    return true;\n  }\n   /**\n   * Compute applicant progress dynamically\n   */\n  async getProgress(applicantId: number) {\n    const applicant = await this.getApplicantById(applicantId);\n    if (!applicant) return { percentage: 0, completedSteps: 0, steps: [] };\n\n    const steps = [\n      {\n        id: 1,\n        name: \"Personal Info\",\n        required: true,\n        completed: !!(\n          applicant.firstName &&\n          applicant.surname &&\n          applicant.phoneNumber\n        ),\n      },\n      {\n        id: 1.5,\n        name: \"Employee Details\",\n        required: false,\n        completed: !!applicant.isEmployee,\n      },\n      {\n        id: 2,\n        name: \"Address\",\n        required: true,\n        completed: !!applicant.countyId,\n      },\n      {\n        id: 3,\n        name: \"Education\",\n        required: true,\n        completed: applicant.education?.length > 0,\n      },\n      {\n        id: 4,\n        name: \"Short Courses\",\n        required: false,\n        completed: applicant.shortCourses?.length > 0,\n      },\n      {\n        id: 5,\n        name: \"Professional Qualifications\",\n        required: false,\n        completed: applicant.professionalQualifications?.length > 0,\n      },\n      {\n        id: 6,\n        name: \"Employment History\",\n        required: false,\n        completed: applicant.employmentHistory?.length > 0,\n      },\n      {\n        id: 7,\n        name: \"Referees\",\n        required: true,\n        completed: applicant.referees?.length === 3,\n      },\n      {\n        id: 8,\n        name: \"Documents\",\n        required: true,\n        completed: applicant.documents?.length > 0,\n      },\n    ];\n    const completedSteps = steps.filter((s) => s.completed).length;\n    const percentage = Math.round((completedSteps / steps.length) * 100);\n\n    return {\n      percentage,\n      completedSteps,\n      steps,\n    };\n  }\n  private computeCompletedSteps(applicant: any) {\n  const steps: number[] = [];\n\n  if (applicant.firstName && applicant.surname && applicant.phoneNumber) {\n    steps.push(1); // Personal Details\n  }\n  if (applicant.isEmployee && applicant.employee && \n      applicant.employee.personalNumber && \n      applicant.employee.designation && \n      applicant.employee.dutyStation && \n      applicant.employee.jg && \n      applicant.employee.departmentId) {\n    steps.push(1.5); // Employee Details - all required fields present\n  }\n  if (applicant.countyId && applicant.constituencyId && applicant.wardId) {\n    steps.push(2); // Address - all location selections required\n  }\n  if (applicant.education?.length > 0) {\n    steps.push(3); // Education\n  }\n  if (applicant.shortCourses?.length > 0) {\n    steps.push(4); // Short Courses\n  }\n  if (applicant.professionalQualifications?.length > 0) {\n    steps.push(5); // Professional Qualifications\n  }\n  if (applicant.employmentHistory?.length > 0) {\n    steps.push(6); // Employment History\n  }\n  if (applicant.referees?.length === 3) {\n    steps.push(7); // Referees\n  }\n  if (applicant.documents?.length > 0) {\n    steps.push(8); // Documents\n  }\n\n  return steps;\n}\n\n  async comparePasswords(password: string): Promise<boolean> {\n    const [passwordRes] = await db\n      .select()\n      .from(users)\n      .where(and(eq(users.passwordHash, password)))\n      .limit(1);\n    if (!passwordRes) {\n      return false;\n    }\n    return true;\n  }\n  async getUserByEmail(email: string):Promise<User> {\n  const [user] = await db.select().from(users).where(eq(users.email, email));\n  return user;\n}\n  async verifyOtp(phoneNumber: string, otp: string): Promise<boolean> {\n    const [otpRecord] = await db\n      .select()\n      .from(otpVerification)\n      .where(\n        and(\n          eq(otpVerification.phoneNumber, phoneNumber),\n          eq(otpVerification.otp, otp),\n          eq(otpVerification.verified, false)\n        )\n      )\n      .orderBy(desc(otpVerification.createdAt))\n      .limit(1);\n\n    if (!otpRecord) {\n      return false;\n    }\n    // Check if OTP is expired\n    if (new Date() > otpRecord.expiresAt) {\n      return false;\n    }\n\n    // Check if too many attempts\n    if ((otpRecord.attempts || 0) >= 3) {\n      return false;\n    }\n\n    // Increment attempts\n    await db.update(otpVerification)\n      .set({ \n        attempts: (otpRecord.attempts || 0) + 1,\n        verified: true \n      })\n      .where(eq(otpVerification.id, otpRecord.id));\n\n    return true;\n  }\n\n  async cleanupExpiredOtps(): Promise<void> {\n    await db\n      .delete(otpVerification)\n      .where(sql`${otpVerification.expiresAt} < NOW()`);\n  }\n  // Employee operations\n  async verifyEmployee(personalNumber: string, idNumber: string): Promise<Payroll | undefined> {\n    const [payrol] = await db\n      .select()\n      .from(payroll)\n      .where(\n        and(\n          eq(payroll.personalNumber, personalNumber),\n          eq(payroll.idNumber, idNumber)\n        )\n      );\n    return payrol;\n  }\n\n  async upsertEmployeeDetails(applicantId: number, employeeData: Partial<InsertEmployee>): Promise<Employee> {\n    const dataEmployee: any = { ...employeeData }\n    // Fix date-only fields    \n  if (dataEmployee.dofa) {\n    dataEmployee.dofa = new Date(dataEmployee.dofa);\n  }\n  if (dataEmployee.doca) {\n    dataEmployee.doca = new Date(dataEmployee.doca);\n  }\n\n  // Never let the client override createdAt\n  if (\"createdAt\" in dataEmployee) {\n    delete dataEmployee.createdAt;\n  }\n  if (\"updatedAt\" in dataEmployee) {\n    delete dataEmployee.updatedAt;\n  }\n\n  // Always set updatedAt on the server\n  dataEmployee.updatedAt = new Date();\n    // dataEmployee.doca = this.handleDates(dataEmployee.doca);\n    // dataEmployee.dofa = this.handleDates(dataEmployee.dofa);\n    \n    const existingEmployee = await db\n      .select()\n      .from(employees)\n      .where(eq(employees.applicantId, applicantId))\n      .then(rows => rows[0]);\n\n    if (existingEmployee) {\n      const [updatedEmployee] = await db\n        .update(employees)\n        .set({ ...dataEmployee, updatedAt: new Date() })\n        .where(eq(employees.id, existingEmployee.id))\n        .returning();\n      return updatedEmployee;\n    } else {\n      const [newEmployee] = await db\n        .insert(employees)\n        .values({\n          applicantId,\n          ...dataEmployee,\n        } as InsertEmployee)\n        .returning();\n      return newEmployee;\n    }\n  }\n  // Job Groups\n  async seedJobGroup(jobGroup: Omit<Jg, 'id' | 'createdAt'>): Promise<Jg> {\n  const [newJobGroup] = await db\n    .insert(JG)\n    .values(jobGroup)\n    .returning();\n  return newJobGroup;\n}\n  // Job Groups\n  async seedEthnicity(Ethnic: Omit<Ethnicity, 'id' | 'createdAt'>): Promise<Ethnicity> {\n  const [newEthnicity] = await db\n    .insert(ethnicity)\n    .values(Ethnic)\n    .returning();\n  return newEthnicity;\n}\n  //Seed Counties\n  async seedCounties(county: Omit<County, 'id' | 'createdAt'>): Promise<County> {\n  const [newCounties] = await db\n    .insert(counties)\n    .values(county)\n    .returning();\n  return newCounties;\n  }\n// Seed a single ward\nasync seedWard(ward: Omit<Ward, 'id'>): Promise<Ward> {\n  const [newWard] = await db\n    .insert(wards)\n    .values(ward)\n    .returning();\n  return newWard;\n}\n// Seed a single Award\nasync seedAward(award: Omit<Award, 'id'>): Promise<Award> {\n  const [newAward] = await db\n    .insert(awards)\n    .values(award)\n    .returning();\n  return newAward;\n}\n// Seed a single Cert level\nasync seedCertLevel(cert: Omit<CertificateLevel, 'id'>): Promise<CertificateLevel> {\n  const [newCertLevel] = await db\n    .insert(certificateLevel)\n    .values(cert)\n    .returning();\n  return newCertLevel;\n}\n// Seed a single Specialize\nasync seedSpecialize(specialize: Omit<Specialization, 'id'>): Promise<Specialization> {\n  const [newSpecial] = await db\n    .insert(specializations)\n    .values(specialize)\n    .returning();\n  return newSpecial;\n}\n// Seed a single Study Area\nasync seedStudy(studyA: Omit<StudyArea, 'id'>): Promise<StudyArea> {\n  const [newStudyArea] = await db\n    .insert(studyArea)\n    .values(studyA)\n    .returning();\n  return newStudyArea;\n}\n  // Seed Constituencies\n  async seedSubCounties(\n    subCounty: Omit<Constituency, 'id'>    \n  ): Promise<Constituency> {\n    const [newSub] = await db\n      .insert(constituencies)\n      .values(subCounty)\n      .returning();\n    return newSub;\n  }\n\n  async seedInstitutions(institute: Omit<Institution, 'id'>): Promise<Institution> {\n    const [newInstitution] = await db\n      .insert(institutions)\n      .values(institute)\n      .returning();\n    return newInstitution;\n  }\n  async seedDesignation(designation: Omit<Designation, 'id'>): Promise<Designation> {\n    const [newDesignation] = await db\n      .insert(designations)\n      .values(designation)\n      .returning();\n    return newDesignation;\n  }\n// Seed a single Department\nasync seedDepartment(department: Omit<Department, 'id'>): Promise<Department> {\n  const [newDepartment] = await db\n    .insert(departments)\n    .values(department)\n    .returning();\nreturn newDepartment;\n}\n  // Dependencies on dropdowns\nasync getCountyByCountyName(countyName: string): Promise<County>{\n    const [countyID] = await db\n      .select()\n      .from(counties)\n      .where(eq(counties.name, countyName));\n    return countyID\n}\nasync getConstituencyByName(name: string): Promise<Constituency | undefined> {\n  const [constituency] = await db\n    .select()\n    .from(constituencies)\n    .where(eq(constituencies.name, name))\n    .limit(1);\n\n  return constituency;\n}\nasync getStudyAreaByName(name: string): Promise<StudyArea | undefined> {\n  const [studyareas] = await db\n    .select()\n    .from(studyArea)\n    .where(eq(studyArea.name, name))\n    .limit(1);\n\n  return studyareas;\n}\n\n  // Report operations\n  async getApplicationsReport(startDate?: string, endDate?: string): Promise<any> {\n    let dateFilter = sql`1=1`;\n    if (startDate && endDate) {\n      dateFilter = sql`${applications.createdAt} >= ${startDate} AND ${applications.createdAt} <= ${endDate}`;\n    } else if (startDate) {\n      dateFilter = sql`${applications.createdAt} >= ${startDate}`;\n    } else if (endDate) {\n      dateFilter = sql`${applications.createdAt} <= ${endDate}`;\n    }\n\n    const applicationsData = await db\n      .select({\n        id: applications.id,\n        jobId: applications.jobId,\n        jobTitle: jobs.title,\n        applicantId: applications.applicantId,\n        applicantName: sql<string>`CONCAT(${applicants.firstName}, ' ', ${applicants.surname})`,\n        status: applications.status,\n        submittedOn: applications.submittedOn,\n        department: departments.name,\n        createdAt: applications.createdAt,\n      })\n      .from(applications)\n      .innerJoin(jobs, eq(applications.jobId, jobs.id))\n      .innerJoin(applicants, eq(applications.applicantId, applicants.id))\n      .innerJoin(departments, eq(jobs.departmentId, departments.id))\n      .where(dateFilter)\n      .orderBy(desc(applications.createdAt));\n\n    const summary = await db\n      .select({\n        total: sql<number>`COUNT(*)`,\n        submitted: sql<number>`COUNT(CASE WHEN ${applications.status} = 'submitted' THEN 1 END)`,\n        shortlisted: sql<number>`COUNT(CASE WHEN ${applications.status} = 'shortlisted' THEN 1 END)`,\n        interviewed: sql<number>`COUNT(CASE WHEN ${applications.status} = 'interviewed' THEN 1 END)`,\n        rejected: sql<number>`COUNT(CASE WHEN ${applications.status} = 'rejected' THEN 1 END)`,\n        hired: sql<number>`COUNT(CASE WHEN ${applications.status} = 'hired' THEN 1 END)`,\n      })\n      .from(applications)\n      .where(dateFilter);\n\n    return {\n      data: applicationsData,\n      summary: summary[0],\n      dateRange: { startDate, endDate }\n    };\n  }\n\n  async getJobsReport(startDate?: string, endDate?: string): Promise<any> {\n    let dateFilter = sql`1=1`;\n    if (startDate && endDate) {\n      dateFilter = sql`${jobs.createdAt} >= ${startDate} AND ${jobs.createdAt} <= ${endDate}`;\n    } else if (startDate) {\n      dateFilter = sql`${jobs.createdAt} >= ${startDate}`;\n    } else if (endDate) {\n      dateFilter = sql`${jobs.createdAt} <= ${endDate}`;\n    }\n\n    const jobsData = await db\n      .select({\n        id: jobs.id,\n        title: jobs.title,\n        department: departments.name,\n        isActive: jobs.isActive,\n        posts: jobs.posts,\n        startDate: jobs.startDate,\n        endDate: jobs.endDate,\n        createdAt: jobs.createdAt,\n        totalApplications: sql<number>`COUNT(${applications.id})`,\n      })\n      .from(jobs)\n      .innerJoin(departments, eq(jobs.departmentId, departments.id))\n      .leftJoin(applications, eq(jobs.id, applications.jobId))\n      .where(dateFilter)\n      .groupBy(jobs.id, departments.name)\n      .orderBy(desc(jobs.createdAt));\n\n    const summary = await db\n      .select({\n        total: sql<number>`COUNT(*)`,\n        active: sql<number>`COUNT(CASE WHEN ${jobs.isActive} = true THEN 1 END)`,\n        inactive: sql<number>`COUNT(CASE WHEN ${jobs.isActive} = false THEN 1 END)`,\n        totalPosts: sql<number>`COALESCE(SUM(${jobs.posts}), 0)`,\n      })\n      .from(jobs)\n      .where(dateFilter);\n\n    return {\n      data: jobsData,\n      summary: summary[0],\n      dateRange: { startDate, endDate }\n    };\n  }\n\n  async getUsersReport(startDate?: string, endDate?: string): Promise<any> {\n    let dateFilter = sql`1=1`;\n    if (startDate && endDate) {\n      dateFilter = sql`${users.createdAt} >= ${startDate} AND ${users.createdAt} <= ${endDate}`;\n    } else if (startDate) {\n      dateFilter = sql`${users.createdAt} >= ${startDate}`;\n    } else if (endDate) {\n      dateFilter = sql`${users.createdAt} <= ${endDate}`;\n    }\n\n    const usersData = await db\n      .select({\n        id: users.id,\n        email: users.email,\n        firstName: users.firstName,\n        lastName: users.surname,\n        role: users.role,\n        createdAt: users.createdAt,\n        profileCompleted: applicants.profileCompletionPercentage,\n        county: counties.name,\n      })\n      .from(users)\n      .leftJoin(applicants, eq(users.id, applicants.userId))\n      .leftJoin(counties, eq(applicants.countyId, counties.id))\n      .where(dateFilter)\n      .orderBy(desc(users.createdAt));\n\n    const summary = await db\n      .select({\n        total: sql<number>`COUNT(*)`,\n        applicants: sql<number>`COUNT(CASE WHEN ${users.role} = 'applicant' THEN 1 END)`,\n        admins: sql<number>`COUNT(CASE WHEN ${users.role} = 'admin' THEN 1 END)`,\n        board: sql<number>`COUNT(CASE WHEN ${users.role} = 'board' THEN 1 END)`,\n      })\n      .from(users)\n      .where(dateFilter);\n\n    return {\n      data: usersData,\n      summary: summary[0],\n      dateRange: { startDate, endDate }\n    };\n  }\n\n  async getPerformanceReport(startDate?: string, endDate?: string): Promise<any> {\n    let dateFilter = sql`1=1`;\n    if (startDate && endDate) {\n      dateFilter = sql`${applications.createdAt} >= ${startDate} AND ${applications.createdAt} <= ${endDate}`;\n    } else if (startDate) {\n      dateFilter = sql`${applications.createdAt} >= ${startDate}`;\n    } else if (endDate) {\n      dateFilter = sql`${applications.createdAt} <= ${endDate}`;\n    }\n\n    // Department-wise performance\n    const departmentStats = await db\n      .select({\n        department: departments.name,\n        totalJobs: sql<number>`COUNT(DISTINCT ${jobs.id})`,\n        totalApplications: sql<number>`COUNT(${applications.id})`,\n        hired: sql<number>`COUNT(CASE WHEN ${applications.status} = 'hired' THEN 1 END)`,\n        avgApplicationsPerJob: sql<number>`ROUND(COUNT(${applications.id})::numeric / NULLIF(COUNT(DISTINCT ${jobs.id}), 0), 2)`,\n        hireRate: sql<number>`ROUND((COUNT(CASE WHEN ${applications.status} = 'hired' THEN 1 END)::numeric / NULLIF(COUNT(${applications.id}), 0)) * 100, 2)`,\n      })\n      .from(departments)\n      .leftJoin(jobs, eq(departments.id, jobs.departmentId))\n      .leftJoin(applications, eq(jobs.id, applications.jobId))\n      .where(dateFilter)\n      .groupBy(departments.id, departments.name)\n      .orderBy(departments.name);\n\n    // Overall metrics\n    const overallMetrics = await db\n      .select({\n        totalApplications: sql<number>`COUNT(*)`,\n        totalJobs: sql<number>`COUNT(DISTINCT ${applications.jobId})`,\n        totalHired: sql<number>`COUNT(CASE WHEN ${applications.status} = 'hired' THEN 1 END)`,\n        avgProcessingDays: sql<number>`ROUND(AVG(EXTRACT(epoch FROM (${applications.updatedAt} - ${applications.createdAt})) / 86400), 1)`,\n        hireRate: sql<number>`ROUND((COUNT(CASE WHEN ${applications.status} = 'hired' THEN 1 END)::numeric / COUNT(*)) * 100, 2)`,\n      })\n      .from(applications)\n      .innerJoin(jobs, eq(applications.jobId, jobs.id))\n      .where(dateFilter);\n\n    return {\n      departmentStats,\n      overallMetrics: overallMetrics[0],\n      dateRange: { startDate, endDate }\n    };\n  }\n\n  // Truncate all tables\n  async truncateAll(): Promise<void> {\n  // Truncate child tables first to avoid FK constraint errors\n  await db.execute(sql`TRUNCATE TABLE wards RESTART IDENTITY CASCADE`);\n  await db.execute(sql`TRUNCATE TABLE constituencies RESTART IDENTITY CASCADE`);\n  await db.execute(sql`TRUNCATE TABLE counties RESTART IDENTITY CASCADE`);\n  await db.execute(sql`TRUNCATE TABLE jg RESTART IDENTITY CASCADE`);\n  await db.execute(sql`TRUNCATE TABLE awards RESTART IDENTITY CASCADE`);\n  await db.execute(sql`TRUNCATE TABLE certificate_level RESTART IDENTITY CASCADE`);\n  await db.execute(sql`TRUNCATE TABLE specializations RESTART IDENTITY CASCADE`);\n  await db.execute(sql`TRUNCATE TABLE study_area RESTART IDENTITY CASCADE`);\n  await db.execute(sql`TRUNCATE TABLE departments RESTART IDENTITY CASCADE`);\n  await db.execute(sql`TRUNCATE TABLE ethnicity RESTART IDENTITY CASCADE`);\n\n}\n\n  // Document operations\n  async saveDocument(documentData: {\n    applicantId: number;\n    type: string;\n    fileName: string;\n    filePath: string;\n    fileSize?: number;\n    mimeType?: string;\n  }) {\n    const [document] = await db\n      .insert(documents)\n      .values({\n        applicantId: documentData.applicantId,\n        type: documentData.type,\n        fileName: documentData.fileName,\n        filePath: documentData.filePath,\n        fileSize: documentData.fileSize,\n        mimeType: documentData.mimeType,\n      })\n      .returning();\n    \n    return document;\n  }\n}\nexport const storage = new DatabaseStorage();\n","size_bytes":48392},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations, isNotNull } from \"drizzle-orm\";\nimport {\n  pgTable,\n  text,\n  varchar,\n  integer,\n  timestamp,\n  date,\n  boolean,\n  pgEnum,\n  jsonb,\n  index,\n  uniqueIndex,\n  serial\n} from \"drizzle-orm/pg-core\";\n\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User roles enum\nexport const userRoleEnum = pgEnum(\"user_role\", [\"applicant\", \"admin\", \"board\"]);\n\n// Application status enum\nexport const applicationStatusEnum = pgEnum(\"application_status\", [\n  \"draft\", \"submitted\", \"shortlisted\", \"interviewed\", \"rejected\", \"hired\"\n]);\n\n\n\n// Counties\nexport const counties = pgTable(\"counties\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Constituencies\nexport const constituencies = pgTable(\"constituencies\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  countyId: integer(\"county_id\").notNull().references(() => counties.id),\n});\n\n// Wards\nexport const wards = pgTable(\"wards\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  constituencyId: integer(\"constituency_id\").notNull().references(() => constituencies.id),\n});\n\n// Departments\nexport const departments = pgTable(\"departments\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 250 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Designations\nexport const designations = pgTable(\"designations\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 250 }).notNull(),\n  jobGroup: varchar(\"job_group\", { length: 4 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Awards (education levels)\nexport const awards = pgTable(\"awards\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Specializations\nexport const specializations = pgTable(\"specializations\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  studyArea:integer('study_area'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Ethnicity\nexport const ethnicity = pgTable(\"ethnicity\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Courses offered\nexport const coursesOffered = pgTable(\"courses_offered\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  specializationId: integer(\"specialization_id\").notNull().references(() => specializations.id),\n  awardId: integer(\"award_id\").notNull().references(() => awards.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Professions\nexport const professions = pgTable(\"professions\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Institutions\nexport const institutions = pgTable(\"institutions\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Applicants\nexport const applicants = pgTable(\"applicants\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  salutation: varchar(\"salutation\", { length: 8 }),\n  firstName: varchar(\"first_name\", { length: 100 }),\n  surname: varchar(\"surname\", { length: 100 }),\n  otherName: varchar(\"other_name\", { length: 100 }),\n  phoneNumber: varchar(\"phone_number\", { length: 20 }),\n  phoneVerified: boolean(\"phone_verified\").default(false),\n  phoneVerifiedAt: date(\"phone_verified_at\"),\n  altPhoneNumber: varchar(\"alt_phone_number\", { length: 20 }),\n  nationalId: varchar(\"national_id\", { length: 50 }),\n  idPassportType: varchar(\"id_passport_type\", { length: 20 }), // 'national_id', 'passport', 'alien_id'\n  dateOfBirth: date(\"date_of_birth\"),\n  gender: varchar(\"gender\", { length: 10 }),\n  nationality: varchar(\"nationality\", { length: 100 }),\n  countyId: integer(\"county_id\").references(() => counties.id),\n  constituencyId: integer(\"constituency_id\").references(() => constituencies.id),\n  wardId: integer(\"ward_id\").references(() => wards.id),\n  address: varchar(\"address\", { length: 250 }),\n  ethnicity: varchar(\"ethnicity\", { length: 50 }),\n  religion: varchar(\"religion\", { length: 50 }),\n  isPwd: boolean(\"is_pwd\").default(false),\n  pwdNumber: varchar(\"pwd_number\", { length: 100 }),\n  isEmployee: boolean(\"is_employee\").default(false),\n  kraPin: varchar(\"kra_pin\", { length: 50 }),\n  professionId: integer(\"profession_id\").references(() => professions.id),\n  profileCompletionPercentage: integer(\"profile_completion_percentage\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n// Users table for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  surname: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  nationalId: varchar(\"national_id\", { length: 11 }),\n  idPassportType: varchar(\"id_passport_type\", { length: 20 }),\n  phoneNumber: varchar('phone_number'),\n  password: varchar(\"password\"),\n  passwordHash: varchar(\"password_hash\").notNull(),\n  role: userRoleEnum(\"role\").default(\"applicant\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n// Jobs\nexport const jobs = pgTable(\"jobs\", {\n  id: serial(\"id\").primaryKey(),\n  advertNumb: varchar(\"code\"),\n  title: varchar(\"title\", { length: 250 }).notNull(),\n  description: text(\"description\"),\n  departmentId: integer(\"department_id\").notNull().references(() => departments.id),\n  designationId: integer(\"designation_id\"),\n  requirements: jsonb(\"requirements\"), // Store qualification requirements\n  isActive: boolean(\"is_active\").notNull().default(true),\n  jg: integer(\"jg_id\").notNull().references(()=>JG.id),\n  catetogy: varchar(\"category\"),\n  experience: varchar(\"experience\"),\n  posts: integer(\"posts\"),\n  venue: varchar(\"venue\"),\n  requiredCourses: varchar(\"required_courses\"),\n  certificateLevel: integer(\"cert_level_id\").references(()=>certificateLevel.id),\n  requiredStudyAreaId: integer(\"required_study_area_id\").references(() => studyArea.id),\n  isReleased: integer(\"is_released\"),\n  advertType: varchar(\"advert_type\"),\n  status: varchar(\"status\"),\n  startDate: date(\"start_date\"),\n  endDate: date(\"end_date\"),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n//Certificate Level\nexport const certificateLevel = pgTable(\"certificate_level\", {\n  id: serial('id').primaryKey(),\n  name: varchar(\"name\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n// Applications\nexport const applications = pgTable(\"applications\", {\n  id: serial(\"id\").primaryKey(),\n  jobId: integer(\"job_id\").notNull().references(() => jobs.id),\n  applicantId: integer(\"applicant_id\").notNull().references(() => applicants.id),\n  status: applicationStatusEnum(\"status\").default(\"draft\"),\n  submittedOn: date(\"submitted_on\"),\n  remarks: text(\"remarks\"),\n  interviewDate: date(\"interview_date\"),\n  interviewScore: integer(\"interview_score\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Education records\nexport const education = pgTable(\"education_records\", {\n  id: serial(\"id\").primaryKey(),\n  applicantId: integer(\"applicant_id\").notNull().references(() => applicants.id),\n  courseId: integer(\"course_id\").references(() => coursesOffered.id),\n  courseName: varchar(\"course_name\", { length: 255 }),\n  certificateLevelId: integer(\"certificate_level_id\").notNull().references(() => awards.id),\n  specializationId: integer(\"specialization_id\").notNull().references(() => specializations.id),\n  studyArea: varchar(\"study_area\", { length: 255 }).notNull(),\n  institution: varchar(\"institution\", { length: 255 }).notNull(),\n  qualification: varchar(\"qualification\", { length: 255 }).notNull(),\n  grade: varchar(\"grade\", { length: 50 }),\n  yearFrom: integer(\"year_from\").notNull(),\n  yearCompleted: integer(\"year_completed\").notNull(),\n  certificatePath: varchar(\"certificate_path\", { length: 500 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Alias for backward compatibility\nexport const educationRecords = education;\n\nexport const studyArea = pgTable(\"study_area\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar('name',{ length: 250 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\nexport const JG = pgTable(\"jg\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar('name',{ length: 250 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\nexport const religion = pgTable(\"religions\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar('name',{ length: 250 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n//Payroll Employees\nexport const payroll = pgTable(\"payroll\", {\n  id: serial(\"id\").primaryKey(),\n  designation: varchar('designation', { length: 250 }).notNull(),\n  personalNumber: varchar('personal_number', { length: 13 }).notNull(),  \n  idNumber: varchar('id_number', { length: 13 }).notNull(),  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n// County employees table for verification\nexport const employees = pgTable(\"employees\", {\n  id: serial(\"id\").primaryKey(),\n  applicantId: integer(\"applicant_id\").references(() => applicants.id),\n  personalNumber: varchar(\"personal_number\", { length: 50 }).notNull().unique(),\n  designation: varchar(\"designation\", { length: 150 }).notNull(),\n  dutyStation: varchar(\"duty_station\", { length: 200 }),\n  jg: varchar(\"jg\", { length: 4 }), // Job Group\n  actingPosition: varchar(\"acting_position\", { length: 150 }),\n  departmentId: integer(\"department_id\").references(() => departments.id),\n  dofa: date(\"dofa\"), // Date of First Appointment\n  doca: date(\"doca\"), // Date of Current Appointment\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n//Panel Scores\nexport const panelScores = pgTable(\"panel_scores\", {\n  scoreId: serial(\"score_id\").primaryKey(),\n  applicationId: integer(\"application_id\").notNull(),\n  panelId: integer(\"panel_id\").notNull(),\n  academicScore: integer(\"academic_score\").default(0),\n  experienceScore: integer(\"experience_score\").default(0),\n  skillsScore: integer(\"skills_score\").default(0),\n  leadershipScore: integer(\"leadership_score\").default(0),\n  generalScore: integer(\"general_score\").default(0),\n  negativeScore: integer(\"negative_score\").default(0),\n  remarks: text(\"remarks\"),\n  scoredOn: timestamp(\"scored_on\", { withTimezone: false }).defaultNow().notNull(),\n  createAt: timestamp(\"create_at\", { withTimezone: false }).defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: false }).notNull(),\n});\n//Professional Qualifications\nexport const professionalQualifications = pgTable(\"professional_qualifications\", {\n  id: serial(\"id\").primaryKey(),\n  applicantId: integer(\"applicant_id\").notNull(),\n  institution: varchar(\"institution\", { length: 255 }).notNull(),\n  studentNo: varchar(\"student_no\", { length: 100 }),\n  areaOfStudyId: integer(\"area_of_study_id\").notNull(),\n  specialisationId: integer(\"specialisation_id\").notNull(),\n  course: varchar(\"course\", { length: 255 }).notNull(),\n  awardId: integer(\"award_id\").notNull(),\n  gradeId: varchar(\"grade_id\", { length: 10 }).notNull(),\n  examiner: varchar(\"examiner\", { length: 255 }),\n  certificateNo: varchar(\"certificate_no\", { length: 100 }),\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\").notNull(),\n  createdAt: timestamp(\"created_at\", { withTimezone: false })\n    .defaultNow()\n    .notNull(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: false })\n    .defaultNow()\n    .notNull(),\n});\n\n//Short Courses\nexport const shortCourse = pgTable(\"short_course\", {\n  id: serial(\"id\").primaryKey(),\n  institutionName: varchar(\"institution_name\", { length: 255 }).notNull(),\n  applicantId: integer(\"applicant_id\").notNull(),\n  course: varchar(\"course\", { length: 255 }).notNull(),\n  certificateNo: varchar(\"certificate_no\", { length: 100 }),\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\").notNull(),\n  createdAt: timestamp(\"created_at\", { withTimezone: false })\n    .defaultNow()\n    .notNull(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: false })\n    .defaultNow()\n    .notNull(),\n});\n// Employment history\nexport const employmentHistory = pgTable(\"employment_history\", {\n  id: serial(\"id\").primaryKey(),\n  applicantId: integer(\"applicant_id\").notNull().references(() => applicants.id),\n  employer: varchar(\"employer\", { length: 200 }).notNull(),\n  position: varchar(\"position\", { length: 150 }).notNull(),\n  startDate: date(\"start_date\"),\n  endDate: date(\"end_date\"),\n  isCurrent: boolean(\"is_current\").default(false),\n  duties: text(\"duties\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const faq = pgTable(\"faq\", {\n    id: serial(\"id\").primaryKey(),\n    category: varchar(\"category\",{length:150}),\n    question: varchar(\"question\",{length:255}),\n    answer: text(\"answer\"),\n    createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Referees\nexport const referees = pgTable(\"referees\", {\n  id: serial(\"id\").primaryKey(),\n  applicantId: integer(\"applicant_id\").notNull().references(() => applicants.id),\n  name: varchar(\"name\", { length: 150 }).notNull(),\n  position: varchar(\"position\", { length: 150 }),\n  organization: varchar(\"organization\", { length: 200 }),\n  email: varchar(\"email\", { length: 100 }),\n  phoneNumber: varchar(\"phone_number\", { length: 20 }),\n  relationship: varchar(\"relationship\", { length: 100 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Document uploads\nexport const documents = pgTable(\"documents\", {\n  id: serial(\"id\").primaryKey(),\n  applicantId: integer(\"applicant_id\").notNull().references(() => applicants.id),\n  type: varchar(\"type\", { length: 50 }).notNull(), // 'id', 'certificate', 'transcript', etc.\n  fileName: varchar(\"file_name\", { length: 255 }).notNull(),\n  filePath: varchar(\"file_path\", { length: 500 }).notNull(),\n  fileSize: integer(\"file_size\"),\n  mimeType: varchar(\"mime_type\", { length: 100 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Notices\nexport const notices = pgTable(\"notices\", {\n  id: serial(\"id\").primaryKey(),\n  title: varchar(\"title\", { length: 250 }).notNull(),\n  content: text(\"content\").notNull(),\n  type: varchar(\"type\", { length: 50 }).default(\"general\"), // 'announcement', 'update', 'general'\n  isPublished: boolean(\"is_published\").default(false),\n  publishedAt: timestamp(\"published_at\"),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Gallery items for photos and events\nexport const galleryItems = pgTable(\"gallery_items\", {\n  id: serial(\"id\").primaryKey(),\n  title: varchar(\"title\", { length: 250 }).notNull(),\n  description: text(\"description\"),\n  category: varchar(\"category\", { length: 100 }).notNull(),\n  imageUrl: varchar(\"image_url\", { length: 500 }),\n  eventDate: date(\"event_date\"),\n  isPublished: boolean(\"is_published\").default(true),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// System configuration for admin customizable content\nexport const systemConfig = pgTable(\"system_config\", {\n  id: serial(\"id\").primaryKey(),\n  key: varchar(\"key\", { length: 100 }).notNull().unique(),\n  value: text(\"value\"),\n  section: varchar(\"section\", { length: 50 }).notNull(), // 'about', 'contact', 'general', etc.\n  dataType: varchar(\"data_type\", { length: 20 }).default(\"text\"), // 'text', 'html', 'json', 'number'\n  isPublic: boolean(\"is_public\").default(false),\n  updatedBy: varchar(\"updated_by\").references(() => users.id),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Board members for the about page leadership carousel\nexport const boardMembers = pgTable(\"board_members\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 150 }).notNull(),\n  position: varchar(\"position\", { length: 150 }).notNull(),\n  bio: text(\"bio\"),\n  photoUrl: varchar(\"photo_url\", { length: 500 }),\n  order: integer(\"display_order\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Notice subscriptions for email notifications\nexport const noticeSubscriptions = pgTable(\"notice_subscriptions\", {\n  id: serial(\"id\").primaryKey(),\n  email: varchar(\"email\", { length: 255 }).notNull().unique(),\n  isActive: boolean(\"is_active\").default(true),\n  subscriptionToken: varchar(\"subscription_token\", { length: 100 }).notNull().unique(),\n  notificationTypes: varchar(\"notification_types\", { length: 500 }).default(\"all\"), // JSON array: [\"announcement\", \"interview\", \"urgent\"] or \"all\"\n  subscribedAt: timestamp(\"subscribed_at\").defaultNow(),\n  lastNotifiedAt: timestamp(\"last_notified_at\"),\n  unsubscribedAt: timestamp(\"unsubscribed_at\"),\n});\n\n// Admin notifications for system alerts\nexport const notifications = pgTable(\"notifications\", {\n  id: serial(\"id\").primaryKey(),\n  title: varchar(\"title\", { length: 250 }).notNull(),\n  message: text(\"message\").notNull(),\n  type: varchar(\"type\", { length: 50 }).notNull(), // 'email', 'sms', 'system'\n  targetAudience: varchar(\"target_audience\", { length: 50 }).notNull(), // 'all', 'applicants', 'admins', 'board'\n  priority: varchar(\"priority\", { length: 20 }).default(\"medium\"), // 'low', 'medium', 'high', 'urgent'\n  scheduledAt: timestamp(\"scheduled_at\"),\n  sentAt: timestamp(\"sent_at\"),\n  status: varchar(\"status\", { length: 20 }).default(\"draft\"), // 'draft', 'scheduled', 'sent', 'failed'\n  // Enhanced tracking fields\n  totalRecipients: integer(\"total_recipients\").default(0),\n  queuedCount: integer(\"queued_count\").default(0),\n  sentCount: integer(\"sent_count\").default(0),\n  deliveredCount: integer(\"delivered_count\").default(0),\n  openedCount: integer(\"opened_count\").default(0),\n  failedCount: integer(\"failed_count\").default(0),\n  filterSnapshot: jsonb(\"filter_snapshot\"), // For audit purposes\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const notificationRecipients = pgTable(\"notification_recipients\", {\n  id: serial(\"id\").primaryKey(),\n  notificationId: integer(\"notification_id\").notNull().references(() => notifications.id, { onDelete: 'cascade' }),\n  userId: varchar(\"user_id\").references(() => users.id),\n  channel: varchar(\"channel\", { length: 20 }).notNull(), // 'email', 'sms', 'in_app'\n  status: varchar(\"status\", { length: 20 }).notNull().default('queued'), // 'queued', 'sending', 'sent', 'delivered', 'opened', 'failed', 'bounced'\n  attempts: integer(\"attempts\").default(0),\n  providerMessageId: varchar(\"provider_message_id\", { length: 255 }),\n  trackingToken: varchar(\"tracking_token\", { length: 64 }).unique(),\n  lastError: text(\"last_error\"),\n  queuedAt: timestamp(\"queued_at\").defaultNow(),\n  sentAt: timestamp(\"sent_at\"),\n  deliveredAt: timestamp(\"delivered_at\"),\n  openedAt: timestamp(\"opened_at\"),\n  readAt: timestamp(\"read_at\"),\n  metadata: jsonb(\"metadata\"),\n}, (table) => ({\n  notificationIdIdx: index(\"notification_recipients_notification_id_idx\").on(table.notificationId),\n  statusIdx: index(\"notification_recipients_status_idx\").on(table.status),\n  channelStatusIdx: index(\"notification_recipients_channel_status_idx\").on(table.channel, table.status),\n  trackingTokenIdx: uniqueIndex(\"notification_recipients_tracking_token_idx\").on(table.trackingToken),\n}));\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  applicant: one(applicants, {\n    fields: [users.id],\n    references: [applicants.userId],\n  }),\n  createdJobs: many(jobs),\n  createdNotices: many(notices),\n  createdGalleryItems: many(galleryItems),\n  notificationRecipients: many(notificationRecipients),\n}));\n\nexport const notificationsRelations = relations(notifications, ({ one, many }) => ({\n  createdBy: one(users, {\n    fields: [notifications.createdBy],\n    references: [users.id],\n  }),\n  recipients: many(notificationRecipients),\n}));\n\nexport const notificationRecipientsRelations = relations(notificationRecipients, ({ one }) => ({\n  notification: one(notifications, {\n    fields: [notificationRecipients.notificationId],\n    references: [notifications.id],\n  }),\n  user: one(users, {\n    fields: [notificationRecipients.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const applicantsRelations = relations(applicants, ({ one, many }) => ({\n  user: one(users, {\n    fields: [applicants.userId],\n    references: [users.id],\n  }),\n  county: one(counties, {\n    fields: [applicants.countyId],\n    references: [counties.id],\n  }),\n  constituency: one(constituencies, {\n    fields: [applicants.constituencyId],\n    references: [constituencies.id],\n  }),\n  ward: one(wards, {\n    fields: [applicants.wardId],\n    references: [wards.id],\n  }),\n  profession: one(professions, {\n    fields: [applicants.professionId],\n    references: [professions.id],\n  }),\n  employee: one(employees, {\n    fields: [applicants.id],\n    references: [employees.applicantId],\n  }),\n  applications: many(applications),\n  educationRecords: many(educationRecords),\n  employmentHistory: many(employmentHistory),\n  referees: many(referees),\n  documents: many(documents),\n}));\n\nexport const employeesRelations = relations(employees, ({ one }) => ({\n  applicant: one(applicants, {\n    fields: [employees.applicantId],\n    references: [applicants.id],\n  }),\n  department: one(departments, {\n    fields: [employees.departmentId],\n    references: [departments.id],\n  }),\n}));\n\nexport const countiesRelations = relations(counties, ({ many }) => ({\n  constituencies: many(constituencies),\n  applicants: many(applicants),\n}));\n\nexport const constituenciesRelations = relations(constituencies, ({ one, many }) => ({\n  county: one(counties, {\n    fields: [constituencies.countyId],\n    references: [counties.id],\n  }),\n  wards: many(wards),\n  applicants: many(applicants),\n}));\n\nexport const wardsRelations = relations(wards, ({ one, many }) => ({\n  constituency: one(constituencies, {\n    fields: [wards.constituencyId],\n    references: [constituencies.id],\n  }),\n  applicants: many(applicants),\n}));\n\nexport const jobsRelations = relations(jobs, ({ one, many }) => ({\n  department: one(departments, {\n    fields: [jobs.departmentId],\n    references: [departments.id],\n  }),\n  createdBy: one(users, {\n    fields: [jobs.createdBy],\n    references: [users.id],\n  }),\n  applications: many(applications),\n}));\n\nexport const applicationsRelations = relations(applications, ({ one }) => ({\n  job: one(jobs, {\n    fields: [applications.jobId],\n    references: [jobs.id],\n  }),\n  applicant: one(applicants, {\n    fields: [applications.applicantId],\n    references: [applicants.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertEmployeeSchema = createInsertSchema(employees).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertApplicantSchema = createInsertSchema(applicants).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  phoneVerifiedAt:true,\n});\n\nexport const insertJobSchema = createInsertSchema(jobs).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertApplicationSchema = createInsertSchema(applications).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertNoticeSchema = createInsertSchema(notices).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertNotificationRecipientSchema = createInsertSchema(notificationRecipients).omit({\n  id: true,\n  queuedAt: true,\n});\n\n// OTP verification table\nexport const otpVerification = pgTable(\"otp_verification\", {\n  id: serial(\"id\").primaryKey(),\n  phoneNumber: varchar(\"phone_number\", { length: 20 }).notNull(),\n  otp: varchar(\"otp\", { length: 6 }).notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  verified: boolean(\"verified\").default(false),\n  attempts: integer(\"attempts\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas for OTP\nexport const insertOtpSchema = createInsertSchema(otpVerification).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type OtpVerification = typeof otpVerification.$inferSelect;\nexport type User = typeof users.$inferSelect;\nexport type Applicant = typeof applicants.$inferSelect;\nexport type Job = typeof jobs.$inferSelect;\nexport type Application = typeof applications.$inferSelect;\nexport type Notice = typeof notices.$inferSelect;\nexport type Notification = typeof notifications.$inferSelect;\nexport type County = typeof counties.$inferSelect;\nexport type Constituency = typeof constituencies.$inferSelect;\nexport type Ward = typeof wards.$inferSelect;\nexport type Department = typeof departments.$inferSelect;\nexport type Designation = typeof designations.$inferSelect;\nexport type Award = typeof awards.$inferSelect;\nexport type Specialization = typeof specializations.$inferSelect;\nexport type CourseOffered = typeof coursesOffered.$inferSelect;\nexport type EducationRecord = typeof educationRecords.$inferSelect;\nexport type EmploymentHistory = typeof employmentHistory.$inferSelect;\nexport type Referee = typeof referees.$inferSelect;\nexport type Document = typeof documents.$inferSelect;\nexport type StudyArea = typeof studyArea.$inferSelect;\nexport type Jg = typeof JG.$inferSelect;\nexport type Religion = typeof religion.$inferSelect;\nexport type Payroll = typeof payroll.$inferSelect;\nexport type PanelScores = typeof panelScores.$inferSelect;\nexport type ProfessionalQualification = typeof professionalQualifications.$inferSelect;\nexport type Employee = typeof employees.$inferSelect;\nexport type InsertEmployee = typeof employees.$inferInsert;\nexport type InsertNotification = typeof notifications.$inferInsert;\nexport type NotificationRecipient = typeof notificationRecipients.$inferSelect;\nexport type InsertNotificationRecipient = z.infer<typeof insertNotificationRecipientSchema>;\nexport type Institution = typeof institutions.$inferSelect;\nexport type CertificateLevel = typeof certificateLevel.$inferSelect;\nexport type ShortCourse = typeof shortCourse.$inferSelect;\nexport type Faq = typeof faq.$inferSelect;\nexport type GalleryItem = typeof galleryItems.$inferSelect;\nexport type SystemConfig = typeof systemConfig.$inferSelect;\nexport type BoardMember = typeof boardMembers.$inferSelect;\nexport type Ethnicity = typeof ethnicity.$inferInsert;\n\n// Insert schemas for forms\nexport const insertGalleryItem = createInsertSchema(galleryItems).omit({ id: true, createdAt: true, updatedAt: true });\nexport type InsertGalleryItem = z.infer<typeof insertGalleryItem>;\n\nexport const insertSystemConfig = createInsertSchema(systemConfig).omit({ id: true, updatedAt: true });\nexport type InsertSystemConfig = z.infer<typeof insertSystemConfig>;\n\nexport const insertBoardMember = createInsertSchema(boardMembers).omit({ id: true, createdAt: true, updatedAt: true });\nexport type InsertBoardMember = z.infer<typeof insertBoardMember>;\n\nexport const insertNoticeSubscription = createInsertSchema(noticeSubscriptions).omit({ id: true, subscribedAt: true });\nexport type InsertNoticeSubscription = z.infer<typeof insertNoticeSubscription>;\nexport type NoticeSubscription = typeof noticeSubscriptions.$inferSelect;","size_bytes":28532},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\n\n// Public pages\nimport Home from \"@/pages/Home\";\nimport About from \"@/pages/About\";\nimport Gallery from \"@/pages/Gallery\";\nimport FAQs from \"@/pages/FAQs\";\nimport Notices from \"@/pages/Notices\";\nimport Jobs from \"@/pages/Jobs\";\n// Applicant pages\nimport ApplicantDashboard from \"@/pages/applicant/Dashboard\";\nimport ApplicantProfile from \"@/pages/applicant/Profile\";\nimport ApplicantApplications from \"@/pages/applicant/Applications\";\nimport ApplicantDocuments from \"@/pages/applicant/Documents\";\n\n// Admin pages\nimport AdminDashboard from \"@/pages/admin/Dashboard\";\nimport AdminJobManagement from \"@/pages/admin/JobManagement\";\nimport AdminApplications from \"@/pages/admin/Applications\";\nimport AdminReports from \"@/pages/admin/Reports\";\nimport AdminNotifications from \"@/pages/admin/Notifications\";\nimport AdminSettings from \"@/pages/admin/Settings\";\n\n// Board pages\nimport BoardDashboard from \"@/pages/board/Dashboard\";\nimport BoardShortlisting from \"@/pages/board/Shortlisting\";\nimport BoardInterviews from \"@/pages/board/Interviews\";\nimport { useEffect } from \"react\";\n\nfunction Router() {\n  useEffect(() => {\n      document.title = \"County Website\";\n      <link rel=\"icon\" type=\"image/svg+xml\" href=\"/uploads/myICON.ico\" />\n    }, []);\n  return (\n    <Switch>\n      {/* Public routes */}\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/gallery\" component={Gallery} />\n      <Route path=\"/faqs\" component={FAQs} />\n      <Route path=\"/notices\" component={Notices} />\n      <Route path=\"/jobs\" component={Jobs} />\n\n      {/* Applicant routes */}\n      <ProtectedRoute path=\"/dashboard\" component={ApplicantDashboard} allowedRoles={[\"applicant\"]} />\n      <ProtectedRoute path=\"/profile\" component={ApplicantProfile} allowedRoles={[\"applicant\"]} />\n      <ProtectedRoute path=\"/applications\" component={ApplicantApplications} allowedRoles={[\"applicant\"]} />\n      <ProtectedRoute path=\"/documents\" component={ApplicantDocuments} allowedRoles={[\"applicant\"]} />\n\n      {/* Admin routes */}\n      <ProtectedRoute path=\"/admin\" component={AdminDashboard} allowedRoles={[\"admin\"]} />\n      <ProtectedRoute path=\"/admin/jobs\" component={AdminJobManagement} allowedRoles={[\"admin\"]} />\n      <ProtectedRoute path=\"/admin/applications\" component={AdminApplications} allowedRoles={[\"admin\"]} />\n      <ProtectedRoute path=\"/admin/reports\" component={AdminReports} allowedRoles={[\"admin\"]} />\n      <ProtectedRoute path=\"/admin/notifications\" component={AdminNotifications} allowedRoles={[\"admin\"]} />\n      <ProtectedRoute path=\"/admin/settings\" component={AdminSettings} allowedRoles={[\"admin\"]} />\n\n      {/* Board routes */}\n      <ProtectedRoute path=\"/board\" component={BoardDashboard} allowedRoles={[\"board\"]} />\n      <ProtectedRoute path=\"/board/shortlisting\" component={BoardShortlisting} allowedRoles={[\"board\"]} />\n      <ProtectedRoute path=\"/board/interviews\" component={BoardInterviews} allowedRoles={[\"board\"]} />\n\n      {/* Fallback */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3652},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(213, 94%, 68%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(142, 71%, 45%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --accent: hsl(0, 84%, 60%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(213, 94%, 68%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(142, 71%, 45%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --accent: hsl(0, 84%, 60%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Additional custom styles for the job portal */\n.line-clamp-2 {\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.line-clamp-3 {\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  @apply bg-gray-100;\n}\n\n::-webkit-scrollbar-thumb {\n  @apply bg-gray-300 rounded-full;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  @apply bg-gray-400;\n}\n\n/* Animation for drawer */\n.drawer-enter {\n  transform: translateX(100%);\n}\n\n.drawer-enter-active {\n  transform: translateX(0);\n  transition: transform 300ms ease-out;\n}\n\n.drawer-exit {\n  transform: translateX(0);\n}\n\n.drawer-exit-active {\n  transform: translateX(100%);\n  transition: transform 300ms ease-out;\n}\n\n/* Loading states */\n.loading-shimmer {\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n  background-size: 200% 100%;\n  animation: shimmer 1.5s infinite;\n}\n\n@keyframes shimmer {\n  0% {\n    background-position: -200% 0;\n  }\n  100% {\n    background-position: 200% 0;\n  }\n}\n\n/* Print styles */\n@media print {\n  .no-print {\n    display: none;\n  }\n  \n  body {\n    -webkit-print-color-adjust: exact;\n    print-color-adjust: exact;\n  }\n}\n","size_bytes":2976},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/LoginButtons.tsx":{"content":"// components/LoginButtons.tsx\nimport { useEffect } from \"react\";\n\nexport default function LoginButtons() {\n  useEffect(() => {\n    fetch(\"/api/me\")\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.email) {\n          useAuth.getState().setAuth(data);\n        }\n      })\n      .catch(() => {});\n  }, []);\n\n  return (\n    <div className=\"space-x-4\">\n      <a href=\"/api/google/login\" className=\"btn-primary\">Login with Google</a>\n      <a href=\"/api/facebook/login\" className=\"btn-secondary\">Login with Facebook</a>\n    </div>\n  );\n}\n","size_bytes":557},"client/src/components/LogoutButton.tsx":{"content":"// components/LogoutButton.tsx\nimport { useAuth } from \"@/store/auth\";\n\nexport default function LogoutButton() {\n  const logout = useAuth((s) => s.logout);\n\n  return (\n    <button\n      onClick={() => {\n        fetch(\"/api/logout\").then(() => logout());\n      }}\n      className=\"btn-danger\"\n    >\n      Logout\n    </button>\n  );\n}\n","size_bytes":332},"client/src/components/ProtectedRoute.tsx":{"content":"// src/components/ProtectedRoute.tsx\nimport { Route } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport React from \"react\";\n\ninterface ProtectedRouteProps {\n  path: string;\n  component: React.ComponentType;\n  allowedRoles: string[];\n}\n\nexport const ProtectedRoute: React.FC<ProtectedRouteProps> = ({\n  path,\n  component: Component,\n  allowedRoles,\n}) => {\n  const { user } = useAuth();\n\n  if (!user || !allowedRoles.includes(user.role)) {\n    return <Route path={path} component={NotFound} />;\n  }\n\n  return <Route path={path} component={() => <Component />} />;\n};\n","size_bytes":623},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { getQueryFn, apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n  const [location, setLocation] = useLocation();\n\n  const { data, isLoading, error, refetch } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    refetchOnWindowFocus: false,\n    refetchOnMount: true,\n    staleTime: 5 * 60 * 1000,\n  });\n\n  const logout = async () => {\n    try {\n      await apiRequest(\"POST\", \"/api/auth/logout\");\n    } finally {\n      queryClient.clear();\n      setLocation(\"/\");\n    }\n  };\n\n  return {\n    user: data?.user ?? null,\n    redirectUrl: data?.redirectUrl,\n    isAuthenticated: !!data?.user,\n    isLoading,\n    error,\n    logout,\n    refetchUser: refetch,\n  };\n}\n","size_bytes":873},"client/src/hooks/usePublicConfig.ts":{"content":"// client/src/hooks/usePublicConfig.ts\nimport { useQuery } from '@tanstack/react-query';\ntype StudyAreas = {\n  id: number | string;\n  name: string;\n\n}\ntype Specialization = {\n  id: number | string;\n  name: string;\n  studyArea: number | string;\n}\ntype Institution = {\n  id: number | string;\n  name: string;\n};\ntype Designation = {\n  id: number | string;\n  name: string;\n}\ntype Awards = {\n  id: number | string;\n  name: string;\n};\ntype CertificateLevel = {\n  id: number | string;\n  name: string;\n};\ntype Jg = {\n  id: number;\n  name: string;\n}\ntype Department = {\n  id: number | string;\n  name: string;\n};\ntype Jobs = {\n  id: number | string;\n  title: string;\n  description: string;\n  jg: string;\n  departmentId: number;\n  designationId: number;\n  location: string;\n  requirements: string;\n  responsibilities: string;\n  employmentType: string;\n  experienceLevel: string;\n  salaryRange: string;\n  postedDate: string;\n}\ntype Applications = {\n  id: number;\n  jobId: number;\n  applicantId: number;\n  status: string;\n  submittedOn: string;\n  remarks: string;\n  interviewDate: string;\n}\ntype County = {\n  id: number | string;\n  name: string;\n}\ntype Courses = {\n  id: number,\n  name: string,\n  specializationId: number,\n  awardId: number,\n}\ntype PublicConfig = {\n  institutions: Institution[];\n  awards: Awards[];\n  courses: Courses[];\n  jg: Jg[];\n  ethnicity: any[];\n  certificateLevels: CertificateLevel[];\n  jobs: Jobs[];\n  departments: Department[];\n  designations: Designation[];\n  applications: Applications[];\n  counties: County[];\n  studyAreas: StudyAreas[];\n  specializations: Specialization[];\n  professionalQualification: any[];\n  jobGroups: Jg[];\n  notices: any[];\n  faqs: any[];\n  wards: any[],\n  constituencie: any[],\n  admins: any[],\n  userData:any[],\n  \n};\n\nexport const usePublicConfig = () => {\n  return useQuery<PublicConfig>({\n    queryKey: ['/api/public/config'],\n    queryFn: async () => {\n      const res = await fetch('/api/public/config');\n      if (!res.ok) throw new Error('Failed to fetch config');\n      return res.json();\n    },\n  });\n};\n","size_bytes":2058},"client/src/lib/africastalking-sms.ts":{"content":"/**\n * Africa's Talking SMS Utility (TypeScript)\n * ----------------------------------------\n * Lightweight wrapper around africastalking SDK with:\n *  - Simple sendSms API\n *  - OTP generation, storage, verification (pluggable store)\n *  - Phone normalization helpers (E.164, KE defaults)\n *  - Idempotency guard + basic rate limiting hooks\n *  - Sandbox support\n *\n * Usage:\n *   import { smsClient, sendSms, sendOtp, verifyOtp } from \"./africastalking-sms\";\n *\n *   await sendSms({ to: \"+2547XXXXXXXX\", message: \"Hello\" });\n *   const code = await sendOtp({ to: \"+2547XXXXXXXX\" });\n *   const ok = await verifyOtp({ to: \"+2547XXXXXXXX\", otp: \"123456\" });\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n// If your project uses ESM, keep the import; for CJS/ESM-agnostic, use dynamic require.\n// Africa's Talking SDK has mixed typings; this pattern works in both build targets.\nimport africastalking from 'africastalking'\nconst createAT = (cfg: { apiKey: string; username: string }) => {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  // const africastalking = require(\"africastalking\");\n  return africastalking(cfg);\n};\n\nexport type Environment = \"production\" | \"sandbox\";\n\nexport interface AfricasTalkingConfig {\n  /** Africa's Talking username (eg. \"sandbox\" for testing) */\n  username: string;\n  /** Africa's Talking API key */\n  apiKey: string;\n  /** Optional sender ID/short code registered on AT */\n  from?: string;\n  /** Default country code for local numbers (eg. \"+254\") */\n  defaultCountryCode?: string;\n  /** Use sandbox? If username === \"sandbox\" this is implied */\n  environment?: Environment;\n  /** Min seconds between OTP sends to the same number */\n  otpSendCooldownSec?: number;\n  /** OTP TTL in seconds */\n  otpTtlSec?: number;\n}\n\nexport interface SendSmsInput {\n  to: string | string[];\n  message: string;\n  from?: string;\n}\n\nexport interface SendOtpInput {\n  to: string;\n  /** fixed length OTP; default 6 */\n  length?: number;\n  /** custom message template; use {{CODE}} placeholder */\n  template?: string;\n}\n\nexport interface VerifyOtpInput {\n  to: string;\n  otp: string;\n}\n\nexport interface OtpRecord {\n  code: string;\n  expiresAt: number; // epoch ms\n  lastSentAt: number; // epoch ms\n}\n\nexport interface OtpStore {\n  get(to: string): Promise<OtpRecord | null> | OtpRecord | null;\n  set(to: string, rec: OtpRecord): Promise<void> | void;\n  delete(to: string): Promise<void> | void;\n}\n\n/** In-memory fallback store (use Redis/DB in production). */\nexport class MemoryOtpStore implements OtpStore {\n  private map = new Map<string, OtpRecord>();\n  get(to: string): OtpRecord | null {\n    return this.map.get(to) ?? null;\n  }\n  set(to: string, rec: OtpRecord): void {\n    this.map.set(to, rec);\n  }\n  delete(to: string): void {\n    this.map.delete(to);\n  }\n}\n\n/** Phone helpers */\nexport const normalizePhone = (raw: string, defaultCountry = \"+254\"): string => {\n  let p = raw.trim();\n  // Remove spaces, hyphens\n  p = p.replace(/[\\s-]+/g, \"\");\n  // If it already starts with +, assume E.164\n  if (p.startsWith(\"+\")) return p;\n  // 07XXXXXXXX -> +2547XXXXXXXX\n  if (/^0\\d{9}$/.test(p) && defaultCountry === \"+254\") {\n    return \"+254\" + p.slice(1);\n  }\n  // 7XXXXXXXX -> +2547XXXXXXXX\n  if (/^7\\d{8}$/.test(p) && defaultCountry === \"+254\") {\n    return \"+254\" + p;\n  }\n  // Fallback: prepend default country code if not present\n  if (!p.startsWith(\"+\")) return defaultCountry + p;\n  return p;\n};\n\n/** Random numeric OTP */\nexport const generateOtp = (len = 6): string => {\n  const min = Math.pow(10, len - 1);\n  const max = Math.pow(10, len) - 1;\n  return String(Math.floor(Math.random() * (max - min + 1)) + min);\n};\n\nexport class AfricasTalkingSMS {\n  private cfg: Required<AfricasTalkingConfig>;\n  private sms: any;\n  private store: OtpStore;\n\n  constructor(cfg: AfricasTalkingConfig, store: OtpStore = new MemoryOtpStore()) {\n    const merged: Required<AfricasTalkingConfig> = {\n      from: cfg.from ?? undefined,\n      defaultCountryCode: cfg.defaultCountryCode ?? \"+254\",\n      environment: cfg.environment ?? (cfg.username === \"sandbox\" ? \"sandbox\" : \"production\"),\n      otpSendCooldownSec: cfg.otpSendCooldownSec ?? 45,\n      otpTtlSec: cfg.otpTtlSec ?? 10 * 60,\n      username: cfg.username,\n      apiKey: cfg.apiKey,\n    } as Required<AfricasTalkingConfig>;\n\n    this.cfg = merged;\n    this.store = store;\n\n    const at = createAT({ apiKey: this.cfg.apiKey, username: this.cfg.username });\n    this.sms = at.SMS;\n  }\n\n  /** low-level send */\n  async sendSms({ to, message, from }: SendSmsInput): Promise<any> {\n    const recipients = Array.isArray(to) ? to : [to];\n    const normalized = recipients.map((r) => normalizePhone(r, this.cfg.defaultCountryCode));\n\n    const payload: any = {\n      to: normalized,\n      message,\n    };\n    if (from || this.cfg.from) payload.from = from ?? this.cfg.from;\n\n    // Africa's Talking SDK returns an object with \"SMSMessageData\"\n    const res = await this.sms.send(payload);\n    return res;\n  }\n\n  /** high-level OTP send; stores code & cooldown */\n  async sendOtp({ to, length = 6, template }: SendOtpInput): Promise<{ code: string; to: string; expiresAt: number }> {\n    const phone = normalizePhone(to, this.cfg.defaultCountryCode);\n\n    const now = Date.now();\n    const existing = await this.store.get(phone);\n    if (existing && now - existing.lastSentAt < this.cfg.otpSendCooldownSec * 1000) {\n      // Respect cooldown but re-use the same code (avoid flooding)\n      const ttlLeft = Math.max(0, existing.expiresAt - now);\n      return { code: existing.code, to: phone, expiresAt: existing.expiresAt };\n    }\n\n    const code = generateOtp(length);\n    const expiresAt = now + this.cfg.otpTtlSec * 1000;\n\n    const message = (template ?? \"Your verification code is {{CODE}}. It expires in 10 minutes.\")\n      .replace(\"{{CODE}}\", code);\n\n    await this.sendSms({ to: phone, message });\n\n    await this.store.set(phone, { code, expiresAt, lastSentAt: now });\n\n    return { code, to: phone, expiresAt };\n  }\n\n  /** verify and consume OTP */\n  async verifyOtp({ to, otp }: VerifyOtpInput): Promise<boolean> {\n    const phone = normalizePhone(to, this.cfg.defaultCountryCode);\n    const rec = await this.store.get(phone);\n    if (!rec) return false;\n    const now = Date.now();\n    const ok = rec.code === otp && now <= rec.expiresAt;\n    if (ok) await this.store.delete(phone);\n    return ok;\n  }\n}\n\n// ---- Singleton & convenience exports ------------------------------------\n\n// Pull from env by default\nconst AT_USERNAME = process.env.AT_USERNAME || process.env.AFRICASTALKING_USERNAME || \"sandbox\";\nconst AT_API_KEY = process.env.AT_API_KEY || process.env.AFRICASTALKING_API_KEY || \"\";\nconst AT_FROM = process.env.AT_FROM || process.env.AFRICASTALKING_FROM;\nconst AT_DEFAULT_CC = process.env.AT_DEFAULT_CC || \"+254\";\n\nexport const smsClient = new AfricasTalkingSMS({\n  username: AT_USERNAME,\n  apiKey: AT_API_KEY,\n  from: AT_FROM,\n  defaultCountryCode: AT_DEFAULT_CC,\n});\n\nexport const sendSms = (input: SendSmsInput) => smsClient.sendSms(input);\nexport const sendOtp = (input: SendOtpInput) => smsClient.sendOtp(input);\nexport const verifyOtp = (input: VerifyOtpInput) => smsClient.verifyOtp(input);\n\n// ---- Express route helpers (optional) ------------------------------------\n// You can plug these into your existing routes.ts\n\nimport type { Request, Response } from \"express\";\n\nexport const sendOtpHandler = async (req: Request, res: Response) => {\n  try {\n    const { phoneNumber } = req.body as { phoneNumber?: string };\n    if (!phoneNumber) return res.status(400).json({ message: \"phoneNumber is required\" });\n\n    const { to, expiresAt } = await sendOtp({ to: phoneNumber });\n    return res.json({ success: true, to, expiresAt });\n  } catch (err: any) {\n    console.error(\"sendOtp error\", err);\n    return res.status(500).json({ message: err?.message || \"Failed to send OTP\" });\n  }\n};\n\nexport const verifyOtpHandler = async (req: Request, res: Response) => {\n  try {\n    const { phoneNumber, otp } = req.body as { phoneNumber?: string; otp?: string };\n    if (!phoneNumber || !otp) return res.status(400).json({ message: \"phoneNumber and otp are required\" });\n\n    const ok = await verifyOtp({ to: phoneNumber, otp });\n    if (!ok) return res.status(400).json({ message: \"Invalid or expired code\" });\n\n    return res.json({ success: true });\n  } catch (err: any) {\n    console.error(\"verifyOtp error\", err);\n    return res.status(500).json({ message: err?.message || \"Failed to verify OTP\" });\n  }\n};\n","size_bytes":8526},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequests(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n  await throwIfResNotOk(res);\n  return res.json();\n}\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown\n): Promise<Response> {\n  let headers: HeadersInit = {};\n  let body: BodyInit | undefined;\n\n  if (data instanceof FormData) {\n    body = data;\n  } else if (data !== undefined) {\n    headers[\"Content-Type\"] = \"application/json\";\n    body = JSON.stringify(data);\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body,\n    credentials: \"include\",\n  });\n  if (!res.ok) {\n    let errorMessage = \"Request failed\";\n    try {\n      const body = await res.json();\n      errorMessage = body.error || body.message || res.statusText;\n    } catch {\n      // fallback if response isn't JSON\n      errorMessage = res.statusText;\n    }\n    throw new Error(errorMessage);\n  }\n\n  await throwIfResNotOk(res);\n  return res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2204},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\nimport type { ChangeEvent } from \"react\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n/**\n * Capitalizes the first letter of each word in a string\n * Handles multiple words separated by spaces, hyphens, or apostrophes\n * Correctly formats names like \"O'Neill\", \"Mary-Jane\", \"De La Cruz\"\n */\nexport function capitalizeWords(str: string): string {\n  if (!str) return str;\n  \n  return str\n    .toLowerCase()\n    .replace(/(^|[\\s-'])(\\w)/g, (match, separator, letter) => separator + letter.toUpperCase());\n}\n\n/**\n * Creates a capitalization handler for input fields that integrates with React Hook Form\n * Returns an onChange handler that capitalizes text and properly updates form state\n */\nexport function createCapitalizeHandler(setValue: (value: string) => void) {\n  return (e: ChangeEvent<HTMLInputElement>) => {\n    const capitalizedValue = capitalizeWords(e.target.value);\n    setValue(capitalizedValue);\n  };\n}\n","size_bytes":1037},"client/src/pages/About.tsx":{"content":"import Navigation from '@/components/layout/Navigation';\nimport BoardLeadershipCarousel from '@/components/about/BoardLeadershipCarousel';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Building, Users, Target, Award, Shield, Heart } from 'lucide-react';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { useMemo } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { AlertCircle, RefreshCw } from 'lucide-react';\n\nexport default function About() {\n  const queryClient = useQueryClient();\n  \n  const { data: aboutConfig = {}, isLoading: aboutLoading, isError: aboutError, refetch: refetchAbout } = useQuery<Record<string, any>>({\n    queryKey: ['/api/public/system-config?section=about'],\n  });\n  \n  const { data: contactConfig = {}, isError: contactError, refetch: refetchContact } = useQuery<Record<string, any>>({\n    queryKey: ['/api/public/system-config?section=contact'],\n  });\n  \n  const isLoading = aboutLoading;\n  const isError = aboutError || contactError;\n  \n  // Default values for configuration\n  const config = useMemo(() => ({\n    heroTitle: aboutConfig.heroTitle || 'About Trans Nzoia County Public Service Board',\n    heroDescription: aboutConfig.heroDescription || 'Committed to building a professional, efficient, and responsive public service that serves the people of Trans Nzoia County with excellence.',\n    mission: aboutConfig.mission || 'To provide strategic human resource management services that promote good governance, integrity, and service delivery in Trans Nzoia County.',\n    vision: aboutConfig.vision || 'To be a leading public service board that attracts, develops, and retains competent human resources for effective service delivery.',\n    values: (() => {\n      if (!aboutConfig.values) return ['Integrity', 'Professionalism', 'Transparency', 'Accountability', 'Innovation'];\n      if (Array.isArray(aboutConfig.values)) return aboutConfig.values;\n      if (typeof aboutConfig.values === 'string') return aboutConfig.values.split(',').map((v: string) => v.trim());\n      return ['Integrity', 'Professionalism', 'Transparency', 'Accountability', 'Innovation'];\n    })(),\n    whoWeAre: aboutConfig.whoWeAre || 'The Trans Nzoia County Public Service Board was established under the County Governments Act 2012 to provide human resource management services to the County Government of Trans Nzoia.\\n\\nWe are responsible for recruitment, selection, promotion, discipline, and dismissal of county public officers in accordance with the Constitution of Kenya 2010 and other relevant legislation.\\n\\nOur board consists of experienced professionals committed to ensuring merit-based recruitment and maintaining high standards of public service in Trans Nzoia County.',\n    officeLocation: contactConfig.officeLocation || 'Trans Nzoia County Headquarters\\nP.O. Box 4210-30200\\nKitale, Kenya',\n    contactPhone: contactConfig.contactPhone || '+254 713 635 352',\n    contactEmail: contactConfig.contactEmail || 'info@cpsbtransnzoia.co.ke',\n    contactWebsite: contactConfig.contactWebsite || 'www.cpsbtransnzoia.co.ke',\n    officeHours: contactConfig.officeHours || 'Monday - Friday: 8:00 AM - 5:00 PM\\nSaturday & Sunday: Closed'\n  }), [aboutConfig, contactConfig]);\n  \n  const handleRetry = () => {\n    refetchAbout();\n    refetchContact();\n  };\n\n  if (isError) {\n    return (\n      <div className=\"min-h-screen bg-neutral-50\">\n        <Navigation />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center py-16\">\n            <AlertCircle className=\"w-16 h-16 text-red-500 mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Unable to Load Page</h2>\n            <p className=\"text-gray-600 mb-6\">\n              We're having trouble loading the page content. Please try again.\n            </p>\n            <Button onClick={handleRetry} className=\"flex items-center gap-2\" data-testid=\"button-retry-about\">\n              <RefreshCw className=\"w-4 h-4\" />\n              Try Again\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-neutral-50\">\n        <Navigation />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse space-y-8\">\n            <div className=\"text-center\">\n              <div className=\"h-10 bg-gray-200 rounded mx-auto mb-4 w-3/4\"></div>\n              <div className=\"h-6 bg-gray-200 rounded mx-auto w-1/2\"></div>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              {[...Array(3)].map((_, i) => (\n                <Card key={i}>\n                  <CardContent className=\"p-8\">\n                    <div className=\"w-12 h-12 bg-gray-200 rounded mx-auto mb-4\"></div>\n                    <div className=\"h-6 bg-gray-200 rounded mb-4\"></div>\n                    <div className=\"space-y-2\">\n                      <div className=\"h-4 bg-gray-200 rounded\"></div>\n                      <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      <Navigation />\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\" data-testid=\"text-about-hero-title\">\n            {config.heroTitle}\n          </h1>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\" data-testid=\"text-about-hero-description\">\n            {config.heroDescription}\n          </p>\n        </div>\n\n        {/* Mission, Vision, Values */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-16\">\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <Target className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-4\">Our Mission</h3>\n              <p className=\"text-gray-600\" data-testid=\"text-about-mission\">\n                {config.mission}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <Award className=\"w-12 h-12 text-secondary mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-4\">Our Vision</h3>\n              <p className=\"text-gray-600\" data-testid=\"text-about-vision\">\n                {config.vision}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <Heart className=\"w-12 h-12 text-accent mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-4\">Our Values</h3>\n              <ul className=\"text-gray-600 text-left space-y-2\" data-testid=\"list-about-values\">\n                {config.values.map((value, index) => (\n                  <li key={index}>• {value}</li>\n                ))}\n              </ul>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* About Content */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 mb-16\">\n          <div>\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-6\">Who We Are</h2>\n            <div className=\"space-y-4 text-gray-600\" data-testid=\"text-about-who-we-are\">\n              {config.whoWeAre.split('\\n\\n').map((paragraph, index) => (\n                <p key={index}>{paragraph}</p>\n              ))}\n            </div>\n          </div>\n\n          <div>\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-6\">What We Do</h2>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-start space-x-3\">\n                <Users className=\"w-6 h-6 text-primary mt-1\" />\n                <div>\n                  <h4 className=\"font-semibold text-gray-900\">Recruitment & Selection</h4>\n                  <p className=\"text-gray-600\">\n                    Conduct transparent and merit-based recruitment processes for \n                    county government positions.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-3\">\n                <Shield className=\"w-6 h-6 text-primary mt-1\" />\n                <div>\n                  <h4 className=\"font-semibold text-gray-900\">HR Policy Development</h4>\n                  <p className=\"text-gray-600\">\n                    Develop and implement human resource policies and procedures \n                    for the county government.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-3\">\n                <Building className=\"w-6 h-6 text-primary mt-1\" />\n                <div>\n                  <h4 className=\"font-semibold text-gray-900\">Capacity Building</h4>\n                  <p className=\"text-gray-600\">\n                    Provide training and development opportunities to enhance \n                    employee performance and service delivery.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Board Leadership Carousel */}\n        <div className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold text-gray-900 text-center mb-12\">\n            Board Leadership\n          </h2>\n          <BoardLeadershipCarousel />\n        </div>\n\n        {/* Contact Information */}\n        <Card>\n          <CardContent className=\"p-8\">\n            <h2 className=\"text-2xl font-bold text-gray-900 text-center mb-8\">\n              Get in Touch\n            </h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 text-center\">\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-2\">Office Location</h4>\n                <p className=\"text-gray-600\" data-testid=\"text-contact-location\">\n                  {config.officeLocation.split('\\n').map((line, index) => (\n                    <span key={index}>\n                      {line}\n                      {index < config.officeLocation.split('\\n').length - 1 && <br />}\n                    </span>\n                  ))}\n                </p>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-2\">Contact</h4>\n                <p className=\"text-gray-600\" data-testid=\"text-contact-info\">\n                  Phone: {config.contactPhone}<br />\n                  Email: {config.contactEmail}<br />\n                  Website: {config.contactWebsite}\n                </p>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-2\">Office Hours</h4>\n                <p className=\"text-gray-600\" data-testid=\"text-office-hours\">\n                  {config.officeHours.split('\\n').map((line, index) => (\n                    <span key={index}>\n                      {line}\n                      {index < config.officeHours.split('\\n').length - 1 && <br />}\n                    </span>\n                  ))}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11393},"client/src/pages/FAQs.tsx":{"content":"import { useState, useMemo } from 'react';\nimport Navigation from '@/components/layout/Navigation';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from '@/hooks/use-toast';\nimport { Search, MessageCircle, Phone, Mail } from 'lucide-react';\nimport DOMPurify from 'dompurify';\nimport type { Faq } from '@shared/schema';\n\nexport default function FAQs() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n\n  const { data: faqs = [], isLoading } = useQuery({\n    queryKey: ['/api/public/faqs'],\n  }) as { data: Faq[], isLoading: boolean };\n  \n  // Get unique categories from actual FAQ data\n  const categories = useMemo(() => {\n    const uniqueCategories = [...new Set(faqs.map(faq => faq.category).filter(Boolean))];\n    return [\n      { id: 'all', label: 'All Questions', count: faqs.length },\n      ...uniqueCategories.map(category => ({\n        id: category!,\n        label: category!,\n        count: faqs.filter(faq => faq.category === category).length\n      }))\n    ];\n  }, [faqs]);\n  \n  // Sanitize and format FAQ answer\n  const formatAnswer = (answer: string | null | undefined) => {\n    if (!answer) return 'Answer not available.';\n    \n    // Sanitize HTML to prevent XSS attacks\n    return DOMPurify.sanitize(answer.replace(/\\n/g, '<br>'), {\n      ALLOWED_TAGS: ['br', 'p', 'strong', 'em', 'u', 'ol', 'ul', 'li', 'a'],\n      ALLOWED_ATTR: ['href', 'target']\n    });\n  };\n  \n  // Filter FAQs based on search term and selected category\n  const filteredFaqs = useMemo(() => {\n    return faqs.filter(faq => {\n      const matchesSearch = !searchTerm || \n        faq.question?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        faq.answer?.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      const matchesCategory = selectedCategory === 'all' || faq.category === selectedCategory;\n      \n      return matchesSearch && matchesCategory;\n    });\n  }, [faqs, searchTerm, selectedCategory]);\n  if (isLoading) {\n      return (\n        <div className=\"min-h-screen bg-neutral-50\">\n          <Navigation />\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n            <div className=\"animate-pulse space-y-6\">\n              {[...Array(5)].map((_, i) => (\n                <Card key={i}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-gray-200 rounded w-1/4 mb-4\"></div>\n                    <div className=\"h-6 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-full mb-2\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      <Navigation />\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">\n            Frequently Asked Questions\n          </h1>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            Find answers to common questions about the job application process, \n            requirements, and using our recruitment portal.\n          </p>\n        </div>\n\n        {/* Search Bar */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-6\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search for answers...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent\"\n                data-testid=\"input-faq-search\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Category Filter */}\n        <div className=\"flex flex-wrap gap-2 mb-8\">\n          {categories.map((category) => (\n            <Badge\n              key={category.id}\n              variant={selectedCategory === category.id ? 'default' : 'outline'}\n              className=\"cursor-pointer hover:bg-primary hover:text-white transition-colors px-4 py-2\"\n              onClick={() => setSelectedCategory(category.id)}\n              data-testid={`badge-category-${category.id}`}\n            >\n              {category.label} ({category.count})\n            </Badge>\n          ))}\n        </div>\n\n        {/* FAQ Accordion */}\n        <Card className=\"mb-12\">\n          <CardContent className=\"p-6\">\n            {filteredFaqs.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <p className=\"text-gray-600 mb-4\">\n                  {searchTerm || selectedCategory !== 'all' ? 'No FAQs found matching your criteria.' : 'No FAQs available.'}\n                </p>\n                {(searchTerm || selectedCategory !== 'all') && (\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => { setSearchTerm(''); setSelectedCategory('all'); }}\n                    data-testid=\"button-clear-filters\"\n                  >\n                    Clear Filters\n                  </Button>\n                )}\n              </div>\n            ) : (\n              <Accordion type=\"single\" collapsible className=\"space-y-4\">\n                {filteredFaqs.map((faq, index) => {\n                  const itemId = faq.id ?? index;\n                  return (\n                    <AccordionItem key={itemId} value={`item-${itemId}`}>\n                      <AccordionTrigger className=\"text-left hover:text-primary\" data-testid={`accordion-trigger-${itemId}`}>\n                        <div className=\"flex items-start space-x-3\">\n                          {faq.category && (\n                            <Badge \n                              variant=\"outline\" \n                              className=\"mt-1 text-xs flex-shrink-0\"\n                            >\n                              {faq.category}\n                            </Badge>\n                          )}\n                          <span className=\"text-left\">{faq.question}</span>\n                        </div>\n                      </AccordionTrigger>\n                      <AccordionContent className=\"text-gray-600 pt-4\" data-testid={`accordion-content-${itemId}`}>\n                        <div \n                          className=\"prose prose-sm max-w-none\"\n                          dangerouslySetInnerHTML={{\n                            __html: formatAnswer(faq.answer)\n                          }}\n                        />\n                      </AccordionContent>\n                    </AccordionItem>\n                  );\n                })}\n              </Accordion>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Contact Support */}\n        <Card>\n          <CardContent className=\"p-8\">\n            <div className=\"text-center mb-8\">\n              <MessageCircle className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\n                Still Need Help?\n              </h2>\n              <p className=\"text-gray-600 max-w-2xl mx-auto\">\n                Can't find the answer you're looking for? Our support team is here to help you \n                with any questions about the recruitment process or using our portal.\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"text-center\">\n                <Phone className=\"w-8 h-8 text-primary mx-auto mb-3\" />\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Phone Support</h3>\n                <p className=\"text-gray-600 text-sm mb-3\">\n                  Call us during business hours for immediate assistance\n                </p>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => {\n                    navigator.clipboard.writeText('+254 713 635 352');\n                    toast({ title: 'Phone Number Copied', description: 'Phone number copied to clipboard' });\n                  }}\n                  data-testid=\"button-copy-phone\"\n                >\n                   +254 713 635 352\n                </Button>\n              </div>\n\n              <div className=\"text-center\">\n                <Mail className=\"w-8 h-8 text-primary mx-auto mb-3\" />\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Email Support</h3>\n                <p className=\"text-gray-600 text-sm mb-3\">\n                  Send us an email and we'll respond within 24 hours\n                </p>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => {\n                    navigator.clipboard.writeText('support@cpsbtransnzoia.co.ke');\n                    toast({ title: 'Email Copied', description: 'Email address copied to clipboard' });\n                  }}\n                  data-testid=\"button-copy-email\"\n                >\n                  support@cpsbtransnzoia.co.ke\n                </Button>\n              </div>\n\n              <div className=\"text-center\">\n                <MessageCircle className=\"w-8 h-8 text-primary mx-auto mb-3\" />\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Live Chat</h3>\n                <p className=\"text-gray-600 text-sm mb-3\">\n                  Chat with our support team in real-time\n                </p>\n                <Button \n                  size=\"sm\"\n                  onClick={() => toast({ title: 'Live Chat', description: 'Live chat feature coming soon!' })}\n                  data-testid=\"button-live-chat\"\n                >\n                  Start Chat\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"mt-8 p-4 bg-blue-50 rounded-lg\">\n              <h4 className=\"font-semibold text-gray-900 mb-2\">Office Hours</h4>\n              <div className=\"text-sm text-gray-600 space-y-1\">\n                <p>Monday - Friday: 8:00 AM - 5:00 PM</p>\n                <p>Holidays, Saturday and Sunday: Closed</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10865},"client/src/pages/Gallery.tsx":{"content":"import { useState, useMemo } from 'react';\nimport Navigation from '@/components/layout/Navigation';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { useQuery } from '@tanstack/react-query';\nimport type { GalleryItem } from '@shared/schema';\n\nexport default function Gallery() {\n  const [selectedCategory, setSelectedCategory] = useState('All');\n  \n  const { data: galleryItems = [], isLoading } = useQuery({\n    queryKey: ['/api/public/gallery'],\n  }) as { data: GalleryItem[], isLoading: boolean };\n  \n  // Get unique categories from actual gallery data\n  const categories = useMemo(() => {\n    const uniqueCategories = [...new Set(galleryItems.map(item => item.category).filter(Boolean))];\n    return ['All', ...uniqueCategories];\n  }, [galleryItems]);\n  \n  // Filter gallery items by selected category\n  const filteredItems = useMemo(() => {\n    if (selectedCategory === 'All') return galleryItems;\n    return galleryItems.filter(item => item.category === selectedCategory);\n  }, [galleryItems, selectedCategory]);\n  \n  // Calculate statistics from actual data\n  const stats = useMemo(() => {\n    const totalEvents = galleryItems.length;\n    const totalPhotos = galleryItems.length; // Assuming each gallery item has a photo\n    const trainingEvents = galleryItems.filter(item => item.category?.toLowerCase().includes('training')).length;\n    const awardsEvents = galleryItems.filter(item => item.category?.toLowerCase().includes('awards') || item.category?.toLowerCase().includes('event')).length;\n    \n    return {\n      events: totalEvents,\n      photos: totalPhotos,\n      training: trainingEvents,\n      awards: awardsEvents\n    };\n  }, [galleryItems]);\n\n  const getCategoryColor = (category: string) => {\n    const colors = {\n      'meetings': 'bg-blue-100 text-blue-800',\n      'training': 'bg-green-100 text-green-800', \n      'recruitment': 'bg-purple-100 text-purple-800',\n      'events': 'bg-yellow-100 text-yellow-800',\n      'outreach': 'bg-red-100 text-red-800',\n      'awards': 'bg-orange-100 text-orange-800',\n    };\n    \n    const key = category?.toLowerCase();\n    return colors[key as keyof typeof colors] || 'bg-gray-100 text-gray-800';\n  };\n  \n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-neutral-50\">\n        <Navigation />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse space-y-6\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i}>\n                <div className=\"aspect-video bg-gray-200 rounded-t-lg\"></div>\n                <CardContent className=\"p-4\">\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-full mb-2\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      <Navigation />\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">Gallery</h1>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            Explore our activities, events, and milestones through photos and documentation\n            of our commitment to excellence in public service.\n          </p>\n        </div>\n\n        {/* Category Filter */}\n        <div className=\"flex flex-wrap justify-center gap-2 mb-8\">\n          {categories.map((category) => (\n            <Badge\n              key={category}\n              variant={selectedCategory === category ? 'default' : 'outline'}\n              className=\"cursor-pointer hover:bg-primary hover:text-white transition-colors\"\n              onClick={() => setSelectedCategory(category)}\n              data-testid={`badge-gallery-category-${category.toLowerCase()}`}\n            >\n              {category}\n            </Badge>\n          ))}\n        </div>\n\n        {/* Gallery Grid */}\n        {filteredItems.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-2xl\">📸</span>\n              </div>\n              <p className=\"text-gray-600 mb-4\">\n                {selectedCategory === 'All' ? 'No gallery items available.' : `No items found in ${selectedCategory} category.`}\n              </p>\n              {selectedCategory !== 'All' && (\n                <Badge \n                  variant=\"outline\" \n                  className=\"cursor-pointer\"\n                  onClick={() => setSelectedCategory('All')}\n                  data-testid=\"badge-show-all\"\n                >\n                  Show All Items\n                </Badge>\n              )}\n            </div>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredItems.map((item) => (\n              <Card key={item.id} className=\"hover:shadow-lg transition-shadow cursor-pointer\" data-testid={`card-gallery-${item.id}`}>\n                <div className=\"aspect-video bg-gradient-to-br from-primary/20 to-secondary/20 relative overflow-hidden\">\n                  {item.imageUrl ? (\n                    <img \n                      src={item.imageUrl} \n                      alt={item.title || 'Gallery image'}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  ) : (\n                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                      <div className=\"text-center\">\n                        <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-2\">\n                          <span className=\"text-2xl\">📸</span>\n                        </div>\n                        <p className=\"text-sm text-gray-600\">Photo Gallery</p>\n                      </div>\n                    </div>\n                  )}\n                  {item.category && (\n                    <Badge className={`absolute top-2 right-2 ${getCategoryColor(item.category)}`}>\n                      {item.category}\n                    </Badge>\n                  )}\n                </div>\n                <CardContent className=\"p-4\">\n                  <h3 className=\"font-semibold text-gray-900 mb-2\" data-testid={`text-gallery-title-${item.id}`}>\n                    {item.title}\n                  </h3>\n                  <p className=\"text-gray-600 text-sm mb-3 line-clamp-2\">\n                    {item.description || 'No description available.'}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">\n                    {item.eventDate ? new Date(item.eventDate).toLocaleDateString() : 'No date specified'}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Stats Section */}\n        <div className=\"mt-16 grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"stat-events\">\n                {stats.events}\n              </div>\n              <div className=\"text-gray-600\">Events Documented</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-secondary mb-2\" data-testid=\"stat-photos\">\n                {stats.photos}\n              </div>\n              <div className=\"text-gray-600\">Photos Archived</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"stat-training\">\n                {stats.training}\n              </div>\n              <div className=\"text-gray-600\">Training Sessions</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-secondary mb-2\" data-testid=\"stat-awards\">\n                {stats.awards}\n              </div>\n              <div className=\"text-gray-600\">Awards & Events</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Call to Action */}\n        <Card className=\"mt-12\">\n          <CardContent className=\"p-8 text-center\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\n              Share Your Experience\n            </h2>\n            <p className=\"text-gray-600 mb-6 max-w-2xl mx-auto\">\n              Have photos or memories from our events? We'd love to feature them in our gallery.\n              Contact us to share your contributions to our public service community.\n            </p>\n            <div className=\"flex justify-center space-x-4\">\n              <Badge variant=\"outline\" className=\"text-primary\">\n                📧 gallery@cpsbtransnzoia.go.ke \n              </Badge>\n              <Badge variant=\"outline\" className=\"text-primary\">\n                📞  +254 713 635 352\n              </Badge>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9545},"client/src/pages/Home.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport Navigation from '@/components/layout/Navigation';\nimport HeroCarousel from '@/components/home/HeroCarousel';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Building, Search, UserPlus, Calendar, GraduationCap, MapPin } from 'lucide-react';\nimport { datetime } from 'drizzle-orm/mysql-core';\n\nexport default function Home() {\n  const { data: jobs = [] } = useQuery({\n    queryKey: ['/api/public/jobs'],\n  });\n\n  const { data: notices = [] } = useQuery({\n    queryKey: ['/api/public/notices'],\n  });\n\n  const featuredJobs = (jobs as any).slice(0, 3);\n  const recentNotices = (notices as any).slice(0, 2);\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      <Navigation />\n\n      {/* Hero Carousel */}\n      <HeroCarousel />\n\n      {/* Stats Section */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8 text-center\">\n            <div className=\"bg-neutral-50 rounded-xl p-6\">\n              <div className=\"text-3xl font-bold text-primary mb-2\">150+</div>\n              <div className=\"text-gray-600\">Active Jobs</div>\n            </div>\n            <div className=\"bg-neutral-50 rounded-xl p-6\">\n              <div className=\"text-3xl font-bold text-secondary mb-2\">2,500+</div>\n              <div className=\"text-gray-600\">Applications</div>\n            </div>\n            <div className=\"bg-neutral-50 rounded-xl p-6\">\n              <div className=\"text-3xl font-bold text-primary mb-2\">85%</div>\n              <div className=\"text-gray-600\">Success Rate</div>\n            </div>\n            <div className=\"bg-neutral-50 rounded-xl p-6\">\n              <div className=\"text-3xl font-bold text-secondary mb-2\">19</div>\n              <div className=\"text-gray-600\">Departments</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Jobs Section */}\n      <section className=\"py-16 bg-neutral-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Featured Opportunities</h2>\n            <p className=\"text-gray-600 max-w-2xl mx-auto\">\n              Discover exciting career opportunities across various departments in Trans Nzoia County\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {featuredJobs.map((job:any) => (\n              <Card key={job.id} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-gray-900 mb-2\">{job.title}</h3>\n                      <p className=\"text-gray-600 text-sm mb-2\">{job.department?.name}</p>\n                      <p className=\"text-primary font-medium\">{job.designation?.jobGroup}</p>\n                    </div>\n                    <Badge variant=\"secondary\">New</Badge>\n                  </div>\n\n                  <div className=\"mb-4\">\n                    <p className=\"text-gray-600 text-sm mb-3 line-clamp-2\">\n                      {job.description || 'No description available'}\n                    </p>\n\n                    <div className=\"flex items-center text-sm text-gray-500 mb-2\">\n                      <GraduationCap className=\"w-4 h-4 mr-2\" />\n                      <span>Bachelor's Degree Required</span>\n                    </div>\n\n                    <div className=\"flex items-center text-sm text-gray-500\">\n                      <Calendar className=\"w-4 h-4 mr-2\" />\n                      <span>\n                        Deadline: {job.applicationDeadline \n                          ? new Date(job.applicationDeadline).toLocaleDateString() \n                          : 'Open'}\n                      </span>\n                    </div>\n                  </div>\n\n                  <Button className=\"w-full\">Apply Now</Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"text-center mt-8\">\n            <Button variant=\"outline\" size=\"lg\">\n              View All Jobs\n              <Search className=\"w-4 h-4 ml-2\" />\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Recent Notices Section */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center mb-8\">\n            <h2 className=\"text-3xl font-bold text-gray-900\">Latest Notices</h2>\n            <Button variant=\"link\">View All</Button>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {recentNotices.map((notice:any) => (\n              <Card key={notice.id} className=\"hover:shadow-sm transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <Badge variant={notice.type === 'announcement' ? 'default' : 'secondary'}>\n                      {notice.type?.charAt(0).toUpperCase() + notice.type?.slice(1)}\n                    </Badge>\n                    <span className=\"text-gray-500 text-sm\">\n                      {new Date(notice.createdAt).toLocaleDateString()}\n                    </span>\n                  </div>\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">{notice.title}</h3>\n                  <p className=\"text-gray-600 text-sm line-clamp-3\">{notice.content}</p>\n                  <Button variant=\"link\" className=\"text-primary p-0 mt-3\">\n                    Read More\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Application Process Section */}\n      <section className=\"py-16 bg-neutral-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Application Process</h2>\n            <p className=\"text-gray-600 max-w-2xl mx-auto\">\n              Follow these simple steps to apply for your dream job\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            {[\n              {\n                step: 1,\n                title: 'Create Account',\n                description: 'Register with your email and verify via OTP',\n              },\n              {\n                step: 2,\n                title: 'Complete Profile',\n                description: 'Fill in your personal, educational, and work details',\n              },\n              {\n                step: 3,\n                title: 'Apply for Jobs',\n                description: 'Browse and apply for positions that match your qualifications',\n              },\n              {\n                step: 4,\n                title: 'Track Progress',\n                description: 'Monitor your application status and receive updates',\n              },\n            ].map((item) => (\n              <div key={item.step} className=\"text-center\">\n                <div className=\"w-16 h-16 bg-primary text-white rounded-full flex items-center justify-center mx-auto mb-4 text-xl font-bold\">\n                  {item.step}\n                </div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">{item.title}</h3>\n                <p className=\"text-gray-600 text-sm\">{item.description}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                  <Building className=\"w-5 h-5 text-white\" />\n                </div>\n                <span className=\"font-semibold\">TNCPSB</span>\n              </div>\n              <p className=\"text-gray-300 text-sm\">\n                Trans Nzoia County Public Service Board - Building careers in public service excellence.\n              </p>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-4\">Quick Links</h4>\n              <ul className=\"space-y-2 text-sm text-gray-300\">\n                <li><a href=\"/about\" className=\"hover:text-white\">About Us</a></li>\n                <li><a href=\"/jobs\" className=\"hover:text-white\">Job Opportunities</a></li>\n                <li><a href=\"/faqs\" className=\"hover:text-white\">Application Process</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Contact</a></li>\n              </ul>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-4\">Services</h4>\n              <ul className=\"space-y-2 text-sm text-gray-300\">\n                <li><a href=\"#\" className=\"hover:text-white\">Recruitment</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Career Development</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">HR Advisory</a></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Training</a></li>\n              </ul>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-4\">Contact Info</h4>\n              <div className=\"space-y-2 text-sm text-gray-300\">\n                <p><MapPin className=\"w-4 h-4 inline mr-2\" />Kitale, Trans Nzoia County</p>\n                <p>📞 +254 713 635 352</p>\n                <p>✉️ info@cpsbtransnzoia.co.ke</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"border-t border-gray-700 mt-8 pt-8 text-center text-sm text-gray-300\">\n            <p>&copy; 2024 Trans Nzoia County Public Service Board. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":10347},"client/src/pages/Jobs.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport Navigation from '@/components/layout/Navigation';\nimport JobCard from '@/components/job/JobCard';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Search, Filter, MapPin, Briefcase } from 'lucide-react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { usePublicConfig } from \"@/hooks/usePublicConfig\";\n\nexport default function Jobs() {\n  const { isAuthenticated } = useAuth();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedDepartment, setSelectedDepartment] = useState<string>('all');\n  const [selectedJobGroup, setSelectedJobGroup] = useState<string>('all');\n  const { data: config, isLoading } = usePublicConfig();  \n  const departments = config?.departments || [];\n  const jobGroups = config?.jobGroups || [];\n  const jobs = config?.jobs || [];  \n  const counties = config?.counties || [];\n  const filteredJobs = jobs.filter(job => { \n    const matchesSearch = job.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         job.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesDepartment = selectedDepartment === 'all' || job.departmentId?.toString() === selectedDepartment;\n    const matchesJobGroup = selectedJobGroup === 'all' || job.jg?.toString() === selectedJobGroup;\n    \n    return matchesSearch && matchesDepartment && matchesJobGroup;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-neutral-50\">\n        <Navigation />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardContent className=\"p-6\">\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-4\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-1/2 mb-2\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-1/4 mb-4\"></div>\n                  <div className=\"h-20 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"h-8 bg-gray-200 rounded\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      <Navigation />\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">Job Opportunities</h1>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            Discover exciting career opportunities in public service. Join us in building \n            a better Trans Nzoia County through dedicated public service.\n          </p>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-primary mb-2\">{jobs.length}</div>\n              <div className=\"text-gray-600\">Active Jobs</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-secondary mb-2\">{departments.length}</div>\n              <div className=\"text-gray-600\">Departments</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-primary mb-2\">{jobGroups.length}</div>\n              <div className=\"text-gray-600\">Job Groups</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-secondary mb-2\">{counties.length}</div>\n              <div className=\"text-gray-600\">Counties</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search and Filters */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col lg:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                  <Input\n                    placeholder=\"Search jobs by title or description...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Select value={selectedDepartment} onValueChange={setSelectedDepartment}>\n                  <SelectTrigger className=\"w-full sm:w-48\">\n                    <SelectValue placeholder=\"All Departments\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Departments</SelectItem>\n                    {departments.map((dept) => (\n                      <SelectItem key={dept.id} value={dept.id.toString()}>\n                        {dept.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <Select value={selectedJobGroup} onValueChange={setSelectedJobGroup}>\n                  <SelectTrigger className=\"w-full sm:w-32\">\n                    <SelectValue placeholder=\"Job Group\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Groups</SelectItem>\n                    {jobGroups.map((group: any) => (\n                      <SelectItem key={group.id} value={group.id.toString()}>\n                        Group {group.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <Button variant=\"outline\">\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  More Filters\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Filter Tags */}\n        <div className=\"flex flex-wrap gap-2 mb-8\">\n          <Badge variant=\"outline\" className=\"cursor-pointer hover:bg-primary hover:text-white\">\n            <MapPin className=\"w-3 h-3 mr-1\" />\n            Trans Nzoia\n          </Badge>\n          <Badge variant=\"outline\" className=\"cursor-pointer hover:bg-primary hover:text-white\">\n            <Briefcase className=\"w-3 h-3 mr-1\" />\n            Full Time\n          </Badge>\n          <Badge variant=\"outline\" className=\"cursor-pointer hover:bg-primary hover:text-white\">\n            New Positions\n          </Badge>\n          <Badge variant=\"outline\" className=\"cursor-pointer hover:bg-primary hover:text-white\">\n            Remote Friendly\n          </Badge>\n        </div>\n\n        {/* Jobs Grid */}\n        {filteredJobs.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <Briefcase className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No Jobs Found</h3>\n              <p className=\"text-gray-600 mb-6\">\n                {searchTerm || selectedDepartment !== 'all' || selectedJobGroup !== 'all'\n                  ? 'No jobs match your current filters. Try adjusting your search criteria.'\n                  : 'There are currently no active job postings. Check back soon for new opportunities!'}\n              </p>\n              {(searchTerm || selectedDepartment !== 'all' || selectedJobGroup !== 'all') && (\n                <Button \n                  variant=\"outline\"\n                  onClick={() => {\n                    setSearchTerm('');\n                    setSelectedDepartment('all');\n                    setSelectedJobGroup('all');\n                  }}\n                >\n                  Clear Filters\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          <>\n            <div className=\"flex justify-between items-center mb-6\">\n              <p className=\"text-gray-600\">\n                Showing {filteredJobs.length} of {jobs.length} jobs\n              </p>\n              <Select defaultValue=\"newest\">\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"newest\">Newest First</SelectItem>\n                  <SelectItem value=\"oldest\">Oldest First</SelectItem>\n                  <SelectItem value=\"deadline\">Deadline Soon</SelectItem>\n                  <SelectItem value=\"title\">Title A-Z</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredJobs.map((job) => (\n                <JobCard \n                  key={job.id} \n                  job={job} \n                  isAuthenticated={isAuthenticated}\n                />\n              ))}\n            </div>\n          </>\n        )}\n\n        {/* Call to Action */}\n        {!isAuthenticated && (\n          <Card className=\"mt-12\">\n            <CardContent className=\"p-8 text-center\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\n                Ready to Start Your Career in Public Service?\n              </h2>\n              <p className=\"text-gray-600 mb-6 max-w-2xl mx-auto\">\n                Create your account today to apply for jobs, track your applications, \n                and build your profile for future opportunities.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Button size=\"lg\">\n                  Create Account\n                </Button>\n                <Button variant=\"outline\" size=\"lg\">\n                  Learn More\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":10578},"client/src/pages/Notices.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport Navigation from '@/components/layout/Navigation';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Form, FormControl, FormField, FormItem, FormMessage } from '@/components/ui/form';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Calendar, Search, Filter, Download, Eye, X } from 'lucide-react';\n\nconst subscriptionSchema = z.object({\n  email: z.string().email('Please enter a valid email address').min(1, 'Email is required'),\n  notificationTypes: z.string().default('all'),\n});\n\ntype SubscriptionFormData = z.infer<typeof subscriptionSchema>;\n\nexport default function Notices() {\n  const { data: notices = [], isLoading } = useQuery({\n    queryKey: ['/api/public/notices'],\n  });  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('All');\n  const [showNoticeModal, setShowNoticeModal] = useState(false);\n  const [selectedNotice, setSelectedNotice] = useState<any>(null);\n  const [showFilterOptions, setShowFilterOptions] = useState(false);\n  const [dateRange, setDateRange] = useState({ start: '', end: '' });\n\n  const form = useForm<SubscriptionFormData>({\n    resolver: zodResolver(subscriptionSchema),\n    defaultValues: {\n      email: '',\n      notificationTypes: 'all',\n    },\n  });\n\n  const subscribeMutation = useMutation({\n    mutationFn: async (subscriptionData: SubscriptionFormData) => {\n      return await apiRequest('POST', '/api/public/subscribe', subscriptionData);\n    },\n    onSuccess: (data) => {\n      toast({ \n        title: 'Successfully Subscribed!', \n        description: `You'll receive notice updates at ${form.getValues('email')}. Check your email for confirmation.`,\n        duration: 5000\n      });\n      form.reset();\n    },\n    onError: (error: any) => {\n      let title = 'Subscription Failed';\n      let message = 'Failed to subscribe. Please try again.';\n      \n      // Handle specific error cases\n      if (error.status === 409) {\n        title = 'Already Subscribed';\n        message = 'This email is already subscribed to notifications.';\n      } else if (error.message) {\n        message = error.message;\n      }\n      \n      toast({ \n        title, \n        description: message, \n        variant: 'destructive' \n      });\n    }\n  });\n\n  const onSubmit = (data: SubscriptionFormData) => {\n    subscribeMutation.mutate(data);\n  };\n\n  // Map UI labels to database types\n  const categoryTypeMap: { [key: string]: string | null } = {\n    'All': null,\n    'Announcements': 'announcement',\n    'Interviews': 'interview',\n    'Updates': 'update',\n    'Urgent': 'urgent',\n    'General': 'general'\n  };\n\n  // Filter notices based on search term, category, and date range\n  const filteredNotices = (notices as any[])?.filter((notice: any) => {\n    const matchesSearch = !searchTerm || \n      notice.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      notice.content.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const expectedType = categoryTypeMap[selectedCategory];\n    const matchesCategory = expectedType === null || \n      notice.type === expectedType ||\n      (!notice.type && expectedType === 'general');\n    \n    const matchesDateRange = (() => {\n      if (!dateRange.start && !dateRange.end) return true;\n      \n      const noticeDate = new Date(notice.publishedAt || notice.createdAt);\n      const startDate = dateRange.start ? new Date(dateRange.start) : null;\n      const endDate = dateRange.end ? new Date(dateRange.end) : null;\n      \n      if (startDate && endDate) {\n        return noticeDate >= startDate && noticeDate <= endDate;\n      } else if (startDate) {\n        return noticeDate >= startDate;\n      } else if (endDate) {\n        return noticeDate <= endDate;\n      }\n      return true;\n    })();\n    \n    return matchesSearch && matchesCategory && matchesDateRange;\n  }) || [];\n\n  const clearAllFilters = () => {\n    setSearchTerm('');\n    setSelectedCategory('All');\n    setDateRange({ start: '', end: '' });\n    toast({ title: 'Filters Cleared', description: 'All filters have been reset.' });\n  };\n\n  const applyDateRange = () => {\n    setShowFilterOptions(false);\n    toast({ \n      title: 'Date Filter Applied', \n      description: `Showing notices ${dateRange.start ? `from ${dateRange.start}` : ''}${dateRange.start && dateRange.end ? ' ' : ''}${dateRange.end ? `to ${dateRange.end}` : ''}` \n    });\n  };\n\n  const openNoticeModal = (notice: any) => {\n    setSelectedNotice(notice);\n    setShowNoticeModal(true);\n  };\n\n  const downloadNoticeHtml = (notice: any) => {\n    // Create a simple HTML content for PDF generation\n    const content = `\n      <html>\n        <head>\n          <title>${notice.title}</title>\n          <style>\n            body { font-family: Arial, sans-serif; margin: 40px; }\n            .header { text-align: center; margin-bottom: 30px; }\n            .title { font-size: 24px; font-weight: bold; margin-bottom: 10px; }\n            .meta { color: #666; margin-bottom: 20px; }\n            .content { line-height: 1.6; }\n          </style>\n        </head>\n        <body>\n          <div class=\"header\">\n            <div class=\"title\">${notice.title}</div>\n            <div class=\"meta\">Type: ${notice.type || 'General'} | Date: ${formatDate(notice.publishedAt || notice.createdAt)}</div>\n          </div>\n          <div class=\"content\">\n            ${notice.content}\n          </div>\n        </body>\n      </html>\n    `;\n    \n    // Create blob and download\n    const blob = new Blob([content], { type: 'text/html' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${notice.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.html`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n    \n    toast({ \n      title: 'Download Started', \n      description: 'Notice has been downloaded as HTML file.' \n    });\n  };\n\n  const getNoticeTypeColor = (type: string) => {\n    switch (type) {\n      case 'announcement':\n        return 'bg-blue-100 text-blue-800';\n      case 'update':\n        return 'bg-green-100 text-green-800';\n      case 'urgent':\n        return 'bg-red-100 text-red-800';\n      case 'interview':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-neutral-50\">\n        <Navigation />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse space-y-6\">\n            {[...Array(5)].map((_, i) => (\n              <Card key={i}>\n                <CardContent className=\"p-6\">\n                  <div className=\"h-4 bg-gray-200 rounded w-1/4 mb-4\"></div>\n                  <div className=\"h-6 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-full mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      <Navigation />\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">Official Notices</h1>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            Stay updated with the latest announcements, interview schedules, \n            and important information from Trans Nzoia County Public Service Board.\n          </p>\n        </div>\n\n        {/* Filters and Search */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col lg:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                  <Input\n                    placeholder=\"Search notices...\"\n                    className=\"pl-10\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    data-testid=\"input-search-notices\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={clearAllFilters}\n                  data-testid=\"button-clear-filters\"\n                >\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  Clear Filters\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => setShowFilterOptions(!showFilterOptions)}\n                  data-testid=\"button-date-range\"\n                >\n                  <Calendar className=\"w-4 h-4 mr-2\" />\n                  Date Range\n                </Button>\n              </div>\n            </div>\n\n            {/* Date Range Filter */}\n            {showFilterOptions && (\n              <div className=\"mt-4 p-4 border-t bg-gray-50 rounded-b-lg\">\n                <h4 className=\"font-medium mb-3 text-gray-900\">Filter by Date Range</h4>\n                <div className=\"flex flex-col sm:flex-row gap-4 items-end\">\n                  <div className=\"flex-1\">\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">From Date</label>\n                    <Input\n                      type=\"date\"\n                      value={dateRange.start}\n                      onChange={(e) => setDateRange(prev => ({ ...prev, start: e.target.value }))}\n                      data-testid=\"input-date-start\"\n                    />\n                  </div>\n                  <div className=\"flex-1\">\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">To Date</label>\n                    <Input\n                      type=\"date\"\n                      value={dateRange.end}\n                      onChange={(e) => setDateRange(prev => ({ ...prev, end: e.target.value }))}\n                      data-testid=\"input-date-end\"\n                    />\n                  </div>\n                  <Button \n                    onClick={applyDateRange}\n                    data-testid=\"button-apply-date-range\"\n                  >\n                    Apply Filter\n                  </Button>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Notice Categories */}\n        <div className=\"flex flex-wrap gap-2 mb-8\">\n          {['All', 'Announcements', 'Interviews', 'Updates', 'Urgent', 'General'].map((category) => (\n            <Badge\n              key={category}\n              variant={category === selectedCategory ? 'default' : 'outline'}\n              className=\"cursor-pointer hover:bg-primary hover:text-white transition-colors px-4 py-2\"\n              onClick={() => setSelectedCategory(category)}\n              data-testid={`filter-category-${category.toLowerCase()}`}\n            >\n              {category}\n            </Badge>\n          ))}\n        </div>\n\n        {/* Notices List */}\n        <div className=\"space-y-6\">\n          {filteredNotices.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <Calendar className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n                  {(notices as any)?.length === 0 ? 'No Notices Available' : 'No Notices Match Your Search'}\n                </h3>\n                <p className=\"text-gray-600\">\n                  {(notices as any)?.length === 0 \n                    ? 'There are currently no published notices. Please check back later for updates.'\n                    : 'Try adjusting your search terms or selected category to find notices.'\n                  }\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            filteredNotices.map((notice: any) => (\n              <Card key={notice.id} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex flex-col lg:flex-row lg:items-start lg:justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3 mb-3\">\n                        <Badge className={getNoticeTypeColor(notice.type || 'general')}>\n                          {notice.type?.charAt(0).toUpperCase() + notice.type?.slice(1) || 'General'}\n                        </Badge>\n                        <div className=\"flex items-center text-gray-500 text-sm\">\n                          <Calendar className=\"w-4 h-4 mr-1\" />\n                          {formatDate(notice.publishedAt || notice.createdAt)}\n                        </div>\n                      </div>\n\n                      <h2 className=\"text-xl font-semibold text-gray-900 mb-3\">\n                        {notice.title}\n                      </h2>\n\n                      <div className=\"prose prose-sm max-w-none text-gray-600 mb-4\">\n                        <p className=\"line-clamp-3\">\n                          {notice.content}\n                        </p>\n                      </div>\n\n                      <div className=\"flex flex-wrap gap-2\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => openNoticeModal(notice)}\n                          data-testid={`button-read-notice-${notice.id}`}\n                        >\n                          <Eye className=\"w-4 h-4 mr-2\" />\n                          Read Full Notice\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => downloadNoticeHtml(notice)}\n                          data-testid={`button-download-notice-${notice.id}`}\n                        >\n                          <Download className=\"w-4 h-4 mr-2\" />\n                          Download\n                        </Button>\n                      </div>\n                    </div>\n\n                    {/* Priority indicator for urgent notices */}\n                    {notice.type === 'urgent' && (\n                      <div className=\"mt-4 lg:mt-0 lg:ml-6\">\n                        <div className=\"bg-red-100 border border-red-200 rounded-lg p-3 text-center\">\n                          <div className=\"text-red-600 font-semibold text-sm\">URGENT</div>\n                          <div className=\"text-red-500 text-xs\">Immediate Attention Required</div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n\n        {/* Results Summary */}\n        {(notices as any)?.length > 0 && (\n          <div className=\"text-center mt-8\">\n            <p className=\"text-gray-600\">\n              Showing {filteredNotices.length} of {(notices as any).length} notices\n              {selectedCategory !== 'All' && ` in ${selectedCategory}`}\n              {searchTerm && ` matching \"${searchTerm}\"`}\n            </p>\n          </div>\n        )}\n\n        {/* Notice Subscription */}\n        <Card className=\"mt-12\">\n          <CardContent className=\"p-8 text-center\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\n              Stay Updated\n            </h2>\n            <p className=\"text-gray-600 mb-6 max-w-2xl mx-auto\">\n              Subscribe to receive email notifications when new notices are published. \n              Never miss important updates about job opportunities and recruitment processes.\n            </p>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"max-w-md mx-auto\">\n                <div className=\"flex flex-col sm:flex-row gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex-1\">\n                        <FormControl>\n                          <Input\n                            placeholder=\"Enter your email address\"\n                            data-testid=\"input-email-subscription\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <Button\n                    type=\"submit\"\n                    disabled={subscribeMutation.isPending}\n                    data-testid=\"button-subscribe\"\n                  >\n                    {subscribeMutation.isPending ? 'Subscribing...' : 'Subscribe'}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n            <p className=\"text-xs text-gray-500 mt-3\">\n              You can unsubscribe at any time. We respect your privacy.\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Notice Detail Modal */}\n        <Dialog open={showNoticeModal} onOpenChange={setShowNoticeModal}>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center justify-between\">\n                <span className=\"pr-8\">{selectedNotice?.title}</span>\n              </DialogTitle>\n            </DialogHeader>\n            \n            {selectedNotice && (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-3\">\n                  <Badge className={getNoticeTypeColor(selectedNotice.type || 'general')}>\n                    {selectedNotice.type?.charAt(0).toUpperCase() + selectedNotice.type?.slice(1) || 'General'}\n                  </Badge>\n                  <div className=\"flex items-center text-gray-500 text-sm\">\n                    <Calendar className=\"w-4 h-4 mr-1\" />\n                    {formatDate(selectedNotice.publishedAt || selectedNotice.createdAt)}\n                  </div>\n                </div>\n\n                <div className=\"prose prose-sm max-w-none text-gray-700 whitespace-pre-wrap\">\n                  {selectedNotice.content}\n                </div>\n\n                <div className=\"flex gap-2 pt-4 border-t\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => downloadNoticeHtml(selectedNotice)}\n                    data-testid=\"button-download-modal\"\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Download Notice\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setShowNoticeModal(false)}\n                    data-testid=\"button-close-modal\"\n                  >\n                    <X className=\"w-4 h-4 mr-2\" />\n                    Close\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20235},"client/src/pages/not-found.tsx":{"content":"import { AlertCircle } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\n\nconst NotFound = () => {\n  const { user } = useAuth();\n  const [location, setLocation] = useLocation();\n\n  const isLoggedIn = !!user;\n  const role = user?.role;\n\n  const getRedirectPath = () => {\n    switch (role) {\n      case \"admin\":\n        return \"/admin\";\n      case \"board\":\n        return \"/board\";\n      case \"applicant\":\n        return \"/dashboard\";\n      default:\n        return \"/\";\n    }\n  };\n\n  const handleRedirect = () => {\n    setLocation(getRedirectPath());\n  };\n\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2 items-center\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\"> 404 Page Not Available</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            {isLoggedIn\n              ? `You are logged in as \"${role}\", but this page either doesn't exist or you don't have permission to access it.`\n              : `You are not logged in. This page either doesn't exist or requires authentication.`}\n          </p>\n\n          <p className=\"mt-2 text-xs text-gray-500 italic\">\n            { role===\"admin\" ? `Did you forget to add ${location} to the router?`: `You are not allowed to this page!!`}\n          </p>\n\n          <div className=\"mt-6 flex justify-center\">\n            <Button onClick={handleRedirect}>\n              {isLoggedIn ? \"Go to Dashboard\" : \"Go to Home\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default NotFound;\n","size_bytes":1923},"client/src/store/auth.ts":{"content":"// store/auth.ts\nimport { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\n\ntype UserType = \"APPLICANT\" | \"ADMIN\" | \"COMMITTEE\";\n\ntype AuthState = {\n  user: {\n    email: string;\n    firstName: string;\n    lastName: string;\n    profileImageUrl?: string;\n    role: UserType;\n  } | null;\n  isAuthenticated: boolean;\n  setAuth: (user: AuthState[\"user\"]) => void;\n  logout: () => void;\n};\n\nexport const useAuth = create<AuthState>()(\n  persist(\n    (set) => ({\n      user: null,\n      isAuthenticated: false,\n      setAuth: (user) => set({ user, isAuthenticated: true }),\n      logout: () => set({ user: null, isAuthenticated: false }),\n    }),\n    { name: \"auth-store\" }\n  )\n);\n","size_bytes":696},"client/src/store/authStore.ts":{"content":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\ninterface User {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  role: 'applicant' | 'admin' | 'board';\n  password?: string;\n  profileImageUrl?: string;\n}\n\ninterface AuthState {\n  user: User | null;\n  isAuthenticated: boolean;\n  setUser: (user: User | null) => void;\n  logout: () => void;\n}\n\nexport const useAuthStore = create<AuthState>()(\n  persist(\n    (set) => ({\n      user: null,\n      isAuthenticated: false,\n      setUser: (user) => set({ user, isAuthenticated: !!user }),\n      logout: () => {\n        set({ user: null, isAuthenticated: false });\n        // Redirect to logout endpoint\n        window.location.href = '/api/logout';\n      },\n    }),\n    {\n      name: 'auth-storage',\n    }\n  )\n);\n","size_bytes":814},"client/src/components/about/BoardLeadershipCarousel.tsx":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport useEmblaCarousel from 'embla-carousel-react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { ChevronLeft, ChevronRight, User, AlertCircle, RefreshCw } from 'lucide-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport type { BoardMember } from '@shared/schema';\n\nexport default function BoardLeadershipCarousel() {\n  const { data: boardMembers = [], isLoading, isError, refetch } = useQuery<BoardMember[]>({\n    queryKey: ['/api/public/board-members'],\n  });\n  const [emblaRef, emblaApi] = useEmblaCarousel({ \n    loop: boardMembers.length > 1,\n    align: 'start',\n    slidesToScroll: 1\n  });\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [canScrollPrev, setCanScrollPrev] = useState(false);\n  const [canScrollNext, setCanScrollNext] = useState(false);\n  \n  if (isError) {\n    return (\n      <div className=\"text-center py-12\">\n        <AlertCircle className=\"w-16 h-16 text-red-500 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Failed to Load Board Members</h3>\n        <p className=\"text-gray-600 mb-4\">We're having trouble loading the board member information.</p>\n        <Button onClick={() => refetch()} variant=\"outline\" className=\"flex items-center gap-2 mx-auto\" data-testid=\"button-retry-board-members\">\n          <RefreshCw className=\"w-4 h-4\" />\n          Try Again\n        </Button>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {[...Array(3)].map((_, i) => (\n          <Card key={i} className=\"h-80 animate-pulse\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-24 h-24 bg-gray-200 rounded-full mx-auto mb-6\"></div>\n              <div className=\"space-y-2\">\n                <div className=\"h-4 bg-gray-200 rounded w-3/4 mx-auto\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-1/2 mx-auto\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-full\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-2/3 mx-auto\"></div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n  \n  if (boardMembers.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <User className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n        <p className=\"text-gray-500\">No board members available at this time.</p>\n      </div>\n    );\n  }\n\n  const scrollPrev = useCallback(() => {\n    if (emblaApi) emblaApi.scrollPrev();\n  }, [emblaApi]);\n\n  const scrollNext = useCallback(() => {\n    if (emblaApi) emblaApi.scrollNext();\n  }, [emblaApi]);\n\n  const onSelect = useCallback(() => {\n    if (!emblaApi) return;\n    setSelectedIndex(emblaApi.selectedScrollSnap());\n    setCanScrollPrev(emblaApi.canScrollPrev());\n    setCanScrollNext(emblaApi.canScrollNext());\n  }, [emblaApi]);\n\n  useEffect(() => {\n    if (!emblaApi) return;\n    onSelect();\n    emblaApi.on('select', onSelect);\n    emblaApi.on('reInit', onSelect);\n\n    return () => {\n      emblaApi.off('select', onSelect);\n      emblaApi.off('reInit', onSelect);\n    };\n  }, [emblaApi, onSelect]);\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  };\n\n  return (\n    <div className=\"relative\">\n      <div className=\"embla overflow-hidden\" ref={emblaRef} data-testid=\"board-leadership-carousel\">\n        <div className=\"embla__container flex\">\n          {boardMembers.map((member) => (\n            <div key={member.id} className=\"embla__slide flex-[0_0_100%] min-w-0 md:flex-[0_0_50%] lg:flex-[0_0_33.333%] px-3\">\n              <Card className=\"h-full hover:shadow-lg transition-shadow duration-300\">\n                <CardContent className=\"p-6 text-center h-full flex flex-col\">\n                  {/* Avatar */}\n                  <div className=\"relative mb-6\">\n                    {member.photoUrl ? (\n                      <img \n                        src={member.photoUrl} \n                        alt={member.name}\n                        className=\"w-24 h-24 rounded-full mx-auto object-cover border-4 border-[#1D523A]/10\"\n                      />\n                    ) : (\n                      <div \n                        className=\"w-24 h-24 rounded-full mx-auto flex items-center justify-center text-white text-xl font-semibold border-4\"\n                        style={{ \n                          backgroundColor: '#1D523A',\n                          borderColor: '#09CDE3'\n                        }}\n                      >\n                        {getInitials(member.name)}\n                      </div>\n                    )}\n                    <div \n                      className=\"absolute -bottom-2 -right-2 w-8 h-8 rounded-full flex items-center justify-center\"\n                      style={{ backgroundColor: '#EEF200' }}\n                    >\n                      <User className=\"w-4 h-4\" style={{ color: '#1D523A' }} />\n                    </div>\n                  </div>\n\n                  {/* Member Info */}\n                  <div className=\"flex-grow\">\n                    <h3 className=\"font-bold text-lg text-gray-900 mb-1\">{member.name}</h3>\n                    <p \n                      className=\"font-semibold mb-2 text-sm\"\n                      style={{ color: '#1D523A' }}\n                    >\n                      {member.position}\n                    </p>\n                    \n                    {/* Bio */}\n                    <p className=\"text-sm text-gray-500 leading-relaxed line-clamp-4\">\n                      {member.bio || 'No bio available.'}\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Navigation Arrows */}\n      <button\n        className={`absolute left-2 top-1/2 -translate-y-1/2 w-10 h-10 rounded-full flex items-center justify-center transition-all duration-200 z-10 ${\n          canScrollPrev \n            ? 'bg-white shadow-lg hover:shadow-xl text-gray-700 hover:text-[#1D523A]' \n            : 'bg-gray-100 text-gray-400 cursor-not-allowed'\n        }`}\n        onClick={scrollPrev}\n        disabled={!canScrollPrev}\n        data-testid=\"board-carousel-prev\"\n      >\n        <ChevronLeft className=\"w-5 h-5\" />\n      </button>\n      \n      <button\n        className={`absolute right-2 top-1/2 -translate-y-1/2 w-10 h-10 rounded-full flex items-center justify-center transition-all duration-200 z-10 ${\n          canScrollNext \n            ? 'bg-white shadow-lg hover:shadow-xl text-gray-700 hover:text-[#1D523A]' \n            : 'bg-gray-100 text-gray-400 cursor-not-allowed'\n        }`}\n        onClick={scrollNext}\n        disabled={!canScrollNext}\n        data-testid=\"board-carousel-next\"\n      >\n        <ChevronRight className=\"w-5 h-5\" />\n      </button>\n\n      {/* Dots Indicator */}\n      <div className=\"flex justify-center mt-6 space-x-2\">\n        {boardMembers.map((_, index) => (\n          <button\n            key={index}\n            className={`w-2 h-2 rounded-full transition-all duration-300 ${\n              index === selectedIndex \n                ? 'scale-125' \n                : 'hover:bg-gray-400'\n            }`}\n            style={{ \n              backgroundColor: index === selectedIndex ? '#1D523A' : '#D1D5DB'\n            }}\n            onClick={() => emblaApi?.scrollTo(index)}\n            data-testid={`board-carousel-dot-${index}`}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":7657},"client/src/components/applicant/EmployeeVerificationDialog.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useMutation } from '@tanstack/react-query';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Shield, CheckCircle, AlertCircle } from 'lucide-react';\n\nconst verificationSchema = z.object({\n  personalNumber: z.string().min(1, 'Personal number is required'),\n});\n\ninterface EmployeeVerificationDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  applicantIdNumber: string;\n  onVerificationSuccess: (employeeData: any) => void;\n}\n\nexport default function EmployeeVerificationDialog({\n  open,\n  onOpenChange,\n  applicantIdNumber,\n  onVerificationSuccess,\n}: EmployeeVerificationDialogProps) {\n  const [verificationStep, setVerificationStep] = useState<'input' | 'verified' | 'error'>('input');\n  const [verifiedEmployee, setVerifiedEmployee] = useState<any>(null);\n  const { toast } = useToast();\n\n  const form = useForm({\n    resolver: zodResolver(verificationSchema),\n    defaultValues: {\n      personalNumber: '',\n    },\n  });\n\n  const verifyMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof verificationSchema>) => {\n      const res = await apiRequest('POST', '/api/employee/verify', {\n        personalNumber: data.personalNumber,\n        idNumber: applicantIdNumber,\n      });\n      return res;\n    },\n    onSuccess: (response:any) => {      \n      setVerifiedEmployee(response?.employee);\n      setVerificationStep('verified');\n      toast({\n        title: 'Verification Successful',\n        description: 'Your employee status has been verified successfully.',\n      });\n    },\n    onError: (error: any) => {\n      console.log(error);\n      \n      setVerificationStep('error');\n      toast({\n        title: 'Verification Failed',\n        description: error.message || 'Unable to verify employee status. Please check your personal number.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleVerify = (data: z.infer<typeof verificationSchema>) => {\n    verifyMutation.mutate(data);\n  };\n\n  const handleProceed = () => {\n    if (verifiedEmployee) {\n      onVerificationSuccess(verifiedEmployee);\n      onOpenChange(false);\n      setVerificationStep('input');\n      setVerifiedEmployee(null);\n      form.reset();\n    }\n  };\n\n  const handleCancel = () => {\n    onOpenChange(false);\n    setVerificationStep('input');\n    setVerifiedEmployee(null);\n    form.reset();\n  };\n\n  const handleRetry = () => {\n    setVerificationStep('input');\n    form.reset();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Shield className=\"w-5 h-5 text-blue-600\" />\n            County Employee Verification\n          </DialogTitle>\n          <DialogDescription>\n            To proceed as a county employee, please verify your employment status by entering your personal number.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {verificationStep === 'input' && (\n            <>\n              <div className=\"bg-blue-50 p-3 rounded-lg border border-blue-200\">\n                <p className=\"text-sm text-blue-800\">\n                  <strong>ID Number:</strong> {applicantIdNumber}\n                </p>\n                <p className=\"text-xs text-blue-600 mt-1\">\n                  We'll verify this matches your personal number in our employee records.\n                </p>\n              </div>\n\n              <form onSubmit={form.handleSubmit(handleVerify)} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"personalNumber\">Personal Number</Label>\n                  <Input\n                    id=\"personalNumber\"\n                    data-testid=\"input-personalNumber\"\n                    placeholder=\"Enter your personal number\"\n                    {...form.register('personalNumber')}\n                  />\n                  {form.formState.errors.personalNumber && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {form.formState.errors.personalNumber.message}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"flex gap-3 justify-end\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={handleCancel}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={verifyMutation.isPending}\n                    data-testid=\"button-verify\"\n                  >\n                    {verifyMutation.isPending ? 'Verifying...' : 'Verify'}\n                  </Button>\n                </div>\n              </form>\n            </>\n          )}\n\n          {verificationStep === 'verified' && verifiedEmployee && (\n            <>\n              <div className=\"flex items-center gap-2 text-green-600 mb-4\">\n                <CheckCircle className=\"w-5 h-5\" />\n                <span className=\"font-medium\">Verification Successful!</span>\n              </div>\n\n              <div className=\"bg-green-50 p-4 rounded-lg border border-green-200 space-y-2\">\n                <h4 className=\"font-medium text-green-800\">Employee Details:</h4>\n                <div className=\"text-sm text-green-700 space-y-1\">\n                  <p><strong>Personal Number:</strong> {verifiedEmployee.personalNumber}</p>\n                  <p><strong>Designation:</strong> {verifiedEmployee.designation}</p>\n                  {verifiedEmployee.dutyStation && (\n                    <p><strong>Duty Station:</strong> {verifiedEmployee.dutyStation}</p>\n                  )}\n                  {verifiedEmployee.jg && (\n                    <p><strong>Job Group:</strong> {verifiedEmployee.jg}</p>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex gap-3 justify-end\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={handleCancel}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"button\"\n                  onClick={handleProceed}\n                  data-testid=\"button-proceed\"\n                  className=\"bg-green-600 hover:bg-green-700\"\n                >\n                  Proceed with Employee Details\n                </Button>\n              </div>\n            </>\n          )}\n\n          {verificationStep === 'error' && (\n            <>\n              <div className=\"flex items-center gap-2 text-red-600 mb-4\">\n                <AlertCircle className=\"w-5 h-5\" />\n                <span className=\"font-medium\">Verification Failed</span>\n              </div>\n\n              <div className=\"bg-red-50 p-4 rounded-lg border border-red-200\">\n                <p className=\"text-sm text-red-700\">\n                  We couldn't verify your employee status. This could be because:\n                </p>\n                <ul className=\"text-sm text-red-700 mt-2 space-y-1 list-disc list-inside\">\n                  <li>The personal number doesn't match our records</li>\n                  <li>The ID number doesn't match your employee record</li>\n                  <li>You may not be in our employee database</li>\n                </ul>\n              </div>\n\n              <div className=\"flex gap-3 justify-end\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={handleCancel}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"button\"\n                  onClick={handleRetry}\n                  data-testid=\"button-retry\"\n                >\n                  Try Again\n                </Button>\n              </div>\n            </>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8529},"client/src/components/applicant/ProfileForm.tsx":{"content":"import { useEffect, useState, useRef } from \"react\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue,} from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Trash2, Upload, FileText, CheckCircle } from \"lucide-react\";\nimport { usePublicConfig } from \"@/hooks/usePublicConfig\";\nimport EmployeeVerificationDialog from \"@/components/applicant/EmployeeVerificationDialog\";\nimport LocationDropdowns from \"@/components/common/LocationDropdowns\";\nimport PDFViewer from \"@/components/common/PDFViewer\";\nimport { sanitizeDate, filterEmptyFields } from \"./../../lib/sanitizeDates\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\nimport { stepSchemas, stepDefaults, educationStepSchema, } from \"../../../../shared/schemas\";\nimport { formatZodError } from \"./../../lib/errFormat\";\nimport { useFileUpload, uploadConfigs } from \"@/hooks/useFileUpload\";\nimport { capitalizeWords, createCapitalizeHandler } from \"@/lib/utils\";\n\n\n// -------------------- Types -------------------- //\ninterface ProfileFormProps {\n  step: number;\n  profile: any;\n  onSave: (data: any) => void;\n  isLoading: boolean;\n}\n// -------------------- Component -------------------- //\nexport default function ProfileForm({\n  step,\n  profile,\n  onSave,\n  isLoading,\n}: ProfileFormProps) {\n  const { data: config } = usePublicConfig();\n\n  const form = useForm({\n  resolver: zodResolver(stepSchemas[step]),\n  mode: \"onTouched\", // Prevent validation until user interacts with field\n  defaultValues: profile\n    ? {\n        ...stepDefaults[step],\n        // spread root profile fields\n        ...profile,\n        // ensure nested employee object exists\n        employee: profile.employee || {},\n      }\n    : stepDefaults[step],\n  });\n    // ✅ Field Arrays for dynamic sections\n  const {\n    fields: educationRecords,\n    append: addEducation,\n    remove: removeEducation,\n  } = useFieldArray({ control: form.control, name: \"education\" });\n\n  const {\n    fields: employmentHistory,\n    append: addEmployment,\n    remove: removeEmployment,\n  } = useFieldArray({ control: form.control, name: \"employmentHistory\" });\n\n  const {\n    fields: referees,\n    append: addReferee,\n    remove: removeReferee,\n  } = useFieldArray({ control: form.control, name: \"referees\" });\n\n  const {\n    fields: shortCourses,\n    append: addShortCourse,\n    remove: removeShortCourse,\n  } = useFieldArray({ control: form.control, name: \"shortCourses\" });\n\n  const {\n    fields: professionalQualifications,\n    append: addQualification,\n    remove: removeQualification,\n  } = useFieldArray({\n    control: form.control,\n    name: \"professionalQualifications\",\n  });\n\n  // ✅ Employee verification\n  const [showEmployeeVerification, setShowEmployeeVerification] =\n    useState(false);\n  const [isVerifiedEmployee, setIsVerifiedEmployee] = useState(false);\n  const [verifiedEmployeeData, setVerifiedEmployeeData] = useState<any>(null);\n  const [pdfViewer, setPdfViewer] = useState<{ isOpen: boolean; fileUrl: string; fileName: string }>({ \n    isOpen: false, \n    fileUrl: '', \n    fileName: '' \n  });\n\n  // ✅ Dynamic file upload system\n  const { uploadFile, state: uploadState } = useFileUpload(uploadConfigs.documents);\n\n  // Create refs for each file input dynamically\n  const fileInputs = useRef<{ [key: string]: HTMLInputElement | null }>({});\n  // ✅ Document types for step 8\n  const documentTypes = [\n    { id: 'national_id', label: 'National ID', required: true },\n    { id: 'certificates', label: 'Academic Certificates', required: true },\n    { id: 'transcripts', label: 'Academic Transcripts', required: true },\n    { id: 'professional_certs', label: 'Professional Certificates', required: false },\n    { id: 'kra_pin', label: 'KRA PIN Certificate', required: true },\n    { id: 'good_conduct', label: 'Certificate of Good Conduct', required: true },\n  ];\n\n  // ✅ Handle file uploads - now actually uploads to server\n  const handleFileUpload = async (documentType: string, file: File | null) => {\n    if (file) {\n      await uploadFile(file, documentType, { type: documentType });\n    }\n  };\n\n  // ✅ Get document status (existing from DB or newly uploaded)\n  const getDocumentStatus = (type: string) => {\n    // Check existing documents from profile first\n    const existingDoc = profile?.applicantProfile?.documents?.find((doc: any) => doc.type === type);  \n    if (existingDoc) {\n      return {\n        isUploading: uploadState.uploadProgress[type] || false,\n        isUploaded: true,\n        document: existingDoc\n      };\n    }\n    \n    // Check newly uploaded files\n    return {\n      isUploading: uploadState.uploadProgress[type] || false,\n      isUploaded: !!uploadState.uploadedFiles[type],\n      document: uploadState.uploadedFiles[type] || null\n    };\n  };\n  \n  // ✅ Extract file extension from filename\n  const getFileExtension = (filename: string) => {\n    return filename.split('.').pop()?.toUpperCase() || 'FILE';\n  };\n  \n  // ✅ Format file size\n  const formatFileSize = (bytes?: number) => {\n    if (!bytes) return 'Unknown size';\n    const mb = bytes / (1024 * 1024);\n    return `${mb.toFixed(1)} MB`;\n  };\n\n  \n  useEffect(() => {\n  if (profile) {\n    // Use setTimeout to ensure form validation doesn't run prematurely\n    setTimeout(() => {\n      form.reset({\n        ...stepDefaults[step],\n        ...profile,\n        employee: profile.employee || {},\n      });\n      \n      // Clear all validation errors after reset\n      form.clearErrors();\n    }, 0);\n\n    // ✅ Sync verified employee state\n    setIsVerifiedEmployee(!!profile.isEmployee);\n  }\n}, [profile, step]);\n\n  // ✅ Submit handler\n  const handleSubmit = async (data: any) => {\n    let stepData: any = {};\n    try {\n      switch (step) {\n        case 1:\n          stepData = {\n            ...data,\n            dateOfBirth: sanitizeDate(data.dateOfBirth),\n            countyId: data.countyId ? parseInt(data.countyId) : null,\n            constituencyId: data.constituencyId\n              ? parseInt(data.constituencyId)\n              : null,\n            wardId: data.wardId ? parseInt(data.wardId) : null,\n            isPwd: !!data.isPwd,\n            isEmployee: !!data.isEmployee,\n            pwdNumber: data.isPwd ? data.pwdNumber : null,\n          };\n          break;\n\n        case 1.5:\n          stepData = {\n            isEmployee: true,\n            applicantId: profile?.id,\n            employee: {\n              ...data,\n              dofa: sanitizeDate(data.dofa),\n              doca: sanitizeDate(data.doca),\n            },\n          };\n          break;\n\n        case 3:\n          // validate education explicitly\n          educationStepSchema.parse({ education: data.education });\n          stepData = { education: data.education };\n          break;\n\n        case 4:\n          stepData = {\n            shortCourses: data.shortCourses.map((c: any) => ({\n              ...c,\n              applicantId: profile?.id,\n              startDate: sanitizeDate(c.startDate),\n              endDate: sanitizeDate(c.endDate),\n            })),\n          };\n          break;\n\n        case 5:\n          stepData = {\n            professionalQualifications: data.professionalQualifications.map(\n              (q: any) => ({\n                ...q,\n                startDate: sanitizeDate(q.startDate),\n                endDate: sanitizeDate(q.endDate),\n              })\n            ),\n          };\n          break;\n\n        case 6:\n          stepData = {\n            employmentHistory: data.employmentHistory.map((job: any) => ({\n              ...job,\n              isCurrent: !!job.isCurrent,\n              startDate: sanitizeDate(job.startDate),\n              endDate: sanitizeDate(job.endDate),\n            })),\n          };          \n          break;\n\n        case 7:\n          stepData = { referees: data.referees };\n          break;\n\n        case 8:\n          // For step 8, documents are already uploaded to server via the upload hook\n          // Just pass the uploaded file data or indicate completion\n          stepData = { documents: uploadState.uploadedFiles };\n          break;\n\n        default:\n          stepData = data;\n      }\n    } catch (err) {\n      if (err instanceof z.ZodError) {\n        toast({\n          title: \"Validation Error\",\n          description: \"Please check your inputs.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n\n    // POST for first-time, PATCH otherwise\n    onSave({\n      method: profile?.id ? \"PATCH\" : \"POST\",\n      applicantId: profile?.id,\n      step,\n      data: filterEmptyFields(stepData),\n    });\n  };\n\n  // ✅ Employee verification success  \n  const handleEmployeeVerificationSuccess = (employeeData: any) => {\n    setIsVerifiedEmployee(true);\n    setVerifiedEmployeeData(employeeData);\n    form.setValue(\"isEmployee\", true);\n  };\nconst renderErrors = (errors: any, parentKey = \"\"): JSX.Element[] => {\n  return Object.entries(errors).flatMap(([key, error]: any) => {\n    const fieldPath = parentKey ? `${parentKey}.${key}` : key;\n\n    if (error?.message) {\n      return (\n        <li key={fieldPath}>\n          <strong>{fieldPath}:</strong> {error.message}\n        </li>\n      );\n    }\n\n    // ✅ Nested object/array errors\n    if (typeof error === \"object\" && error !== null) {\n      return renderErrors(error, fieldPath);\n    }\n\n    return [];\n  });\n};\n\n  return (\n    <>\n      <form\n        onSubmit={form.handleSubmit(handleSubmit)}\n        className=\"space-y-6\"\n        noValidate\n      >\n        {/* Errors */}        \n\n        {Object.keys(form.formState.errors).length > 0 && (\n          <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded\">\n            <div className=\"font-bold text-red-700 mb-2\">Form Validation Errors:</div>\n            <ul className=\"text-sm text-red-700\">\n              {renderErrors(form.formState.errors)}\n            </ul>\n          </div>\n        )}\n\n\n        {/* Step Renderer */}\n        {/* ---------------- Step Renderer ---------------- */}\n{(() => {\n  switch (step) {\n    case 1: // Personal Details\n  return (\n    <div className=\"space-y-6\">\n      {/* Names */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div>\n          <Label>Salutation *</Label>\n          <Select\n            value={form.watch(\"salutation\") || \"\"}\n            onValueChange={(val) => {\n              form.setValue(\"salutation\", val);\n              // Clear any validation error\n              form.clearErrors(\"salutation\");\n            }}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select salutation\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"Mr\">Mr</SelectItem>\n              <SelectItem value=\"Mrs\">Mrs</SelectItem>\n              <SelectItem value=\"Ms\">Ms</SelectItem>\n              <SelectItem value=\"Dr\">Dr</SelectItem>\n              <SelectItem value=\"Prof\">Prof</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div>\n          <Label>First Name *</Label>\n          <Input \n            {...form.register(\"firstName\")} \n            defaultValue={profile?.firstName || \"\"}\n            disabled={!!profile?.firstName}\n            onChange={createCapitalizeHandler((value) => form.setValue(\"firstName\", value, { shouldDirty: true, shouldValidate: true }))}\n            data-testid=\"input-firstName\"\n          />\n        </div>\n\n        <div>\n          <Label>Surname *</Label>\n          <Input \n            {...form.register(\"surname\")}\n            defaultValue={profile?.surname || \"\"}\n            disabled={!!profile?.surname}\n            onChange={createCapitalizeHandler((value) => form.setValue(\"surname\", value, { shouldDirty: true, shouldValidate: true }))}\n            data-testid=\"input-surname\"\n          />\n        </div>\n\n        <div>\n          <Label>Other Name</Label>\n          <Input \n            {...form.register(\"otherName\")}\n            onChange={createCapitalizeHandler((value) => form.setValue(\"otherName\", value, { shouldDirty: true, shouldValidate: true }))}\n            data-testid=\"input-otherName\"\n          />\n        </div>\n      </div>\n\n      {/* ID/Passport & DOB */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div>\n          <Label>ID/Passport Type *</Label>\n          <Select\n            value={form.watch(\"idPassportType\") || \"\"}\n            onValueChange={(val) => {\n              form.setValue(\"idPassportType\", val);\n              // Clear any validation error\n              form.clearErrors(\"idPassportType\");\n            }}\n            disabled={!!profile?.idPassportType}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select type\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"national_id\">National ID</SelectItem>\n              <SelectItem value=\"passport\">Passport</SelectItem>\n              <SelectItem value=\"alien_id\">Alien ID</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div>\n          <Label>ID / Passport No *</Label>\n          <Input {...form.register(\"nationalId\")} defaultValue={profile?.nationalId || \"\"}\n                  disabled={!!profile?.nationalId} />\n        </div>\n      {/* Gender & Nationality */}\n        <div>\n          <Label>Gender *</Label>\n          <Select\n            value={form.watch(\"gender\") || \"\"}\n            onValueChange={(val) => {\n              form.setValue(\"gender\", val);\n              // Clear any validation error\n              form.clearErrors(\"gender\");\n            }}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select gender\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"Male\">Male</SelectItem>\n              <SelectItem value=\"Female\">Female</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        <div>\n          <Label>Date of Birth *</Label>\n          <Input type=\"date\" {...form.register(\"dateOfBirth\")} />\n        </div>\n      </div>\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          {/* Ethnicity & Religion from API */}\n        <div>\n          <Label>Ethnicity</Label>\n          <Select\n            value={form.watch(\"ethnicity\") || \"\"}\n            onValueChange={(val) => form.setValue(\"ethnicity\", val)}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select ethnicity\" />\n            </SelectTrigger>\n            <SelectContent>\n              {config?.ethnicity?.map((e: any) => (\n                <SelectItem key={e.id} value={e.name}>\n                  {e.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div>\n          <Label>Religion</Label>\n          <Select\n            value={form.watch(\"religion\") || \"\"}\n            onValueChange={(val) => form.setValue(\"religion\", val)}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select religion\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"Christian\">Christian</SelectItem>\n              <SelectItem value=\"Muslim\">Muslim</SelectItem>\n              <SelectItem value=\"Hindu\">Hindu</SelectItem>\n              <SelectItem value=\"Other\">Other</SelectItem>\n            </SelectContent>\n          </Select>\n          </div>\n          {/* Phone Numbers */}\n          <div>\n            <Label>Phone Number *</Label>\n            <Input {...form.register(\"phoneNumber\")} />\n          </div>\n        <div>\n          <Label>Nationality</Label>\n          <Select value={form.watch(\"nationality\") || \"\"} onValueChange={(val)=> form.setValue(\"nationality\", val)}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select Nationality\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"Kenyan\">Kenyan</SelectItem>\n              <SelectItem value=\"Ugandan\">Ugandan</SelectItem>\n              <SelectItem value=\"Tanzanian\">Tanzanian</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n      {/* KRA Pin & Disability */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div>\n          <Label>Alternate Phone</Label>\n          <Input {...form.register(\"altPhoneNumber\")} />\n        </div>\n        <div>\n          <Label>KRA Pin</Label>\n          <Input {...form.register(\"kraPin\")} />\n        </div>\n        <div className=\"flex items-center space-x-2 mt-6\">\n          <Checkbox\n            checked={form.watch(\"isPwd\") || false}\n            onCheckedChange={(checked) =>\n              form.setValue(\"isPwd\", checked === true)\n            }\n          />\n          <Label>Person With Disability</Label>\n        </div>\n        {form.watch(\"isPwd\") && (\n          <div>\n            <Label>PWD Number</Label>\n            <Input {...form.register(\"pwdNumber\")} />\n          </div>\n        )}\n      </div>\n\n      {/* Employee Verification */}\n      <div className=\"flex items-center space-x-4\">\n  {!isVerifiedEmployee ? (\n    <Button\n      type=\"button\"\n      variant=\"outline\"\n      onClick={() => setShowEmployeeVerification(true)}\n    >\n      Verify Employee Status\n    </Button>\n  ) : (\n    <Badge variant=\"secondary\">Verified Employee</Badge>\n  )}\n</div>\n\n    </div>\n  );\ncase 1.5: // Employee Details\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <Label>Personal Number *</Label>\n          <Input {...form.register(\"employee.personalNumber\")} placeholder=\"e.g., 201400043000\" />\n        </div>\n\n        <div>\n          <Label>Designation *</Label>\n          <Input \n            {...form.register(\"employee.designation\")}\n            placeholder=\"e.g., Senior ICT Officer\"\n            onChange={createCapitalizeHandler((value) => form.setValue(\"employee.designation\", value, { shouldDirty: true, shouldValidate: true }))}\n            data-testid=\"input-designation\"\n          />\n        </div>\n\n        <div>\n          <Label>Duty Station *</Label>\n          <Input \n            {...form.register(\"employee.dutyStation\")}\n            placeholder=\"e.g., Kitale County Referral Hospital..\"\n            onChange={createCapitalizeHandler((value) => form.setValue(\"employee.dutyStation\", value, { shouldDirty: true, shouldValidate: true }))}\n            data-testid=\"input-dutyStation\"\n          />\n        </div>\n\n        <div>\n          <Label>Job Group *</Label>\n          <Select\n            value={form.watch(\"employee.jg\") || \"\"}\n            onValueChange={(val) => form.setValue(\"employee.jg\", val)}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select job group\" />\n            </SelectTrigger>\n            <SelectContent>\n              {config?.jg?.map((jg: any) => (\n                <SelectItem key={jg.id} value={jg.name}>\n                  {`Job Group ${jg.name}`}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div>\n          <Label>Department *</Label>\n          <Select\n            value={form.watch(\"employee.departmentId\")?.toString() || \"\"}\n            onValueChange={(val) => {\n              form.setValue(\"employee.departmentId\", parseInt(val, 10));\n              // Clear any validation error\n              form.clearErrors(\"employee.departmentId\");\n            }}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select department\" />\n            </SelectTrigger>\n            <SelectContent>\n              {config?.departments?.map((dept: any) => (\n                <SelectItem key={dept.id} value={dept.id.toString()}>\n                  {dept.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div>\n          <Label>Acting Position</Label>\n          <Input {...form.register(\"employee.actingPosition\")} />\n        </div>\n\n        <div>\n          <Label>Date of First Appointment</Label>\n          <Input type=\"date\" {...form.register(\"employee.dofa\")} />\n        </div>\n\n        <div>\n          <Label>Date of Current Appointment</Label>\n          <Input type=\"date\" {...form.register(\"employee.doca\")} />\n        </div>\n      </div>\n    </div>\n  );\n\n    case 2: // Address Info\n      return (\n        <div className=\"space-y-6\">\n          <LocationDropdowns\n            onLocationChange={(loc) => {\n              form.setValue(\"countyId\", loc.countyId);\n              form.setValue(\"constituencyId\", loc.constituencyId);\n              form.setValue(\"wardId\", loc.wardId);\n            }}\n            defaultValues={{\n              countyId: profile?.countyId,\n              constituencyId: profile?.constituencyId,\n              wardId: profile?.wardId,\n            }}\n          />\n          <Textarea {...form.register(\"address\")} placeholder=\"Physical address\" />\n        </div>\n      );\n\n    case 3: // Education\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between\">\n        <h4 className=\"font-medium\">Educational Qualifications</h4>\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={() =>\n            addEducation({\n              institution: \"\",\n              qualification: \"\",\n              certificateLevelId: null,\n              studyArea: 0,\n              specializationId: null,\n              courseId: null,\n              grade: \"\",\n              yearFrom: \"\",\n              yearCompleted: \"\",\n            })\n          }\n        >\n          <Plus className=\"w-4 h-4 mr-2\" /> Add Education\n        </Button>\n      </div>\n\n      {educationRecords.map((field, index) => {\n        const selectedStudyAreaId = form.watch(`education.${index}.studyArea`);\n        const relatedSpecializations = config?.specializations?.filter(\n            (s: any) => s.studyArea === Number(selectedStudyAreaId)\n          ) || [];\n\n        return (\n          <Card key={field.id}>\n            <CardContent className=\"p-4 space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <h5 className=\"font-medium\">Education {index + 1}</h5>\n                {educationRecords.length > 1 && (\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    onClick={() => removeEducation(index)}\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                {/* Institution */}\n                <div>\n                  <Label>Institution *</Label>\n                  <Input {...form.register(`education.${index}.institution`)} placeholder=\"Enter institution name\" />\n                </div>\n\n                {/* Qualification */}\n                <div>\n                  <Label>Qualification *</Label>\n                  <Input {...form.register(`education.${index}.qualification`)} placeholder=\"Enter qualification\" />\n                </div>\n\n                {/* Certificate Level (from API) */}\n                <div>\n                  <Label>Certificate Level *</Label>\n                  <Select\n                    value={\n                      form.watch(`education.${index}.certificateLevelId`)?.toString() ||\n                      \"\"\n                    }\n                    onValueChange={(val) => {\n                      form.setValue(\n                        `education.${index}.certificateLevelId`,\n                        parseInt(val, 10)\n                      );\n                      // Clear any validation error\n                      form.clearErrors(`education.${index}.certificateLevelId`);\n                    }}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select certificate level\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {config?.certificateLevels?.map((level: any) => (\n                        <SelectItem key={level.id} value={level.id.toString()}>\n                          {level.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                {/* Study Area (from API) */}\n                <div>\n                  <Label>Study Area *</Label>\n                  <Select\n                    value={\n                      form.watch(`education.${index}.studyArea`)?.toString() || \"\"\n                    }\n                    onValueChange={(val) => {\n                      form.setValue(`education.${index}.studyArea`,parseInt(val, 10));\n                      form.setValue(`education.${index}.specializationId`, null);\n                      // Clear validation errors\n                      form.clearErrors(`education.${index}.studyArea`);\n                      form.clearErrors(`education.${index}.specializationId`);\n                    }}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select study area\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {config?.studyAreas?.map((area: any) => (\n                        <SelectItem key={area.id} value={area.id.toString()}>\n                          {area.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Specialization (depends on Study Area) */}\n                <div>\n                  <Label>Specialization</Label>\n                  <Select\n                    value={\n                      form.watch(`education.${index}.specializationId`)?.toString() || \"\"\n                    }\n                    onValueChange={(val) =>\n                      form.setValue(`education.${index}.specializationId`,parseInt(val, 10))\n                    }\n                    disabled={!selectedStudyAreaId}\n                  >\n                    <SelectTrigger>\n                      <SelectValue\n                        placeholder={\n                          selectedStudyAreaId\n                            ? \"Select specialization\"\n                            : \"Select study area first\"\n                        }\n                      />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {relatedSpecializations.map((spec: any) => (\n                        <SelectItem key={spec.id} value={spec.id.toString()}>\n                          {spec.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Course (from API) */}\n                <div>\n                  <Label>Course</Label>\n                  <Input {...form.register(`education.${index}.courseName`)} placeholder=\"Enter course name\" />\n                </div>\n              </div>\n\n              {/* Grade */}\n\n\n              {/* Years */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                              <div>\n                <Label>Grade</Label>\n                <Input {...form.register(`education.${index}.grade`)} placeholder=\"Enter grade\" />\n              </div>\n                <div>\n                  <Label>Year From *</Label>\n                  <Input\n                    type=\"number\" placeholder=\"Enter year from\"\n                    {...form.register(`education.${index}.yearFrom`, {\n                      valueAsNumber: true,\n                    })}\n                  />\n                </div>\n                <div>\n                  <Label>Year Completed *</Label>\n                  <Input\n                    placeholder=\"Enter year completed\"\n                    type=\"number\"\n                    {...form.register(`education.${index}.yearCompleted`, {\n                      valueAsNumber: true,\n                    })}\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n\n    case 4: // Short Courses\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between\">\n        <h4 className=\"font-medium\">Short Courses</h4>\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={() =>\n            addShortCourse({\n              courseName: \"\",\n              institution: \"\",\n              certificateNo: \"\",\n              startDate: \"\",\n              endDate: \"\",\n            })\n          }\n        >\n          <Plus className=\"w-4 h-4 mr-2\" /> Add Course\n        </Button>\n      </div>\n\n      {shortCourses.map((field, index) => (\n        <Card key={field.id}>\n          <CardContent className=\"p-4 space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <h5 className=\"font-medium\">Course {index + 1}</h5>\n              {shortCourses.length > 1 && (\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  onClick={() => removeShortCourse(index)}\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </Button>\n              )}\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">              \n                  {/* Course Name */}\n                  <div>\n                    <Label>Course Name *</Label>\n                    <Input\n                      {...form.register(`shortCourses.${index}.course`)}\n                      placeholder=\"Enter course name\"\n                    />\n                  </div>                         \n\n            {/* Certificate Number */}\n            <div>\n              <Label>Certificate No</Label>\n              <Input\n                {...form.register(`shortCourses.${index}.certificateNo`)}\n                placeholder=\"Certificate number\"\n              />\n              </div>\n            </div>\n\n            {/* Dates */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <Label>Institution *</Label>\n                <Input\n                  {...form.register(`shortCourses.${index}.institutionName`)}\n                  placeholder=\"Enter institution\"\n                />\n              </div>\n              <div>\n                <Label>Start Date *</Label>\n                <Input\n                  type=\"date\"\n                  {...form.register(`shortCourses.${index}.startDate`)}\n                />\n              </div>\n              <div>\n                <Label>End Date *</Label>\n                <Input\n                  type=\"date\"\n                  {...form.register(`shortCourses.${index}.endDate`)}\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n\n  case 5: // Professional Qualifications\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between\">\n        <h4 className=\"font-medium\">Professional Qualifications</h4>\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={() =>\n            addQualification({\n              institution: \"\",\n              studentNo:\"\",\n              areaOfStudyId:\"\",\n              specialisationId:\"\",\n              course:\"\",\n              awardId:\"\",\n              gradeId:\"\",\n              examiner:\"\",\n              certificateNo:\"\",\n              startDate:\"\",\n              endDate:\"\",\n            })\n          }\n        >\n          <Plus className=\"w-4 h-4 mr-2\" /> Add Qualification\n        </Button>\n      </div>\n      {professionalQualifications.map((key, index) => {\n        const selectedStudyAreaId = form.watch(`professionalQualifications.${index}.areaOfStudyId`);\n              \n        const relatedSpecializations = config?.specializations?.filter(\n            (s: any) => s.studyArea === Number(selectedStudyAreaId)\n          ) || [];\n        return (\n        <Card key={key.id}>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h5 className=\"font-medium\">Professional Qualification {index + 1}</h5>\n              {professionalQualifications.length > 1 && (\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => removeQualification(index)}\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </Button>\n              )}\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label>Institution</Label>\n                <Input\n                  {...form.register(`professionalQualifications.${index}.institution`)}\n                  placeholder=\"Institution name\"\n                />\n              </div>\n\n              <div>\n                <Label>Student Number</Label>\n                <Input\n                  {...form.register(`professionalQualifications.${index}.studentNo`)}\n                  placeholder=\"Student/Registration number\"\n                />\n              </div>\n\n              <div>\n                <Label>Area of Study</Label>\n                <Select value={form.watch(`professionalQualifications.${index}.areaOfStudyId`)?.toString() || \"\"  }\n                    onValueChange ={(val) => form.setValue(`professionalQualifications.${index}.areaOfStudyId`, parseInt(val, 10))\n                    \n                    }\n                  > <SelectTrigger>\n                    <SelectValue placeholder=\"Select area of study\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {((config as any)?.studyAreas || []).map((area: any) => (\n                      <SelectItem key={area.id} value={area.id.toString()}>\n                        {area.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label>Specialisation</Label>\n                <Select value={form.watch(`professionalQualifications.${index}.specialisationId`)?.toString() || \"\"}\n                    onValueChange={(val) => form.setValue(`professionalQualifications.${index}.specialisationId`, parseInt(val,10))}\n                  disabled={!selectedStudyAreaId}>\n                    <SelectTrigger>\n                      <SelectValue\n                        placeholder={\n                          selectedStudyAreaId\n                            ? \"Select specialization\"\n                            : \"Select study area first\"\n                        }\n                      />\n                    </SelectTrigger>\n                  <SelectContent>\n                    {(relatedSpecializations).map((spec: any) => (\n                      <SelectItem key={spec.id} value={spec.id.toString()}>\n                        {spec.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label>Course</Label>\n                <Input\n                  {...form.register(`professionalQualifications.${index}.course`)}\n                  placeholder=\"Course name\"\n                />\n              </div>\n\n              <div>\n                <Label>Award</Label>\n                <Select value={form.watch(`professionalQualifications.${index}.awardId`)?.toString()} onValueChange={(value) => form.setValue(`professionalQualifications.${index}.awardId`, parseInt(value,10))}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select award\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {((config as any)?.awards).map((award: any) => (\n                      <SelectItem key={award.id} value={award.id.toString()}>\n                        {award.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label>Grade</Label>\n                  <Select\n                    value={form.watch(`professionalQualifications.${index}.gradeId`)?.toString()}\n                    onValueChange={(v) => form.setValue(`professionalQualifications.${index}.gradeId`, parseInt(v, 10))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select Grade\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {((config as any)?.awards).map((award: any) => (\n                      <SelectItem key={award.id} value={award.id.toString()}>\n                        {award.name}\n                      </SelectItem>\n                    ))}\n                    </SelectContent>\n                  </Select>\n              </div>\n\n              <div>\n                <Label>Examiner</Label>\n                <Input\n                  {...form.register(`professionalQualifications.${index}.examiner`)}\n                  placeholder=\"e.g., KNEC, KASNEB, UoN, JKUAT, MKU, e.t.c.\"\n                />\n              </div>\n\n              <div>\n                <Label>Certificate Number</Label>\n                <Input\n                  {...form.register(`professionalQualifications.${index}.certificateNo`)}\n                  placeholder=\"Certificate number\"\n                />\n              </div>\n\n              <div>\n                <Label>Start Date</Label>\n                <Input\n                  type=\"date\"\n                  {...form.register(`professionalQualifications.${index}.startDate`)}\n                />\n              </div>\n\n              <div>\n                <Label>End Date</Label>\n                <Input\n                  type=\"date\"\n                  {...form.register(`professionalQualifications.${index}.endDate`)}\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )})}\n    </div>\n  );\n  case 6: // Employment History\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between\">\n          <h4 className=\"font-medium\">Employment History</h4>\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={() =>\n              addEmployment({\n                employer: \"\",\n                position: \"\",\n                startDate: \"\",\n                endDate: \"\",\n                isCurrent: false,\n                responsibilities: \"\",\n              })\n            }\n          >\n            <Plus className=\"w-4 h-4 mr-2\" /> Add Employment\n          </Button>\n        </div>\n        {employmentHistory.map((field, index) => (\n                    <Card key={field.id}>\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between mb-4\">\n                          <h5 className=\"font-medium\">Employment Record {index + 1}</h5>\n                          {employmentHistory.length > 1 && (\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => removeEmployment(index)}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          )}\n                        </div>\n      \n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <div>\n                            <Label>Employer</Label>\n                            <Input\n                              {...form.register(`employmentHistory.${index}.employer`)}\n                              placeholder=\"e.g., Ministry of Water, Nairobi City County, e.t.c\"\n                            />\n                          </div>\n      \n                          <div>\n                            <Label>Position</Label>\n                            <Input\n                              {...form.register(`employmentHistory.${index}.position`)} placeholder=\"e.g., Director ICT Officer\"/>\n                          </div>\n      \n                          <div>\n                            <Label>Start Date</Label>\n                            <Input\n                              type=\"date\"\n                              {...form.register(`employmentHistory.${index}.startDate`)}\n                            />\n                          </div>\n      \n                          <div>\n                            <Label>End Date</Label>\n                            <Input\n                              type=\"date\"\n                              {...form.register(`employmentHistory.${index}.endDate`)}\n                              disabled={form.watch(`employmentHistory.${index}.isCurrent`)}\n                            />\n                          </div>\n                        </div>\n      \n                        <div className=\"mt-4\">\n                          <div className=\"flex items-center space-x-2 mb-3\">\n                            <Checkbox\n                              checked={form.watch(`employmentHistory.${index}.isCurrent`) || false}\n                              onCheckedChange={(checked) =>\n                                form.setValue(`employmentHistory.${index}.isCurrent`, checked === true, { shouldDirty: true, shouldValidate: true })\n                              }\n                            />\n                            <Label>This is my current position</Label>\n                          </div>\n      \n                          <div>\n                            <Label>Key Duties and Responsibilities</Label>\n                            <Textarea\n                              {...form.register(`employmentHistory.${index}.duties`)}\n                              placeholder=\"Describe your key duties and responsibilities...\"\n                              rows={3}\n                            />\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n      ))}\n    </div>\n  );\n\n  case 7: // Referees\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between\">\n        <div>\n          <h4 className=\"font-medium\">Referees</h4>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            Exactly 3 referees are required ({referees.length}/3)\n          </p>\n        </div>\n        {referees.length < 3 && (\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={() =>\n              addReferee({\n                name: \"\",\n                organization: \"\",\n                position: \"\",\n                phoneNumber: \"\",\n                email: \"\",\n                relationship: \"\",\n              })\n            }\n            data-testid=\"button-add-referee\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" /> Add Referee\n          </Button>\n        )}\n      </div>\n\n      {referees.map((field, index) => (\n        <Card key={field.id}>\n          <CardContent className=\"p-4 space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <h5 className=\"font-medium\">Referee {index + 1}</h5>\n              {referees.length > 3 && (\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  onClick={() => removeReferee(index)}\n                  data-testid={`button-remove-referee-${index}`}\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </Button>\n              )}\n            </div>\n\n            {/* Row 1: Name + Organization */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label>Name *</Label>\n                <Input \n                  {...form.register(`referees.${index}.name`)}\n                  placeholder=\"e.g., Mr. Moses Lubisia\"\n                  onChange={createCapitalizeHandler((value) => form.setValue(`referees.${index}.name`, value, { shouldDirty: true, shouldValidate: true }))}\n                  data-testid={`input-referee-name-${index}`}\n                />\n              </div>\n              <div>\n                <Label>Organization *</Label>\n                <Input \n                  {...form.register(`referees.${index}.organization`)}\n                  placeholder=\"e.g., Ministry of Health and Sanitation\"\n                  onChange={createCapitalizeHandler((value) => form.setValue(`referees.${index}.organization`, value, { shouldDirty: true, shouldValidate: true }))}\n                  data-testid={`input-referee-organization-${index}`}\n                />\n              </div>\n            </div>\n\n            {/* Row 2: Position + Phone */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label>Position</Label>\n                <Input \n                  {...form.register(`referees.${index}.position`)}\n                  placeholder=\"e.g., Director of ICT\"\n                  onChange={createCapitalizeHandler((value) => form.setValue(`referees.${index}.position`, value, { shouldDirty: true, shouldValidate: true }))}\n                  data-testid={`input-referee-position-${index}`}\n                />                \n              </div>\n              <div>\n                <Label>Phone Number *</Label>\n                <Input {...form.register(`referees.${index}.phoneNumber`)} placeholder=\"e.g., 0711293263\"/>\n              </div>\n            </div>\n\n            {/* Row 3: Email + Relationship */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label>Email *</Label>\n                <Input\n                  type=\"email\"\n                placeholder=\"e.g.,mossesjuma@yahoo.com\"\n                  {...form.register(`referees.${index}.email`)}\n                />\n              </div>\n              <div>\n                <Label>Relationship</Label>\n                <Input \n                  {...form.register(`referees.${index}.relationship`)}\n                  placeholder=\"e.g., Supervisor, Director, Team Leader\"\n                  onChange={createCapitalizeHandler((value) => form.setValue(`referees.${index}.relationship`, value, { shouldDirty: true, shouldValidate: true }))}\n                  data-testid={`input-referee-relationship-${index}`}\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\ncase 8: // Document Uploads\n\n  return (\n    <div className=\"space-y-6\">\n      <h4 className=\"font-medium\">Upload Required Documents</h4>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {documentTypes.map((docType) => {\n          const { isUploading, isUploaded, document } = getDocumentStatus(docType.id);\n\n          return (\n            <Card\n              key={docType.id}\n              className={`border-2 cursor-pointer transition ${\n                isUploaded ? \"border-green-300 bg-green-50\" : \"border-dashed hover:border-primary\"\n              }`}\n              onDragOver={(e) => e.preventDefault()}\n              onDrop={(e) => {\n                e.preventDefault();\n                const droppedFile = e.dataTransfer.files?.[0];\n                if (droppedFile) {\n                  handleFileUpload(docType.id, droppedFile);\n                }\n              }}\n            >\n              <CardContent className=\"flex flex-col items-center justify-center p-6 space-y-3\">\n                {/* Icon */}\n                {isUploaded ? (\n                  <CheckCircle className=\"w-8 h-8 text-green-600\" />\n                ) : (\n                  <Upload className=\"w-8 h-8 text-gray-400\" />\n                )}\n\n                {/* Label */}\n                <Label className=\"text-center font-medium\">\n                  {docType.label}\n                  {docType.required && <span className=\"text-red-500 ml-1\">*</span>}\n                </Label>\n\n                {/* File input (hidden, controlled via ref) */}\n                <input\n                  type=\"file\"\n                  accept=\".pdf\"\n                  className=\"hidden\"\n                  id={`file-${docType.id}`}\n                  ref={(el) => (fileInputs.current[docType.id] = el)}\n                  onChange={(e) =>\n                    handleFileUpload(docType.id, e.target.files?.[0] || null)\n                  }\n                  disabled={isUploading}\n                />\n\n                {/* Upload button */}\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => fileInputs.current[docType.id]?.click()}\n                  disabled={isUploading}\n                  data-testid={`button-upload-${docType.id}`}\n                >\n                  {isUploading ? \"Uploading...\" : isUploaded ? \"Replace\" : \"Choose File\"}\n                </Button>\n\n                {/* Status */}\n                {isUploaded && document ? (\n                  <div className=\"text-sm text-green-700 text-center space-y-2\">\n                    <div className=\"space-y-1\">\n                      <div className=\"font-medium\">\n                        {document.fileName ||\n                          document.filePath?.split(\"/\").pop() ||\n                          \"Uploaded\"}\n                      </div>\n                      <div className=\"flex items-center justify-center gap-2 text-xs\">\n                        <span className=\"bg-green-100 text-green-800 px-2 py-1 rounded\">\n                          {getFileExtension(document.fileName || document.filePath || \"\")}\n                        </span>\n                        <span>{formatFileSize(document.fileSize)}</span>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2 justify-center\">\n                      {document.filePath && (\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            const fileName =\n                              document.fileName ||\n                              document.filePath?.split(\"/\").pop() ||\n                              \"Document\";\n                            const isPDF =\n                              document.filePath.toLowerCase().includes(\".pdf\") ||\n                              fileName.toLowerCase().endsWith(\".pdf\");\n\n                            if (isPDF) {\n                              setPdfViewer({\n                                isOpen: true,\n                                fileUrl: document.filePath,\n                                fileName,\n                              });\n                            } else {\n                              window.open(document.filePath, \"_blank\");\n                            }\n                          }}\n                          data-testid={`button-view-${docType.id}`}\n                        >\n                          View\n                        </Button>\n                      )}\n                    </div>\n                    <div className=\"text-xs\">✓ Successfully uploaded</div>\n                  </div>\n                ) : isUploading ? (\n                  <div className=\"text-sm text-blue-600\">Uploading...</div>\n                ) : (\n                  <div className=\"text-xs text-gray-500 text-center\">\n                    Drag & drop or click to upload\n                    <br />\n                    PDF (max 10MB)\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n        <h5 className=\"font-medium text-blue-900 mb-2\">Upload Guidelines</h5>\n        <ul className=\"text-sm text-blue-800 space-y-1\">\n          <li>• Ensure all documents are clear and legible</li>\n          <li>• Documents should be in PDF format</li>\n          <li>• Maximum file size is 10MB per document</li>\n          <li>• All required documents (*) must be uploaded to proceed</li>\n        </ul>\n      </div>\n    </div>\n  );\n\n    default:\n      return <p>No step found</p>;\n  }\n})()}\n\n{/* ---------------- Submit Button ---------------- */}\n    <div className=\"flex justify-end\">\n      <Button type=\"submit\" disabled={isLoading || step === 8}>\n        {isLoading ? \"Saving...\" : \"Save & Continue\"}\n      </Button>\n    </div>\n      </form>\n\n      <EmployeeVerificationDialog\n        open={showEmployeeVerification}\n        onOpenChange={setShowEmployeeVerification}\n        applicantIdNumber={form.getValues(\"nationalId\") || \"\"}\n        onVerificationSuccess={handleEmployeeVerificationSuccess}\n      />\n      \n      <PDFViewer\n        isOpen={pdfViewer.isOpen}\n        onClose={() => setPdfViewer({ isOpen: false, fileUrl: '', fileName: '' })}\n        fileUrl={pdfViewer.fileUrl}\n        fileName={pdfViewer.fileName}\n      />\n    </>\n  );\n}","size_bytes":53862},"client/src/components/applicant/ProgressIndicator.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { CheckCircle, Circle, Clock } from \"lucide-react\";\n\ninterface Step {\n  id: number;\n  name: string;\n  required: boolean;\n  completed: boolean;\n  conditional?: boolean;\n}\n\ninterface ProgressIndicatorProps {\n  steps: Step[];\n  currentStep: number;\n  completedSteps: number; // total number of completed steps\n}\n\nexport default function ProgressIndicator({\n  steps,\n  currentStep,\n  completedSteps,\n}: ProgressIndicatorProps) {\n  const totalSteps = steps.length;\n  const completionPercentage = (completedSteps / totalSteps) * 100;\n\n  const getStepStatus = (step: Step) => {\n    if (step.completed) return \"completed\";\n    if (step.id === currentStep) return \"current\";\n    return \"pending\";\n  };\n\n  const getStepIcon = (step: Step) => {\n    const status = getStepStatus(step);\n\n    switch (status) {\n      case \"completed\":\n        return <CheckCircle className=\"w-6 h-6 text-white\" />;\n      case \"current\":\n        return <Clock className=\"w-6 h-6 text-white\" />;\n      default:\n        return <Circle className=\"w-6 h-6 text-gray-400\" />;\n    }\n  };\n\n  const getStepClass = (step: Step) => {\n    const status = getStepStatus(step);\n    const baseClass =\n      \"w-10 h-10 rounded-full flex items-center justify-center border-2 transition-colors\";\n\n    switch (status) {\n      case \"completed\":\n        return `${baseClass} bg-secondary border-secondary`;\n      case \"current\":\n        return `${baseClass} bg-primary border-primary`;\n      default:\n        return `${baseClass} bg-gray-100 border-gray-300`;\n    }\n  };\n\n  const getTextClass = (step: Step) => {\n    const status = getStepStatus(step);\n\n    switch (status) {\n      case \"completed\":\n        return \"text-secondary font-medium\";\n      case \"current\":\n        return \"text-primary font-semibold\";\n      default:\n        return \"text-gray-500\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Overall Progress */}\n      <div>\n        <div className=\"flex items-center justify-between mb-2\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">\n            Profile Completion\n          </h3>\n          <span className=\"text-primary font-semibold\">\n            {Math.round(completionPercentage)}%\n          </span>\n        </div>\n        <Progress value={completionPercentage} className=\"h-3\" />\n        <p className=\"text-sm text-gray-600 mt-2\">\n          {completedSteps} of {totalSteps} steps completed\n        </p>\n      </div>\n\n      {/* Step Indicators */}\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium text-gray-900\">Steps to Complete</h4>\n\n        {/* Desktop View */}\n        <div className=\"hidden lg:block\">\n          <div className=\"flex items-center justify-between\">\n            {steps.map((step, index) => (\n              <div\n                key={step.id}\n                className=\"flex flex-col items-center relative\"\n              >\n                {/* Connection Line */}\n                {index < steps.length - 1 && (\n                  <div className=\"absolute top-5 left-10 w-full h-0.5 bg-gray-300 -z-10\">\n                    <div\n                      className=\"h-full bg-secondary transition-all duration-300\"\n                      style={{\n                        width:\n                          getStepStatus(step) === \"completed\" ? \"100%\" : \"0%\",\n                      }}\n                    />\n                  </div>\n                )}\n\n                {/* Step Circle */}\n                <div className={getStepClass(step)}>{getStepIcon(step)}</div>\n\n                {/* Step Label */}\n                <div className=\"mt-3 text-center max-w-24\">\n                  <p className={`text-sm ${getTextClass(step)}`}>\n                    {step.name}\n                  </p>\n                  {step.required && (\n                    <Badge variant=\"outline\" className=\"mt-1 text-xs\">\n                      Required\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Mobile View */}\n        <div className=\"lg:hidden space-y-3\">\n          {steps.map((step) => (\n            <div\n              key={step.id}\n              className=\"flex items-center space-x-4 p-3 rounded-lg border\"\n            >\n              <div className={getStepClass(step)}>{getStepIcon(step)}</div>\n\n              <div className=\"flex-1\">\n                <div className=\"flex items-center justify-between\">\n                  <p className={`font-medium ${getTextClass(step)}`}>\n                    {step.name}\n                  </p>\n                  {step.required && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      Required\n                    </Badge>\n                  )}\n                </div>\n\n                <p className=\"text-sm text-gray-500 mt-1\">\n                  Step {step.id} of {totalSteps}\n                  {getStepStatus(step) === \"completed\" && \" - Completed\"}\n                  {getStepStatus(step) === \"current\" && \" - In Progress\"}\n                  {getStepStatus(step) === \"pending\" && \" - Pending\"}\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Summary */}\n      <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n        <div className=\"flex items-start space-x-3\">\n          <CheckCircle className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n          <div>\n            <h4 className=\"font-medium text-blue-900\">\n              Profile Completion Tips\n            </h4>\n            <ul className=\"text-sm text-blue-800 mt-2 space-y-1\">\n              <li>• Complete all required steps to apply for jobs</li>\n              <li>• Your progress is automatically saved</li>\n              <li>• You can return to edit any step later</li>\n              <li>• Upload clear, readable documents</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6041},"client/src/components/common/LocationDropdowns.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n\ninterface LocationDropdownsProps {\n  onLocationChange: (location: {\n    countyId: number;\n    constituencyId: number;\n    wardId: number;\n  }) => void;\n  defaultValues?: {\n    countyId?: number;\n    constituencyId?: number;\n    wardId?: number;\n  };\n}\n\nexport default function LocationDropdowns({ onLocationChange, defaultValues }: LocationDropdownsProps) {\n  const [selectedCounty, setSelectedCounty] = useState<number | null>(defaultValues?.countyId || null);\n  const [selectedConstituency, setSelectedConstituency] = useState<number | null>(defaultValues?.constituencyId || null);\n  const [selectedWard, setSelectedWard] = useState<number | null>(defaultValues?.wardId || null);\n\n  // Fetch counties\n  const { data: counties = [] } = useQuery({\n    queryKey: ['/api/public/counties'],\n  });\n\n  // Fetch constituencies based on selected county\n  const { data: constituencies = [] } = useQuery({\n    queryKey: ['/api/public/constituencies', selectedCounty],\n    enabled: !!selectedCounty,\n  });\n\n  // Fetch wards based on selected constituency\n  const { data: wards = [] } = useQuery({\n    queryKey: ['/api/public/wards', selectedConstituency],\n    enabled: !!selectedConstituency,\n  });\n\n  // Update parent component when location changes\n  useEffect(() => {\n    if (selectedCounty && selectedConstituency && selectedWard) {\n      onLocationChange({\n        countyId: selectedCounty,\n        constituencyId: selectedConstituency,\n        wardId: selectedWard,\n      });\n    }\n  }, [selectedCounty, selectedConstituency, selectedWard, onLocationChange]);\n\n  const handleCountyChange = (value: string) => {\n    const countyId = parseInt(value);\n    setSelectedCounty(countyId);\n    setSelectedConstituency(null);\n    setSelectedWard(null);\n  };\n\n  const handleConstituencyChange = (value: string) => {\n    const constituencyId = parseInt(value);\n    setSelectedConstituency(constituencyId);\n    setSelectedWard(null);\n  };\n\n  const handleWardChange = (value: string) => {\n    const wardId = parseInt(value);\n    setSelectedWard(wardId);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <h4 className=\"font-medium text-gray-900\">Location Information</h4>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        {/* County Selection */}\n        <div>\n          <Label htmlFor=\"county\">County *</Label>\n          <Select value={selectedCounty?.toString() || ''} onValueChange={handleCountyChange}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select county\" />\n            </SelectTrigger>\n            <SelectContent>\n              {counties.map((county) => (\n                <SelectItem key={county.id} value={county.id.toString()}>\n                  {county.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          {!selectedCounty && (\n            <p className=\"text-sm text-red-600 mt-1\">County is required</p>\n          )}\n        </div>\n\n        {/* Constituency Selection */}\n        <div>\n          <Label htmlFor=\"constituency\">Constituency *</Label>\n          <Select \n            value={selectedConstituency?.toString() || ''} \n            onValueChange={handleConstituencyChange}\n            disabled={!selectedCounty}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder={selectedCounty ? \"Select constituency\" : \"Select county first\"} />\n            </SelectTrigger>\n            <SelectContent>\n              {constituencies.map((constituency) => (\n                <SelectItem key={constituency.id} value={constituency.id.toString()}>\n                  {constituency.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          {selectedCounty && !selectedConstituency && (\n            <p className=\"text-sm text-red-600 mt-1\">Constituency is required</p>\n          )}\n        </div>\n\n        {/* Ward Selection */}\n        <div>\n          <Label htmlFor=\"ward\">Ward *</Label>\n          <Select \n            value={selectedWard?.toString() || ''} \n            onValueChange={handleWardChange}\n            disabled={!selectedConstituency}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder={selectedConstituency ? \"Select ward\" : \"Select constituency first\"} />\n            </SelectTrigger>\n            <SelectContent>\n              {wards.map((ward) => (\n                <SelectItem key={ward.id} value={ward.id.toString()}>\n                  {ward.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          {selectedConstituency && !selectedWard && (\n            <p className=\"text-sm text-red-600 mt-1\">Ward is required</p>\n          )}\n        </div>\n      </div>\n\n      {/* Location Summary */}\n      {selectedCounty && selectedConstituency && selectedWard && (\n        <div className=\"p-3 bg-green-50 border border-green-200 rounded-lg\">\n          <p className=\"text-sm text-green-800\">\n            <strong>Selected Location:</strong>{' '}\n            {wards.find(w => w.id === selectedWard)?.name} Ward,{' '}\n            {constituencies.find(c => c.id === selectedConstituency)?.name} Constituency,{' '}\n            {counties.find(c => c.id === selectedCounty)?.name} County\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5562},"client/src/components/home/HeroCarousel.tsx":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport useEmblaCarousel from 'embla-carousel-react';\nimport { Button } from '@/components/ui/button';\nimport { Search, UserPlus, ChevronLeft, ChevronRight, Building, GraduationCap, Users, Award } from 'lucide-react';\n\nconst slides = [\n  {\n    id: 1,\n    title: \"Build Your Career in Public Service\",\n    subtitle: \"Join Trans Nzoia County Public Service Board - Where dedication meets opportunity in serving our community\",\n    bgGradient: \"from-[#1D523A] to-[#09CDE3]\",\n    icon: Building,\n    accent: \"#EEF200\"\n  },\n  {\n    id: 2,\n    title: \"Professional Development Excellence\",\n    subtitle: \"Advance your skills and expertise while making a meaningful impact in public administration and community service\",\n    bgGradient: \"from-[#09CDE3] to-[#1D523A]\",\n    icon: GraduationCap,\n    accent: \"#EEF200\"\n  },\n  {\n    id: 3,\n    title: \"Community-Centered Employment\",\n    subtitle: \"Be part of a team dedicated to improving lives and building stronger communities across Trans Nzoia County\",\n    bgGradient: \"from-[#EEF200]/80 via-[#09CDE3] to-[#1D523A]\",\n    icon: Users,\n    accent: \"#1D523A\"\n  },\n  {\n    id: 4,\n    title: \"Recognition & Growth Opportunities\",\n    subtitle: \"Pursue excellence in public service with clear career progression paths and recognition for outstanding performance\",\n    bgGradient: \"from-[#1D523A] via-[#09CDE3] to-[#EEF200]/80\",\n    icon: Award,\n    accent: \"#1D523A\"\n  }\n];\n\nexport default function HeroCarousel() {\n  const [emblaRef, emblaApi] = useEmblaCarousel({ \n    loop: true \n  });\n  const [selectedIndex, setSelectedIndex] = useState(0);\n\n  const scrollPrev = useCallback(() => {\n    if (emblaApi) emblaApi.scrollPrev();\n  }, [emblaApi]);\n\n  const scrollNext = useCallback(() => {\n    if (emblaApi) emblaApi.scrollNext();\n  }, [emblaApi]);\n\n  const scrollTo = useCallback((index: number) => {\n    if (emblaApi) emblaApi.scrollTo(index);\n  }, [emblaApi]);\n\n  const onSelect = useCallback(() => {\n    if (!emblaApi) return;\n    setSelectedIndex(emblaApi.selectedScrollSnap());\n  }, [emblaApi]);\n\n  useEffect(() => {\n    if (!emblaApi) return;\n    onSelect();\n    emblaApi.on('select', onSelect);\n    emblaApi.on('reInit', onSelect);\n\n    // Auto-play setup\n    const autoplay = setInterval(() => {\n      emblaApi.scrollNext();\n    }, 5000);\n\n    return () => {\n      clearInterval(autoplay);\n      emblaApi.off('select', onSelect);\n      emblaApi.off('reInit', onSelect);\n    };\n  }, [emblaApi, onSelect]);\n\n  return (\n    <section className=\"relative overflow-hidden\">\n      <div className=\"embla\" ref={emblaRef} data-testid=\"hero-carousel\">\n        <div className=\"embla__container flex\">\n          {slides.map((slide, index) => {\n            const IconComponent = slide.icon;\n            return (\n              <div key={slide.id} className=\"embla__slide flex-[0_0_100%] min-w-0\">\n                <div className={`relative bg-gradient-to-r ${slide.bgGradient} text-white min-h-[600px] flex items-center`}>\n                  {/* Background Pattern Overlay */}\n                  <div className=\"absolute inset-0 opacity-10\">\n                    <div className=\"absolute inset-0\" style={{\n                      backgroundImage: `radial-gradient(circle at 20% 80%, ${slide.accent}22 0%, transparent 50%), \n                                       radial-gradient(circle at 80% 20%, ${slide.accent}22 0%, transparent 50%),\n                                       radial-gradient(circle at 40% 40%, ${slide.accent}22 0%, transparent 50%)`,\n                    }}></div>\n                  </div>\n\n                  {/* Content */}\n                  <div className=\"relative max-w-7xl mx-auto px-4 py-20 sm:px-6 lg:px-8\">\n                    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n                      {/* Text Content */}\n                      <div className=\"text-center lg:text-left\">\n                        <div className=\"flex justify-center lg:justify-start mb-6\">\n                          <div \n                            className=\"w-20 h-20 rounded-full flex items-center justify-center shadow-lg\"\n                            style={{ backgroundColor: slide.accent }}\n                          >\n                            <IconComponent className=\"w-10 h-10\" style={{ color: slide.id === 3 || slide.id === 4 ? '#1D523A' : '#FFFFFF' }} />\n                          </div>\n                        </div>\n                        \n                        <h1 className=\"text-4xl md:text-6xl font-bold mb-6 leading-tight\">\n                          {slide.title}\n                        </h1>\n                        <p className=\"text-xl md:text-2xl mb-8 max-w-2xl opacity-90 leading-relaxed\">\n                          {slide.subtitle}\n                        </p>\n                        \n                        <div className=\"flex flex-col sm:flex-row gap-4 justify-center lg:justify-start\">\n                          <Button\n                            size=\"lg\"\n                            className=\"text-white shadow-lg hover:shadow-xl transition-all duration-300\"\n                            style={{ \n                              backgroundColor: slide.accent,\n                              color: slide.id === 3 || slide.id === 4 ? '#1D523A' : '#FFFFFF'\n                            }}\n                            data-testid=\"button-browse-jobs\"\n                          >\n                            <Search className=\"w-5 h-5 mr-2\" />\n                            Browse Jobs\n                          </Button>\n                          <Button\n                            size=\"lg\"\n                            variant=\"outline\"\n                            className=\"border-2 text-white hover:text-current shadow-lg hover:shadow-xl transition-all duration-300\"\n                            style={{ \n                              borderColor: slide.accent\n                            }}\n                            data-testid=\"button-apply-now\"\n                          >\n                            <UserPlus className=\"w-5 h-5 mr-2\" />\n                            Apply Now\n                          </Button>\n                        </div>\n                      </div>\n\n                      {/* Visual Element */}\n                      <div className=\"hidden lg:flex justify-center items-center\">\n                        <div className=\"relative\">\n                          {/* Decorative circles */}\n                          <div \n                            className=\"absolute -top-4 -left-4 w-24 h-24 rounded-full opacity-20\"\n                            style={{ backgroundColor: slide.accent }}\n                          ></div>\n                          <div \n                            className=\"absolute -bottom-4 -right-4 w-32 h-32 rounded-full opacity-15\"\n                            style={{ backgroundColor: slide.accent }}\n                          ></div>\n                          \n                          {/* Main icon display */}\n                          <div \n                            className=\"w-64 h-64 rounded-3xl flex items-center justify-center shadow-2xl backdrop-blur-sm border border-white/20\"\n                            style={{ backgroundColor: `${slide.accent}20` }}\n                          >\n                            <IconComponent \n                              className=\"w-32 h-32\" \n                              style={{ color: slide.accent === '#a4a70fff' ? '#1D523A' : slide.accent }}\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Navigation Arrows */}\n      <button\n        className=\"absolute left-4 top-1/2 -translate-y-1/2 w-12 h-12 bg-white/20 hover:bg-white/30 backdrop-blur-sm rounded-full flex items-center justify-center transition-all duration-200 z-10\"\n        onClick={scrollPrev}\n        data-testid=\"carousel-prev\"\n        style={{ color: '#762364ff' }}\n      >\n        <ChevronLeft className=\"w-6 h-6\" />\n      </button>\n      \n      <button\n        className=\"absolute right-4 top-1/2 -translate-y-1/2 w-12 h-12 bg-white/20 hover:bg-white/30 backdrop-blur-sm rounded-full flex items-center justify-center transition-all duration-200 z-10\"\n        onClick={scrollNext}\n        data-testid=\"carousel-next\"\n        style={{ color: '#2a5f81ff' }}\n      >\n        <ChevronRight className=\"w-6 h-6\" />\n      </button>\n\n      {/* Dots Indicator */}\n      <div className=\"absolute bottom-6 left-1/2 -translate-x-1/2 flex space-x-2 z-10\">\n        {slides.map((_, index) => (\n          <button\n            key={index}\n            className={`w-3 h-3 rounded-full transition-all duration-300 ${\n              index === selectedIndex \n                ? 'bg-[#EEF200] scale-125' \n                : 'bg-white/50 hover:bg-white/75'\n            }`}\n            onClick={() => scrollTo(index)}\n            data-testid={`carousel-dot-${index}`}\n          />\n        ))}\n      </div>\n    </section>\n  );\n}","size_bytes":9153},"client/src/components/job/JobCard.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { isUnauthorizedError } from '@/lib/authUtils';\nimport { usePublicConfig } from \"@/hooks/usePublicConfig\";\nimport { useAuth } from '@/hooks/useAuth';\nimport DOMPurify from 'dompurify';\nimport { \n  Calendar, \n  GraduationCap, \n  MapPin, \n  Building, \n  Clock, \n  Users,\n  CheckCircle,\n  AlertCircle,\n  X\n} from 'lucide-react';\n\ninterface JobCardProps {\n  job: any;\n  isAuthenticated: boolean;\n}\n\nexport default function JobCard({ job, isAuthenticated }: JobCardProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showDetails, setShowDetails] = useState(false);\n  const { data: config } = usePublicConfig();\n  const { user } = useAuth();\n  \n  // Get applicant's education records to check eligibility\n  const { data: applicantProfile } = useQuery({\n    queryKey: ['/api/applicant/profile'],\n    enabled: isAuthenticated && user?.role === 'applicant'\n  }) as { data: { education?: any[] } | undefined };\n\n  const jobGroups = config?.jobGroups || [];\n  const departments = config?.departments || [];\n  const studyAreas = config?.studyAreas || [];\n  const certificateLevels = config?.certificateLevels || [];\n\n  const applyMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest('POST', '/api/applicant/apply', { jobId: job.id });\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Application Submitted',\n        description: 'Your application has been submitted successfully.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/applicant/applications'] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: 'Unauthorized',\n          description: 'You are logged out. Logging in again...',\n          variant: 'destructive',\n        });\n        setTimeout(() => {\n          window.location.href = '/';\n        }, 500);\n        return;\n      }\n      toast({\n        title: 'Application Failed',\n        description: error.message || 'Failed to submit application',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const formatDeadline = (deadline: string) => {\n    if (!deadline) return null;\n    const date = new Date(deadline);\n    const now = new Date();\n    const diffTime = date.getTime() - now.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays < 0) return { text: 'Expired', color: 'text-red-600' };\n    if (diffDays === 0) return { text: 'Today', color: 'text-red-600' };\n    if (diffDays === 1) return { text: 'Tomorrow', color: 'text-yellow-600' };\n    if (diffDays <= 7) return { text: `${diffDays} days left`, color: 'text-yellow-600' };\n    return { text: date.toLocaleDateString(), color: 'text-gray-600' };\n  };\n\n  // Get required qualifications for display\n  const getRequiredQualifications = () => {\n    const qualifications = {\n      studyAreas: null as string |null,\n      certificateLevel: null as string | null,\n    };\n    \n    // Parse required courses from varchar \n    if (job.requiredStudyAreaId) {\n      const sAreaId = studyAreas.find((sa: any) => sa.id === job.requiredStudyAreaId);\n      if (sAreaId) {\n        qualifications.studyAreas = sAreaId.name;\n      }\n    }\n    \n    // Add certificate level requirement\n    if (job.certificateLevel) {\n      const certLevel = certificateLevels.find((c: any) => c.id === job.certificateLevel);\n      if (certLevel) {\n        qualifications.certificateLevel = certLevel.name;\n      }\n    }\n    \n    return qualifications;\n  };\n  \n  const requiredQualifications = getRequiredQualifications();\n  const hasRequirements = requiredQualifications.studyAreas || \n                          requiredQualifications.certificateLevel;\n\n  // Check if applicant is eligible based on education requirements\n  const isEligible = () => {\n    const sAreaId = studyAreas.find((sa: any) => sa.id === job.requiredStudyAreaId);\n    const certLevel = certificateLevels.find((c: any) => c.id === job.certificateLevel);\n    if (!isAuthenticated) {\n      return false; // Must be authenticated\n    }\n    \n    // If no specific requirements, allow application for authenticated users\n    if (!job.requiredStudyAreaId && !job.certificateLevel) {\n      return true;\n    }\n    \n    // If requirements exist but no education records, not eligible\n    if (!applicantProfile?.education || applicantProfile.education.length === 0) {\n      return false;\n    } \n    // If requirements exist and education records, eligible\n    if (sAreaId && certLevel) {      \n      return true;      \n    }\n    \n  };\n  \n  const handleApply = () => {\n    if (!isAuthenticated) {\n      toast({\n        title: 'Authentication Required',\n        description: 'Please log in to apply for this position.',\n        variant: 'destructive',\n      });\n      return;\n    }\n    \n    if (!isEligible()) {\n      toast({\n        title: 'Application Not Eligible',\n        description: 'You do not meet the required education qualifications for this position.',\n        variant: 'destructive',\n      });\n      return;\n    }\n    \n    applyMutation.mutate();\n  };\n  \n  // Format and sanitize text with proper roman numerals and formatting\n  const formatJobText = (text: string | null | undefined) => {\n    if (!text) return '';\n    \n    // Replace roman numerals with proper formatting\n    let formatted = text\n      .replace(/\\b(i{1,3}|iv|v|vi{0,3}|ix|x)\\./gi, (match) => \n        `${match.toUpperCase()}`\n      )\n      // Handle common formatting patterns\n      .replace(/\\n/g, '<br>')\n      .replace(/\\r\\n/g, '<br>')\n      // Ensure proper spacing around periods\n      .replace(/\\.(\\S)/g, '. $1');\n    \n    // Sanitize HTML to prevent XSS attacks\n    return DOMPurify.sanitize(formatted, {\n      ALLOWED_TAGS: ['br', 'p', 'strong', 'em', 'u', 'ol', 'ul', 'li'],\n      ALLOWED_ATTR: []\n    });\n  };\n\n  const deadline = formatDeadline(job.endDate);\n  const isExpired = deadline?.color === 'text-red-600' && deadline?.text === 'Expired';\n\n  return (\n    <>\n      <Card className=\"hover:shadow-md transition-shadow border border-gray-200\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-start justify-between mb-4\">\n            <div className=\"flex-1\">\n              <h3 className=\"font-semibold text-gray-900 mb-2 line-clamp-2\">{job.title}</h3>\n              <div className=\"flex items-center text-gray-600 text-sm mb-1\">\n                <Building className=\"w-4 h-4 mr-2\" />\n                <span>{departments.find(dept => dept.id === job.departmentId)?.name || 'Department not specified'}</span>\n              </div>\n              <div className=\"flex items-center text-primary font-medium text-sm\">\n                <Badge variant=\"outline\" className=\"border-primary text-primary\">\n                  Job Group {jobGroups.find((d: any) => d.id === job.jg)?.name}\n                </Badge>\n              </div>\n            </div>\n            <div className=\"ml-4\">\n              {job.isActive ? (\n                <Badge className=\"bg-green-100 text-green-800\">Active</Badge>\n              ) : (\n                <Badge variant=\"secondary\">Closed</Badge>\n              )}\n            </div>\n          </div>\n\n          <div className=\"mb-4\">\n            <p className=\"text-gray-600 text-sm mb-3 line-clamp-3\">\n              {job.description || 'Job description not available. Click to view more details about this position.'}\n            </p>\n\n            <div className=\"space-y-2\">\n              <div className=\"flex items-start text-sm text-gray-600\">\n                <GraduationCap className=\"w-4 h-4 mr-2 mt-0.5 flex-shrink-0\" />\n                <div className=\"flex-1\">\n                  <div className=\"font-medium mb-1\">Required Qualifications:</div>\n                  {hasRequirements ? (\n                    <div className=\"space-y-2\">\n                      {/* Study Areas */}                      \n                      {requiredQualifications.studyAreas && (\n                        <div>\n                          <div className=\"text-xs font-medium text-gray-700 mb-1\">Courses:</div>\n                          <div className=\"flex items-center\">\n                            <CheckCircle className=\"w-3 h-3 mr-1 text-green-500 flex-shrink-0\" />\n                            <span className=\"text-xs font-medium text-green-600\">{requiredQualifications.studyAreas}</span>\n                          </div>\n                        </div>\n                      )}\n                      {/* Certificate Level  */}\n                      {requiredQualifications.certificateLevel && (\n                        <div>\n                          <div className=\"text-xs font-medium text-gray-700 mb-1\">Education:</div>\n                          <div className=\"flex items-center\">\n                            <CheckCircle className=\"w-3 h-3 mr-1 text-green-500 flex-shrink-0\" />\n                            <span className=\"text-xs font-medium text-green-600\">{requiredQualifications.certificateLevel}</span>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  ) : (\n                    <span className=\"text-xs text-gray-500\">General qualifications apply</span>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex items-center text-sm text-gray-500\">\n                <MapPin className=\"w-4 h-4 mr-2\" />\n                <span>Trans Nzoia County</span>\n              </div>\n\n              {deadline && (\n                <div className=\"flex items-center text-sm\">\n                  <Calendar className=\"w-4 h-4 mr-2\" />\n                  <span className={deadline.color}>\n                    Deadline: {deadline.text}\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <Dialog open={showDetails} onOpenChange={setShowDetails}>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-details-${job.id}`}>\n                  View Details\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-4xl max-h-[85vh] overflow-hidden flex flex-col\">\n                <DialogHeader className=\"flex-shrink-0\">\n                  <DialogTitle className=\"pr-6\">{job.title}</DialogTitle>\n                </DialogHeader>\n                <div className=\"flex-1 overflow-y-auto space-y-4 pr-2\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 mb-2\">Department</h4>\n                      <p className=\"text-gray-600\">{departments.find(dept => dept.id === job.departmentId)?.name}</p>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 mb-2\">Job Group</h4>\n                      <p className=\"text-gray-600\">{jobGroups.find((j: any) => j.id === job.jg)?.name}</p>\n                    </div>\n                  </div>\n                  \n                  {/* Required Qualifications Section */}\n                  {hasRequirements && (\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 mb-3\">Required Qualifications</h4>\n                      <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n                        <div className=\"flex items-center mb-3\">\n                          <GraduationCap className=\"w-5 h-5 mr-2 text-blue-600\" />\n                          <span className=\"font-medium text-blue-900\">Education Requirements</span>\n                        </div>\n                        \n                        <div className=\"space-y-4\">                          \n                          {/* Certificate Level */}\n                          {requiredQualifications.studyAreas && (\n                            <div>\n                              <div className=\"font-medium text-green-800 mb-2\">Course:</div>\n                              <div className=\"pl-3\">\n                                <div className=\"flex items-center text-sm text-green-700\">\n                                  <CheckCircle className=\"w-4 h-4 mr-2 text-green-500 flex-shrink-0\" />\n                                  <span className=\"font-medium\">{requiredQualifications.studyAreas}</span>\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                          {/* Certificate Level */}\n                          {requiredQualifications.certificateLevel && (\n                            <div>\n                              <div className=\"font-medium text-green-800 mb-2\">Education:</div>\n                              <div className=\"pl-3\">\n                                <div className=\"flex items-center text-sm text-green-700\">\n                                  <CheckCircle className=\"w-4 h-4 mr-2 text-green-500 flex-shrink-0\" />\n                                  <span className=\"font-medium\">{requiredQualifications.certificateLevel}</span>\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                        \n                        {isAuthenticated && !isEligible() && (\n                          <div className=\"mt-4 p-3 bg-yellow-100 border border-yellow-300 rounded text-sm text-yellow-800\">\n                            <AlertCircle className=\"w-4 h-4 inline mr-1\" />\n                            Your current qualifications may not meet these requirements.\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                  \n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 mb-2\">Job Description</h4>\n                    <div className=\"text-gray-600\" dangerouslySetInnerHTML={{\n                      __html: formatJobText(job.description) || 'Detailed job description will be provided upon application.'\n                    }} />\n                  </div>\n\n                  {job.requirements && (\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 mb-2\">Requirements</h4>\n                      <div className=\"text-gray-600\" dangerouslySetInnerHTML={{\n                        __html: formatJobText(typeof job.requirements === 'string' \n                          ? job.requirements \n                          : JSON.stringify(job.requirements, null, 2))\n                      }} />\n                    </div>\n                  )}\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 mb-2\">Application Deadline</h4>\n                      <p className=\"text-gray-600\">\n                        {deadline?.text || 'Open until filled'}\n                      </p>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 mb-2\">Status</h4>\n                      <Badge className={job.isActive ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}>\n                        {job.isActive ? 'Active' : 'Closed'}\n                      </Badge>\n                    </div>\n                  </div>\n\n                  <div className=\"pt-4 border-t flex-shrink-0\">\n                    {!isEligible() && isAuthenticated ? (\n                      <div className=\"mb-3 p-3 bg-yellow-50 border border-yellow-200 rounded-md\">\n                        <p className=\"text-sm text-yellow-800\">\n                          <AlertCircle className=\"w-4 h-4 inline mr-1\" />\n                          You do not meet the required education qualifications for this position.\n                        </p>\n                      </div>\n                    ) : null}\n                    <Button \n                      className=\"w-full\" \n                      onClick={handleApply}\n                      disabled={applyMutation.isPending || !job.isActive || isExpired || (isAuthenticated && !isEligible())}\n                      data-testid=\"button-apply-modal\"\n                    >\n                      {applyMutation.isPending ? 'Submitting...' : \n                       !job.isActive ? 'Position Closed' :\n                       isExpired ? 'Application Deadline Passed' :\n                       (isAuthenticated && !isEligible()) ? 'Not Eligible' :\n                       'Apply Now'}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n\n            <Button \n              onClick={handleApply}\n              disabled={applyMutation.isPending || !job.isActive || isExpired || (isAuthenticated && !isEligible())}\n              className=\"ml-2\"\n              data-testid={`button-apply-${job.id}`}\n            >\n              {applyMutation.isPending ? (\n                <>\n                  <Clock className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Applying...\n                </>\n              ) : !job.isActive ? (\n                <>\n                  <AlertCircle className=\"w-4 h-4 mr-2\" />\n                  Closed\n                </>\n              ) : isExpired ? (\n                <>\n                  <AlertCircle className=\"w-4 h-4 mr-2\" />\n                  Expired\n                </>\n              ) : (isAuthenticated && !isEligible()) ? (\n                <>\n                  <X className=\"w-4 h-4 mr-2\" />\n                  Not Eligible\n                </>\n              ) : (\n                <>\n                  <CheckCircle className=\"w-4 h-4 mr-2\" />\n                  Apply Now\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </>\n  );\n}\n","size_bytes":18399},"client/src/components/layout/AuthDrawer.tsx":{"content":"import { useState, useRef } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useMutation } from '@tanstack/react-query';\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from '@/components/ui/sheet';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Separator } from '@/components/ui/separator';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Eye, EyeOff, Phone, Shield, Upload, User } from 'lucide-react';\nimport { useLocation } from \"wouter\";\nimport {\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n} from \"@/components/ui/drawer\";\nimport { Progress } from \"@/components/ui/progress\"; // ✅ import Progress bar\n\nconst loginSchema = z.object({\nemail: z.string().email('Invalid email address'),\npassword: z.string().min(6, 'Password must be at least 6 characters'),\nrememberMe: z.boolean().default(false),\n});\n\n\n// ------------------ Signup Schema ------------------ //\nconst signupSchema = z\n.object({\nfirstName: z.string().min(2, \"First name must be at least 2 characters\"),\nsurname: z.string().min(2, \"Last name must be at least 2 characters\"),\nemail: z.string().email(\"Invalid email address\"),\nphoneNumber: z.string().min(10, \"Phone number must be at least 10 digits\"),\nidPassportType: z\n.enum([\"national_id\", \"passport\", \"alien_id\"], {\nrequired_error: \"Please select ID/Passport type\",\n})\n.optional(),\nnationalId: z.string().min(5, \"ID/Passport number is required\"),\npassword: z\n.string()\n.min(8, \"Password must be at least 8 characters\")\n.regex(\n/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[\\W_]).{8,}$/,\n\"Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character\"\n),\nconfirmPassword: z.string(),\n// 🔄 Fix: allow File, null, or undefined\nprofilePhoto: z.custom<File | null>((val) => val === null || val instanceof File).optional(),\nagreeToTerms: z\n.boolean()\n.refine((val) => val === true, \"You must agree to the terms and conditions\"),\n})\n.refine((data) => data.password === data.confirmPassword, {\nmessage: \"Passwords don't match\",\npath: [\"confirmPassword\"],\n});\n\nfunction getPasswordStrength(password: string) {\n  let score = 0;\n  if (password.length >= 8) score++;\n  if (/[A-Z]/.test(password)) score++;\n  if (/[a-z]/.test(password)) score++;\n  if (/[0-9]/.test(password)) score++;\n  if (/[\\W_]/.test(password)) score++;\n\n  if (score <= 2) return { label: \"Weak\", value: 33, color: \"bg-red-500\" };\n  if (score === 3 || score === 4)\n    return { label: \"Medium\", value: 66, color: \"bg-yellow-500\" };\n  return { label: \"Strong\", value: 100, color: \"bg-green-600\" };\n}\nconst otpSchema = z.object({\n  phoneNumber: z.string().min(10, 'Phone number must be at least 10 digits'),\n  otp: z.string().length(6, 'OTP must be 6 digits'),\n});\ninterface AuthDrawerProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  mode: 'login' | 'signup';\n  onModeChange: (mode: 'login' | 'signup') => void;\n}\n\n\nexport default function AuthDrawer({ open, onOpenChange, mode, onModeChange }: AuthDrawerProps) {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showOtpStep, setShowOtpStep] = useState(false);\n  const [pendingPhoneNumber, setPendingPhoneNumber] = useState('');\n  const [profilePhoto, setProfilePhoto] = useState<File | null>(null);\n  const [photoPreview, setPhotoPreview] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n  const [,setLocation] = useLocation();\n\n  const loginForm = useForm({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n      rememberMe: false,\n    },\n  });\n  // 🟢 Types\ntype SignupData = z.infer<typeof signupSchema>;\n\n  type OtpData = z.infer<typeof otpSchema>;\n // --- Helper: refresh session ---\n  const refreshSession = async () => {\n    const data = await apiRequest(\"GET\", \"/api/auth/me\");\n    queryClient.setQueryData([\"/api/auth/me\"], data);\n    return data;\n  };\n  const [loading, setLoading] = useState(false);\n  const [passwordValue, setPasswordValue] = useState(\"\");\n  const signupForm = useForm({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      firstName: '',\n      surname: '',\n      email: '',\n      phoneNumber: '',\n      idPassportType: undefined,\n      nationalId: '',\n      password: '',\n      confirmPassword: '',\n      profilePhoto: undefined,\n      agreeToTerms: false,\n    },\n  });\n  \n  const otpForm = useForm({\n    resolver: zodResolver(otpSchema),\n    defaultValues: {\n      phoneNumber: '',\n      otp: '',\n    },\n  });\n  // --- Login Mutation ---\n  const loginMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof loginSchema>) => {\n      const res = await apiRequest('POST', '/api/auth/login', data);\n      return res;\n    },\n    onSuccess: async () => {\n        const data = await refreshSession();\n        const { user, redirectUrl } = data;\n      queryClient.setQueryData(['auth', 'me'], user);\n\n      toast({\n        title: 'Login Successful',\n        description: `Welcome, ${user?.firstName || 'user'}!`,\n      });\n      if (redirectUrl) {\n        setLocation(redirectUrl);\n      }\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Login Failed',\n        description: error.message || 'Login failed.',\n        variant: 'destructive',\n      });\n    },\n  });\n // --- Signup Mutation ---\n  const signupMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      const res = await fetch(\"/api/auth/signup\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n      if (!res.ok) throw new Error(await res.text());\n      return res.json();\n    },\n    onSuccess: (data) => {\n      const { user } = data;\n\n      // ✅ save phone for OTP step\n      setPendingPhoneNumber(user.phoneNumber);\n\n      toast({\n        title: \"Account Created\",\n        description: \"Please verify your phone number with the OTP we sent.\",\n      });\n\n      // ✅ send OTP automatically\n      if (user.phoneNumber) {\n        sendOtpMutation.mutate(user.phoneNumber);\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Signup Failed\",\n        description: error.message || \"Signup failed.\",\n        variant: \"destructive\",\n      });\n      console.log('Error Signing up', error)\n    },\n  });\n\n  // --- Send OTP Mutation ---\n  const sendOtpMutation = useMutation({\n    mutationFn: async (phoneNumber: string) => {\n      return await apiRequest(\"POST\", \"/api/auth/send-otp\", { phoneNumber });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"OTP Sent\",\n        description: \"Check your phone for the verification code.\",\n      });\n      setShowOtpStep(true);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Send OTP\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\nconst handleSendOtp = () => {\n    if (pendingPhoneNumber) {\n      sendOtpMutation.mutate(pendingPhoneNumber);\n    }\n  };\n  // --- Verify OTP Mutation ---\n  const verifyOtpMutation = useMutation({\n    mutationFn: async (data: OtpData) => {\n      return await apiRequest(\"POST\", \"/api/auth/verify-otp\", data);\n    },\n    onSuccess: async () => {\n      toast({\n        title: \"Phone Verified\",\n        description: \"Your phone number has been verified successfully.\",\n      });\n\n      // ✅ now login\n      const data = await refreshSession();\n      const { user, redirectUrl } = data;\n      queryClient.setQueryData([\"auth\", \"me\"], user);\n\n      if (redirectUrl) {\n        window.location.href = redirectUrl;\n      } else {\n        window.location.href = \"/\";\n      }\n\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Verification Failed\",\n        description: error.message || \"Invalid OTP code\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // --- Handlers ---\n  const handleSignup = (data: SignupData) => {\n    const formData = new FormData();\n    formData.append(\"firstName\", data.firstName);\n    formData.append(\"surname\", data.surname);\n    formData.append(\"email\", data.email);\n    formData.append(\"password\", data.password);\n    formData.append(\"phoneNumber\", data.phoneNumber);\n    formData.append(\"idPassportType\", data?.idPassportType ?? \"\");\n    formData.append(\"nationalId\", data.nationalId);\n\n    if (profilePhoto) {\n      formData.append(\"profilePhoto\", profilePhoto);\n    }\n\n    signupMutation.mutate(formData);\n  };\n\nconst handleOtpVerification = (data: z.infer<typeof otpSchema>) => {\n  if (!pendingPhoneNumber) {\n    toast({\n      title: \"Missing Phone\",\n      description: \"We couldn't find your phone number. Please sign up again.\",\n      variant: \"destructive\",\n    });\n    return;\n  }\n\n  verifyOtpMutation.mutate({\n    otp: data.otp,\n    phoneNumber: pendingPhoneNumber,\n  });\n};\n\n  const handleLogin = (data: z.infer<typeof loginSchema>) => loginMutation.mutate(data);\n\n  const handlePhotoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n  const file = event.target.files?.[0] ?? null;\n  if (file) {\n    // Validate file type\n    const validTypes = ['image/jpeg', 'image/jpg', 'image/png'];\n    if (!validTypes.includes(file.type)) {\n      toast({\n        title: 'Invalid File Type',\n        description: 'Please select a JPEG or PNG image file.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    // Validate file size (max 5MB)\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: 'File Too Large',\n        description: 'Please select an image under 5MB.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setProfilePhoto(file);\n    signupForm.setValue('profilePhoto', file as any);\n\n    // Create preview\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      setPhotoPreview(e.target?.result as string);\n    };\n    reader.readAsDataURL(file);\n  } else {\n    // Explicitly set null when no file\n    signupForm.setValue('profilePhoto', null as any);\n  }\n};\n\n  const removePhoto = () => {\n    setProfilePhoto(null);\n    setPhotoPreview(null);\n    signupForm.setValue('profilePhoto', undefined);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };  \n  \n  const getIdPassportLabel = (type: string) => {\n    switch (type) {\n      case 'national_id': return 'National ID';\n      case 'passport': return 'Passport';\n      case 'alien_id': return 'Alien ID';\n      default: return 'Select type';\n    }\n  };\n\n  const handlePhoneLogin = () => {\n    window.location.href = '/';\n  };\nconst strength = getPasswordStrength(passwordValue);\n  return (\n    <Sheet open={open} onOpenChange={onOpenChange}>\n      <SheetContent side=\"right\" className=\"w-full max-w-md flex flex-col h-full\">\n        <SheetHeader className=\"flex-shrink-0\">\n          <SheetTitle>\n            {mode === 'login' ? 'Login to Your Account' : 'Create Your Account'}\n          </SheetTitle>\n        </SheetHeader>\n\n        <div className=\"flex-1 overflow-y-auto mt-6 pr-2 pb-4\">\n          {mode === 'login' ? (\n            <div>\n              <p className=\"text-gray-600 mb-6\">Welcome back! Please sign in to continue.</p>\n              \n              <form onSubmit={loginForm.handleSubmit(handleLogin)} className=\"space-y-4 max-h-none\">\n                <div>\n                  <Label htmlFor=\"email\">Email Address</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    {...loginForm.register('email')}\n                  />\n                  {loginForm.formState.errors.email && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {loginForm.formState.errors.email.message}\n                    </p>\n                  )}\n                </div>\n\n                  {/* Password Field with Strength Meter */}\n                  <div>\n                    <Label htmlFor=\"password\">Password</Label>\n                    <Input\n                      id=\"password\"\n                      data-testid=\"input-password\"\n                      type=\"password\"\n                      placeholder=\"Create password\"\n                      {...loginForm.register(\"password\")}\n                      onChange={(e) => {\n                        loginForm.setValue(\"password\", e.target.value);\n                        setPasswordValue(e.target.value);\n                      }}\n                    />\n\n                    {/* Strength Meter */}\n                    {passwordValue && (\n                      <div className=\"mt-2\">\n                        <Progress value={strength.value} className=\"h-2\" />\n                        <p\n                          className={`text-xs mt-1 font-medium ${\n                            strength.label === \"Weak\"\n                              ? \"text-red-600\"\n                              : strength.label === \"Medium\"\n                              ? \"text-yellow-600\"\n                              : \"text-green-600\"\n                          }`}\n                        >\n                          {strength.label} password\n                        </p>\n                      </div>\n                    )}\n\n                    {loginForm.formState.errors.password && (\n                      <p className=\"text-sm text-red-600 mt-1\">\n                        {loginForm.formState.errors.password.message}\n                      </p>\n                    )}\n                  </div>\n\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"rememberMe\"\n                      {...loginForm.register('rememberMe')}\n                    />\n                    <Label htmlFor=\"rememberMe\" className=\"text-sm\">\n                      Remember me\n                    </Label>\n                  </div>\n                  <Button variant=\"link\" className=\"text-sm p-0\">\n                    Forgot password?\n                  </Button>\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={loginMutation.isPending}\n                >\n                  {loginMutation.isPending ? 'Signing in...' : 'Sign In'}\n                </Button>\n              </form>\n\n              <div className=\"mt-6\">\n                <div className=\"relative\">\n                  <div className=\"absolute inset-0 flex items-center\">\n                    <Separator />\n                  </div>\n                  <div className=\"relative flex justify-center text-sm\">\n                    <span className=\"px-2 bg-white text-gray-500\">Or login with</span>\n                  </div>\n                </div>\n\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full mt-4\"\n                  onClick={handlePhoneLogin}\n                >\n                  <Phone className=\"w-4 h-4 mr-2\" />\n                  Phone + OTP\n                </Button>\n              </div>\n\n              <div className=\"mt-6 text-center\">\n                <p className=\"text-gray-600\">\n                  Don't have an account?{' '}\n                  <Button\n                    variant=\"link\"\n                    className=\"p-0 font-medium text-primary\"\n                    onClick={() => onModeChange('signup')}\n                  >\n                    Sign up\n                  </Button>\n                </p>\n              </div>\n            </div>\n          ) : (\n            <div>\n              <p className=\"text-gray-600 mb-6\">Create your account to start applying for jobs.</p>\n              \n{!showOtpStep ? (\n                <form onSubmit={signupForm.handleSubmit(handleSignup)} className=\"space-y-4 max-h-none\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"firstName\">First Name</Label>\n                      <Input\n                        id=\"firstName\"\n                        data-testid=\"input-firstName\"\n                        placeholder=\"First name\"\n                        {...signupForm.register('firstName')}\n                      />\n                      {signupForm.formState.errors.firstName && (\n                        <p className=\"text-sm text-red-600 mt-1\">\n                          {signupForm.formState.errors.firstName.message}\n                        </p>\n                      )}\n                    </div>\n                    <div>\n                      <Label htmlFor=\"surname\">Last Name</Label>\n                      <Input\n                        id=\"surname\"\n                        data-testid=\"input-surname\"\n                        placeholder=\"Last Name\"\n                        {...signupForm.register('surname')}\n                      />\n                      {signupForm.formState.errors.surname && (\n                        <p className=\"text-sm text-red-600 mt-1\">\n                          {signupForm.formState.errors.surname.message}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <Input\n                      id=\"email\"\n                      data-testid=\"input-email\"\n                      type=\"email\"\n                      placeholder=\"Enter your email\"\n                      {...signupForm.register('email')}\n                    />\n                    {signupForm.formState.errors.email && (\n                      <p className=\"text-sm text-red-600 mt-1\">\n                        {signupForm.formState.errors.email.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"phoneNumber\">Phone Number</Label>\n                    <Input\n                      id=\"phoneNumber\"\n                      data-testid=\"input-phoneNumber\"\n                      type=\"tel\"\n                      placeholder=\"0711234567\"\n                      {...signupForm.register('phoneNumber')}\n                    />\n                    {signupForm.formState.errors.phoneNumber && (\n                      <p className=\"text-sm text-red-600 mt-1\">\n                        {signupForm.formState.errors.phoneNumber.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"idPassportType\">ID/Passport Type</Label>\n                      <Select\n                        {...signupForm.register('idPassportType')}\n                        onValueChange={(value) => signupForm.setValue('idPassportType', value as any)}\n                      >\n                        <SelectTrigger data-testid=\"select-idPassportType\">\n                          <SelectValue placeholder=\"Select type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"national_id\">National ID</SelectItem>\n                          <SelectItem value=\"passport\">Passport</SelectItem>\n                          <SelectItem value=\"alien_id\">Alien ID</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      {signupForm.formState.errors.idPassportType && (\n                        <p className=\"text-sm text-red-600 mt-1\">\n                          {signupForm.formState.errors.idPassportType.message}\n                        </p>\n                      )}\n                    </div>\n                    <div>\n                      <Label htmlFor=\"nationalId\">ID/Passport Number</Label>\n                      <Input\n                        id=\"nationalId\"\n                        data-testid=\"input-nationalId\"\n                        placeholder=\"Enter number\"\n                        {...signupForm.register('nationalId')}\n                      />\n                      {signupForm.formState.errors.nationalId && (\n                        <p className=\"text-sm text-red-600 mt-1\">\n                          {signupForm.formState.errors.nationalId.message}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                    <div>\n                    <Label htmlFor=\"password\">Password</Label>\n                    <Input\n                      id=\"password\"\n                      data-testid=\"input-password\"\n                      type=\"password\"\n                      placeholder=\"Create password\"\n                      {...signupForm.register(\"password\")}\n                      onChange={(e) => {\n                        signupForm.setValue(\"password\", e.target.value);\n                        setPasswordValue(e.target.value);\n                      }}\n                    />\n\n                    {/* Strength Meter */}\n                    {passwordValue && (\n                      <div className=\"mt-2\">\n                        <Progress value={strength.value} className=\"h-2\" />\n                        <p\n                          className={`text-xs mt-1 font-medium ${\n                            strength.label === \"Weak\"\n                              ? \"text-red-600\"\n                              : strength.label === \"Medium\"\n                              ? \"text-yellow-600\"\n                              : \"text-green-600\"\n                          }`}\n                        >\n                          {strength.label} password\n                        </p>\n                      </div>\n                    )}\n\n                    {signupForm.formState.errors.password && (\n                      <p className=\"text-sm text-red-600 mt-1\">\n                        {signupForm.formState.errors.password.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                    <Input\n                      id=\"confirmPassword\"\n                      data-testid=\"input-confirmPassword\"\n                      type=\"password\"\n                      placeholder=\"Confirm password\"\n                      {...signupForm.register('confirmPassword')}\n                    />\n                    {signupForm.formState.errors.confirmPassword && (\n                      <p className=\"text-sm text-red-600 mt-1\">\n                        {signupForm.formState.errors.confirmPassword.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Profile Photo Upload */}\n                  <div>\n                    <Label htmlFor=\"profilePhoto\">Profile Photo</Label>\n                    <p className=\"text-xs text-gray-600 mb-2\">\n                      Upload a passport-size photo where your face is clearly visible. \n                      No inappropriate content allowed. (JPEG/PNG, max 5MB)\n                    </p>\n                    <div className=\"flex items-center space-x-4\">\n                      <Avatar className=\"w-20 h-20\">\n                        {photoPreview ? (\n                          <AvatarImage src={photoPreview} alt=\"Profile preview\" />\n                        ) : (\n                          <AvatarFallback>\n                            <User className=\"w-8 h-8\" />\n                          </AvatarFallback>\n                        )}\n                      </Avatar>\n                      <div className=\"flex flex-col space-y-2\">\n                        <input\n                          ref={fileInputRef}\n                          type=\"file\"\n                          accept=\"image/jpeg,image/jpg,image/png\"\n                          onChange={handlePhotoUpload}\n                          className=\"hidden\"\n                          id=\"profilePhoto\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => fileInputRef.current?.click()}\n                          data-testid=\"button-uploadPhoto\"\n                        >\n                          <Upload className=\"w-4 h-4 mr-2\" />\n                          Upload Photo\n                        </Button>\n                        {profilePhoto && (\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={removePhoto}\n                            data-testid=\"button-removePhoto\"\n                          >\n                            Remove Photo\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                    {signupForm.formState.errors.profilePhoto && (\n                      <p className=\"text-sm text-red-600 mt-1\">\n                        {signupForm.formState.errors.profilePhoto.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"flex items-start space-x-2\">\n                    <Checkbox\n                      id=\"agreeToTerms\"\n                      data-testid=\"checkbox-agreeToTerms\"\n                      checked={signupForm.watch('agreeToTerms')}\n                      onCheckedChange={(checked) => {\n                        signupForm.setValue('agreeToTerms', !!checked);\n                      }}\n                    />\n                    <Label htmlFor=\"agreeToTerms\" className=\"text-sm leading-relaxed\">\n                      I agree to the{' '}\n                      <Button variant=\"link\" className=\"p-0 h-auto text-primary underline\">\n                        Terms and Conditions\n                      </Button>\n                      {' '}and confirm that my uploaded photo is appropriate, passport-sized, \n                      and clearly shows my face.\n                    </Label>\n                  </div>\n                  {signupForm.formState.errors.agreeToTerms && (\n                    <p className=\"text-sm text-red-600\">\n                      {signupForm.formState.errors.agreeToTerms.message}\n                    </p>\n                  )}\n\n                  <Button\n                    type=\"submit\"\n                    data-testid=\"button-sendOtp\"\n                    className=\"w-full\"\n                    disabled={signupMutation.isPending || sendOtpMutation.isPending}\n                  >\n                    {signupMutation.isPending || sendOtpMutation.isPending ? 'Sending OTP...' : 'Send Verification Code'}\n                  </Button>\n                </form>\n              ) : (\n                <div className=\"space-y-4\">\n                  <div className=\"text-center\">\n                    <Shield className=\"w-12 h-12 mx-auto text-primary mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">Verify Your Phone</h3>\n                    <p className=\"text-gray-600 text-sm\">\n                      We've sent a 6-digit code to {pendingPhoneNumber}\n                    </p>\n                  </div>\n                  \n                  <form onSubmit={otpForm.handleSubmit(handleOtpVerification)} className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"otp\">Verification Code</Label>\n                      <Input\n                        id=\"otp\"\n                        data-testid=\"input-otp\"\n                        type=\"text\"\n                        placeholder=\"Enter 6-digit code\"\n                        maxLength={6}\n                        {...otpForm.register('otp')}\n                      />\n                      {otpForm.formState.errors.otp && (\n                        <p className=\"text-sm text-red-600 mt-1\">\n                          {otpForm.formState.errors.otp.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      data-testid=\"button-verifyOtp\"\n                      className=\"w-full\"\n                      disabled={verifyOtpMutation.isPending}\n                    >\n                      {verifyOtpMutation.isPending ? 'Verifying...' : 'Verify & Continue'}\n                    </Button>\n                    \n                    <div className=\"text-center\">\n                      <Button\n                        type=\"button\"\n                        variant=\"link\"\n                        data-testid=\"button-resendOtp\"\n                        className=\"text-sm\"\n                        onClick={handleSendOtp}\n                        disabled={sendOtpMutation.isPending}\n                      >\n                        {sendOtpMutation.isPending ? 'Sending...' : 'Resend Code'}\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant=\"link\"\n                        className=\"text-sm ml-4\"\n                        onClick={() => setShowOtpStep(false)}\n                      >\n                        Change Phone Number\n                      </Button>\n                    </div>\n                  </form>\n                </div>\n              )}\n\n              <div className=\"mt-6 text-center\">\n                <p className=\"text-gray-600\">\n                  Already have an account?{' '}\n                  <Button\n                    variant=\"link\"\n                    className=\"p-0 font-medium text-primary\"\n                    onClick={() => onModeChange('login')}\n                  >\n                    Sign in\n                  </Button>\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n}\n","size_bytes":30336},"client/src/components/layout/Navigation.tsx":{"content":"import { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Button } from '@/components/ui/button';\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Menu, Building, LogOut, User, Settings } from 'lucide-react';\nimport AuthDrawer from './AuthDrawer';\n\nexport default function Navigation() {\n  const [location] = useLocation();\n  const { user, isAuthenticated, logout } = useAuth();\n  const [showAuthDrawer, setShowAuthDrawer] = useState(false);\n  const [authMode, setAuthMode] = useState<'login' | 'signup'>('login');\n\n  const publicRoutes = [\n    { path: '/', label: 'Home' },\n    { path: '/about', label: 'About' },\n    { path: '/gallery', label: 'Gallery' },\n    { path: '/faqs', label: 'FAQs' },\n    { path: '/notices', label: 'Notices' },\n    { path: '/jobs', label: 'Jobs' },\n  ];\n\n  const handleAuthClick = (mode: 'login' | 'signup') => {\n    setAuthMode(mode);\n    setShowAuthDrawer(true);\n  };\n  \n  const handleLogout = () => {\n    logout();\n  };\n\n  const getUserInitials = () => {    \n    if (!user?.firstName && !user?.id) return 'U';\n    return `${user?.firstName || ''}${user?.lastName || ''}`.toUpperCase();\n  };\n\n  const getDashboardUrl = () => {\n    switch (user?.role) {\n      case 'applicant': return '/dashboard';\n      case 'admin': return '/admin';\n      case 'board': return '/board';\n      default: return '/';\n    }\n  };\n\n  return (\n    <>\n      <nav className=\"bg-white shadow-sm border-b border-gray-200 sticky top-0 z-40\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            {/* Logo */}\n            <Link href=\"/\" className=\"flex items-center space-x-4\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                <Building className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-lg font-semibold text-gray-900\">TNCPSB</h1>\n                <p className=\"text-xs text-gray-600\">Job Portal</p>\n              </div>\n            </Link>\n\n            {/* Desktop Navigation */}\n            <div className=\"hidden md:flex items-center space-x-8\">\n              {publicRoutes.map((route) => (\n                <Link\n                  key={route.path}\n                  href={route.path}\n                  className={`font-medium transition-colors ${\n                    location === route.path\n                      ? 'text-primary'\n                      : 'text-gray-700 hover:text-primary'\n                  }`}\n                >\n                  {route.label}\n                </Link>\n              ))}\n            </div>\n\n            {/* Auth Section */}\n            <div className=\"flex items-center space-x-4\">\n              {isAuthenticated ? (\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n                      <Avatar className=\"h-8 w-8\">\n                        <AvatarImage src={user?.profileImageUrl} alt={user?.firstName} />\n                        <AvatarFallback>{getUserInitials()}</AvatarFallback>\n                      </Avatar>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                    <div className=\"flex items-center justify-start gap-2 p-2\">\n                      <div className=\"flex flex-col space-y-1 leading-none\">\n                        <p className=\"font-medium\">{user?.firstName} {user?.lastName}</p>\n                        <p className=\"w-[200px] truncate text-sm text-muted-foreground\">\n                          {user?.email}\n                        </p>\n                      </div>\n                    </div>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem asChild>\n                      <Link href={getDashboardUrl()}>\n                        <User className=\"mr-2 h-4 w-4\" />\n                        Dashboard\n                      </Link>\n                    </DropdownMenuItem>\n                    {user?.role === 'applicant' && (\n                      <DropdownMenuItem asChild>\n                        <Link href=\"/profile\">\n                          <Settings className=\"mr-2 h-4 w-4\" />\n                          Profile\n                        </Link>\n                      </DropdownMenuItem>\n                    )}\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={handleLogout}>\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      Log out\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              ) : (\n                <>\n                  <Button \n                    onClick={() => handleAuthClick('login')}\n                    className=\"bg-primary hover:bg-blue-700\"\n                  >\n                    Login\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => handleAuthClick('signup')}\n                    className=\"border-primary text-primary hover:bg-blue-50\"\n                  >\n                    Sign Up\n                  </Button>\n                </>\n              )}\n\n              {/* Mobile menu */}\n              <Sheet>\n                <SheetTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\">\n                    <Menu className=\"h-5 w-5\" />\n                  </Button>\n                </SheetTrigger>\n                <SheetContent side=\"right\">\n                  <nav className=\"flex flex-col space-y-4 mt-8\">\n                    {publicRoutes.map((route) => (\n                      <Link\n                        key={route.path}\n                        href={route.path}\n                        className={`text-sm font-medium transition-colors ${\n                          location === route.path\n                            ? 'text-primary'\n                            : 'text-gray-700 hover:text-primary'\n                        }`}\n                      >\n                        {route.label}\n                      </Link>\n                    ))}\n                  </nav>\n                </SheetContent>\n              </Sheet>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      <AuthDrawer \n        open={showAuthDrawer} \n        onOpenChange={setShowAuthDrawer}\n        mode={authMode}\n        onModeChange={setAuthMode}\n      />\n    </>\n  );\n}","size_bytes":6933},"client/src/components/layout/Sidebar.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  LayoutDashboard, \n  User, \n  FileText, \n  Search, \n  Upload, \n  Settings,\n  Briefcase,\n  Users,\n  BarChart3,\n  Bell,\n  CheckCircle,\n  Calendar,\n  Award,\n  LogOut\n} from 'lucide-react';\nimport ProfileCompletion from '@/components/applicant/ProfileCompletion';\n\ninterface SidebarProps {\n  userRole: 'applicant' | 'admin' | 'board';\n}\n\nexport default function Sidebar({ userRole }: SidebarProps) {\n  const [location] = useLocation();\n  const { user } = useAuth();\n\n  const getUserInitials = () => {\n    if (!user?.firstName && !user?.lastName) return 'U';\n    return `${user?.firstName?.[0] || ''}${user?.lastName?.[0] || ''}`.toUpperCase();\n  };\n\n  const handleLogout = () => {\n    window.location.href = '/api/logout';\n  };\n\n  const applicantNavItems = [\n    { \n      href: '/dashboard', \n      icon: LayoutDashboard, \n      label: 'Dashboard', \n      description: 'Overview and stats' \n    },\n    { \n      href: '/profile', \n      icon: User, \n      label: 'Profile', \n      description: 'Complete your profile' \n    },\n    { \n      href: '/applications', \n      icon: FileText, \n      label: 'My Applications', \n      description: 'Track applications' \n    },\n    { \n      href: '/jobs', \n      icon: Search, \n      label: 'Browse Jobs', \n      description: 'Find opportunities' \n    },\n    { \n      href: '/documents', \n      icon: Upload, \n      label: 'Documents', \n      description: 'Upload certificates' \n    },\n  ];\n\n  const adminNavItems = [\n    { \n      href: '/admin', \n      icon: LayoutDashboard, \n      label: 'Dashboard', \n      description: 'Admin overview' \n    },\n    { \n      href: '/admin/jobs', \n      icon: Briefcase, \n      label: 'Job Management', \n      description: 'Create & manage jobs' \n    },\n    { \n      href: '/admin/applications', \n      icon: Users, \n      label: 'Applications', \n      description: 'Review applications' \n    },\n    { \n      href: '/admin/reports', \n      icon: BarChart3, \n      label: 'Reports', \n      description: 'Generate reports' \n    },\n    { \n      href: '/admin/notifications', \n      icon: Bell, \n      label: 'Notifications', \n      description: 'Send notifications' \n    },\n    { \n      href: '/admin/settings', \n      icon: Settings, \n      label: 'System Config', \n      description: 'System settings' \n    },\n  ];\n\n  const boardNavItems = [\n    { \n      href: '/board', \n      icon: LayoutDashboard, \n      label: 'Dashboard', \n      description: 'Committee overview' \n    },\n    { \n      href: '/board/shortlisting', \n      icon: CheckCircle, \n      label: 'Shortlisting', \n      description: 'Review & shortlist' \n    },\n    { \n      href: '/board/interviews', \n      icon: Calendar, \n      label: 'Interviews', \n      description: 'Schedule & conduct' \n    },\n    { \n      href: '/board/scoring', \n      icon: Award, \n      label: 'Scoring', \n      description: 'Interview assessment' \n    },\n    { \n      href: '/board/reports', \n      icon: BarChart3, \n      label: 'Reports', \n      description: 'Selection reports' \n    },\n  ];\n\n  const getNavItems = () => {\n    switch (userRole) {\n      case 'applicant':\n        return applicantNavItems;\n      case 'admin':\n        return adminNavItems;\n      case 'board':\n        return boardNavItems;\n      default:\n        return [];\n    }\n  };\n\n  const getRoleColor = () => {\n    switch (userRole) {\n      case 'applicant':\n        return 'bg-blue-100 text-blue-800';\n      case 'admin':\n        return 'bg-red-100 text-red-800';\n      case 'board':\n        return 'bg-green-100 text-green-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getRoleLabel = () => {\n    switch (userRole) {\n      case 'applicant':\n        return 'Applicant';\n      case 'admin':\n        return 'Administrator';\n      case 'board':\n        return 'Board Member';\n      default:\n        return 'User';\n    }\n  };\n\n  return (\n    <aside className=\"w-64 bg-white shadow-sm border-r border-gray-200 h-screen sticky top-0 flex flex-col\">\n      {/* User Profile Section */}\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex items-center space-x-3 mb-3\">\n          <Avatar className=\"h-10 w-10\">\n            <AvatarImage src={user?.profileImageUrl} alt={user?.firstName} />\n            <AvatarFallback className=\"bg-primary text-white\">\n              {getUserInitials()}\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"font-medium text-gray-900 truncate\">\n              {(user?.firstName || '').toUpperCase()} {user?.lastName || ''}\n            </p>\n            <p className=\"text-sm text-gray-600 truncate\">{user?.email}</p>\n          </div>\n        </div>\n        <Badge className={getRoleColor()}>{getRoleLabel()}</Badge>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 p-4 space-y-1 overflow-y-auto\">\n        {getNavItems().map((item) => {\n          const IconComponent = item.icon;\n          const isActive = location === item.href;\n          \n          return (\n            <Link key={item.href} href={item.href}>\n              <a\n                className={`flex items-center space-x-3 px-3 py-2.5 rounded-lg transition-colors group ${\n                  isActive\n                    ? userRole === 'applicant'\n                      ? 'bg-blue-50 text-primary border border-blue-200'\n                      : userRole === 'admin'\n                      ? 'bg-red-50 text-red-700 border border-red-200'\n                      : 'bg-green-50 text-green-700 border border-green-200'\n                    : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900'\n                }`}\n              >\n                <IconComponent className={`w-5 h-5 ${isActive ? 'opacity-100' : 'opacity-70 group-hover:opacity-100'}`} />\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"font-medium text-sm\">{item.label}</div>\n                  <div className=\"text-xs opacity-75 truncate\">{item.description}</div>\n                </div>\n              </a>\n            </Link>\n          );\n        })}\n      </nav>\n\n      {/* Footer */}\n      <div className=\"p-4 border-t border-gray-200\">\n        <Separator className=\"mb-4\" />\n        \n        {/* Quick Stats for Applicants */}\n        {userRole === 'applicant' && (\n          <ProfileCompletion />\n        )}\n\n        {/* System Status for Admins */}\n        {userRole === 'admin' && (\n          <div className=\"mb-4 p-3 bg-gray-50 rounded-lg\">\n            <div className=\"flex items-center justify-between text-xs\">\n              <span className=\"text-gray-700\">System Status</span>\n              <span className=\"flex items-center text-green-600\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full mr-1\"></div>\n                Online\n              </span>\n            </div>\n          </div>\n        )}\n\n        {/* Active Sessions for Board */}\n        {userRole === 'board' && (\n          <div className=\"mb-4 p-3 bg-gray-50 rounded-lg\">\n            <div className=\"flex items-center justify-between text-xs\">\n              <span className=\"text-gray-700\">Pending Reviews</span>\n              <Badge variant=\"secondary\" className=\"text-xs\">3</Badge>\n            </div>\n          </div>\n        )}\n\n        <Button\n          variant=\"ghost\"\n          className=\"w-full justify-start text-gray-700 hover:text-gray-900 hover:bg-gray-50\"\n          onClick={handleLogout}\n        >\n          <LogOut className=\"w-4 h-4 mr-2\" />\n          Sign Out\n        </Button>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":7856},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin/Applications.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport Navigation from '@/components/layout/Navigation';\nimport Sidebar from '@/components/layout/Sidebar';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { isUnauthorizedError } from '@/lib/authUtils';\nimport { \n  Search, \n  Filter, \n  Eye, \n  Download, \n  Mail, \n  Phone, \n  FileText,\n  CheckCircle,\n  XCircle,\n  Clock,\n  User\n} from 'lucide-react';\n\nexport default function AdminApplications() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [jobFilter, setJobFilter] = useState('all');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [selectedApplication, setSelectedApplication] = useState<any>(null);\n\n  const { data: applications = [], isLoading } = useQuery<any[]>({\n    queryKey: ['/api/admin/applications'],\n    enabled: !!user && user.role === 'admin',\n  });\n\n  const { data: jobs = [] } = useQuery<any[]>({\n    queryKey: ['/api/public/jobs'],\n  });\n\n  const updateApplicationMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      return await apiRequest('PUT', `/api/board/applications/${id}`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Application Updated',\n        description: 'Application status has been updated successfully.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/applications'] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: 'Unauthorized',\n          description: 'You are logged out. Logging in again...',\n          variant: 'destructive',\n        });\n        setTimeout(() => {\n          window.location.href = '/';\n        }, 500);\n        return;\n      }\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to update application',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'submitted':\n        return 'bg-blue-100 text-blue-800';\n      case 'shortlisted':\n        return 'bg-green-100 text-green-800';\n      case 'interviewed':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'rejected':\n        return 'bg-red-100 text-red-800';\n      case 'hired':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'submitted':\n        return <FileText className=\"w-4 h-4\" />;\n      case 'shortlisted':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case 'interviewed':\n        return <Clock className=\"w-4 h-4\" />;\n      case 'rejected':\n        return <XCircle className=\"w-4 h-4\" />;\n      case 'hired':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      default:\n        return <Clock className=\"w-4 h-4\" />;\n    }\n  };\n\n  const filteredApplications = applications.filter((app: any) => {\n    const matchesSearch = \n      app.applicant?.firstName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      app.applicant?.surname?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      app.job?.title?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesJob = jobFilter === 'all' || app.jobId?.toString() === jobFilter;\n    const matchesStatus = statusFilter === 'all' || app.status === statusFilter;\n    \n    return matchesSearch && matchesJob && matchesStatus;\n  });\n\n  const statusCounts = applications.reduce((acc: any, app: any) => {\n    acc[app.status] = (acc[app.status] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-neutral-50\">\n        <Navigation />\n        <div className=\"flex\">\n          <Sidebar userRole=\"admin\" />\n          <main className=\"flex-1 p-6\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n                {[...Array(4)].map((_, i) => (\n                  <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\n                ))}\n              </div>\n              <div className=\"h-64 bg-gray-200 rounded\"></div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar userRole=\"admin\" />\n        \n        <main className=\"flex-1 p-6\">\n          <div className=\"max-w-7xl mx-auto\">\n            {/* Header */}\n            <div className=\"mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Application Management</h1>\n              <p className=\"text-gray-600\">\n                Review and manage job applications from candidates.\n              </p>\n            </div>\n\n            {/* Application Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-5 gap-6 mb-8\">\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"text-3xl font-bold text-gray-900 mb-2\">\n                    {applications.length}\n                  </div>\n                  <div className=\"text-gray-600\">Total Applications</div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"text-3xl font-bold text-blue-600 mb-2\">\n                    {statusCounts.submitted || 0}\n                  </div>\n                  <div className=\"text-gray-600\">Submitted</div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"text-3xl font-bold text-green-600 mb-2\">\n                    {statusCounts.shortlisted || 0}\n                  </div>\n                  <div className=\"text-gray-600\">Shortlisted</div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"text-3xl font-bold text-yellow-600 mb-2\">\n                    {statusCounts.interviewed || 0}\n                  </div>\n                  <div className=\"text-gray-600\">Interviewed</div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"text-3xl font-bold text-purple-600 mb-2\">\n                    {statusCounts.hired || 0}\n                  </div>\n                  <div className=\"text-gray-600\">Hired</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Search and Filters */}\n            <Card className=\"mb-8\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex flex-col lg:flex-row gap-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                      <Input\n                        placeholder=\"Search by applicant name or job title...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"pl-10\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex gap-4\">\n                    <Select value={jobFilter} onValueChange={setJobFilter}>\n                      <SelectTrigger className=\"w-48\">\n                        <SelectValue placeholder=\"All Jobs\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Jobs</SelectItem>\n                        {jobs.map((job: any) => (\n                          <SelectItem key={job.id} value={job.id.toString()}>\n                            {job.title}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n\n                    <Select value={statusFilter} onValueChange={setStatusFilter}>\n                      <SelectTrigger className=\"w-40\">\n                        <SelectValue placeholder=\"All Status\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Status</SelectItem>\n                        <SelectItem value=\"submitted\">Submitted</SelectItem>\n                        <SelectItem value=\"shortlisted\">Shortlisted</SelectItem>\n                        <SelectItem value=\"interviewed\">Interviewed</SelectItem>\n                        <SelectItem value=\"rejected\">Rejected</SelectItem>\n                        <SelectItem value=\"hired\">Hired</SelectItem>\n                      </SelectContent>\n                    </Select>\n\n                    <Button variant=\"outline\">\n                      <Filter className=\"w-4 h-4 mr-2\" />\n                      Export\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Applications Table */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Applications ({filteredApplications.length})</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {filteredApplications.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <FileText className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n                      {applications.length === 0 ? 'No Applications Yet' : 'No Applications Found'}\n                    </h3>\n                    <p className=\"text-gray-600\">\n                      {applications.length === 0 \n                        ? 'Applications will appear here once candidates start applying.'\n                        : 'No applications match your current filters.'}\n                    </p>\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead>\n                        <tr className=\"border-b border-gray-200\">\n                          <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Applicant</th>\n                          <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Job Applied</th>\n                          <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Applied Date</th>\n                          <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Status</th>\n                          <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Actions</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {filteredApplications.map((application: any) => (\n                          <tr key={application.id} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                            <td className=\"py-3 px-4\">\n                              <div className=\"flex items-center space-x-3\">\n                                <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center text-white font-medium\">\n                                  {application.applicant?.firstName?.[0] || 'A'}\n                                  {application.applicant?.surname?.[0] || ''}\n                                </div>\n                                <div>\n                                  <div className=\"font-medium text-gray-900\">\n                                    {application.applicant?.firstName} {application.applicant?.surname}\n                                  </div>\n                                  <div className=\"text-sm text-gray-600\">\n                                    {application.applicant?.phoneNumber}\n                                  </div>\n                                </div>\n                              </div>\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              <div className=\"font-medium text-gray-900\">{application.job?.title}</div>\n                              <div className=\"text-sm text-gray-600\">\n                                {application.job?.department?.name}\n                              </div>\n                            </td>\n                            <td className=\"py-3 px-4 text-gray-600\">\n                              {application.submittedOn\n                                ? new Date(application.submittedOn).toLocaleDateString()\n                                : 'Draft'}\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              <Badge className={getStatusColor(application.status)}>\n                                <div className=\"flex items-center gap-1\">\n                                  {getStatusIcon(application.status)}\n                                  {application.status?.charAt(0).toUpperCase() + application.status?.slice(1)}\n                                </div>\n                              </Badge>\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              <div className=\"flex space-x-2\">\n                                <Dialog>\n                                  <DialogTrigger asChild>\n                                    <Button \n                                      variant=\"ghost\" \n                                      size=\"sm\"\n                                      onClick={() => setSelectedApplication(application)}\n                                    >\n                                      <Eye className=\"w-4 h-4\" />\n                                    </Button>\n                                  </DialogTrigger>\n                                  <DialogContent className=\"max-w-4xl\">\n                                    <DialogHeader>\n                                      <DialogTitle>\n                                        Application Details - {selectedApplication?.applicant?.firstName} {selectedApplication?.applicant?.surname}\n                                      </DialogTitle>\n                                    </DialogHeader>\n                                    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                                      <div>\n                                        <h4 className=\"font-semibold mb-3\">Applicant Information</h4>\n                                        <div className=\"space-y-2 text-sm\">\n                                          <div className=\"flex items-center gap-2\">\n                                            <User className=\"w-4 h-4 text-gray-400\" />\n                                            <span>{selectedApplication?.applicant?.firstName} {selectedApplication?.applicant?.surname}</span>\n                                          </div>\n                                          <div className=\"flex items-center gap-2\">\n                                            <Phone className=\"w-4 h-4 text-gray-400\" />\n                                            <span>{selectedApplication?.applicant?.phoneNumber}</span>\n                                          </div>\n                                          <div className=\"flex items-center gap-2\">\n                                            <Mail className=\"w-4 h-4 text-gray-400\" />\n                                            <span>{selectedApplication?.applicant?.user?.email}</span>\n                                          </div>\n                                        </div>\n                                      </div>\n                                      \n                                      <div>\n                                        <h4 className=\"font-semibold mb-3\">Job Information</h4>\n                                        <div className=\"space-y-2 text-sm\">\n                                          <p><strong>Position:</strong> {selectedApplication?.job?.title}</p>\n                                          <p><strong>Department:</strong> {selectedApplication?.job?.department?.name}</p>\n                                          <p><strong>Job Group:</strong> {selectedApplication?.job?.designation?.jobGroup}</p>\n                                          <p><strong>Applied Date:</strong> {selectedApplication?.submittedOn ? new Date(selectedApplication.submittedOn).toLocaleDateString() : 'Draft'}</p>\n                                        </div>\n                                      </div>\n                                    </div>\n                                    \n                                    {selectedApplication?.remarks && (\n                                      <div className=\"mt-4\">\n                                        <h4 className=\"font-semibold mb-2\">Remarks</h4>\n                                        <p className=\"text-sm text-gray-600\">{selectedApplication.remarks}</p>\n                                      </div>\n                                    )}\n                                  </DialogContent>\n                                </Dialog>\n                                \n                                <Button variant=\"ghost\" size=\"sm\">\n                                  <Download className=\"w-4 h-4\" />\n                                </Button>\n                                \n                                <Button variant=\"ghost\" size=\"sm\">\n                                  <Mail className=\"w-4 h-4\" />\n                                </Button>\n                              </div>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18842},"client/src/pages/admin/Dashboard.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useLocation } from 'wouter';\nimport Navigation from '@/components/layout/Navigation';\nimport Sidebar from '@/components/layout/Sidebar';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { \n  Briefcase, \n  Users, \n  Clock, \n  CheckCircle, \n  TrendingUp, \n  Calendar,\n  FileText,\n  UserCheck\n} from 'lucide-react';\n\nexport default function AdminDashboard() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  \n  const { data: jobs = [] } = useQuery({\n    queryKey: ['/api/public/jobs'],\n  });\n\n  const { data: applications = [] } = useQuery({\n    queryKey: ['/api/admin/applications'],\n    enabled: !!user && user.role === 'admin',\n  });\n\n  // Calculate statistics\n  const activeJobs = jobs.filter(job => job.isActive).length;\n  const totalApplications = applications.length;\n  const pendingApplications = applications.filter(app => app.status === 'submitted').length;\n  const shortlistedApplications = applications.filter(app => app.status === 'shortlisted').length;\n\n  // Recent activity data\n  const recentJobs = jobs.slice(0, 5);\n  const recentApplications = applications.slice(0, 5);\n\n  // Monthly stats (mock data for demonstration)\n  const monthlyStats = [\n    { month: 'Jan', applications: 45, hires: 12 },\n    { month: 'Feb', applications: 52, hires: 15 },\n    { month: 'Mar', applications: 38, hires: 8 },\n    { month: 'Apr', applications: 61, hires: 18 },\n    { month: 'May', applications: 44, hires: 11 },\n    { month: 'Jun', applications: 58, hires: 16 },\n  ];\n\n  // Navigation handlers for Quick Actions\n  const handlePostNewJob = () => {\n    setLocation('/admin/jobs');\n  };\n\n  const handleReviewApplications = () => {\n    setLocation('/admin/applications');\n  };\n\n  const handleScheduleInterviews = () => {\n    setLocation('/admin/applications?tab=interviews');\n  };\n\n  const handleGenerateReports = () => {\n    setLocation('/admin/reports');\n  };\n\n  const handleViewAllJobs = () => {\n    setLocation('/admin/jobs');\n  };\n\n  const handleViewAllApplications = () => {\n    setLocation('/admin/applications');\n  };\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar userRole=\"admin\" />\n        \n        <main className=\"flex-1 p-6\">\n          <div className=\"max-w-7xl mx-auto\">\n            {/* Header */}\n            <div className=\"mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                Admin Dashboard\n              </h1>\n              <p className=\"text-gray-600\">\n                Manage job postings, review applications, and oversee the recruitment process.\n              </p>\n            </div>\n\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-600 text-sm\">Active Jobs</p>\n                      <p className=\"text-3xl font-bold text-gray-900\">{activeJobs}</p>\n                      <p className=\"text-green-600 text-sm mt-1\">+3 this month</p>\n                    </div>\n                    <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                      <Briefcase className=\"w-6 h-6 text-primary\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-600 text-sm\">Total Applications</p>\n                      <p className=\"text-3xl font-bold text-gray-900\">{totalApplications}</p>\n                      <p className=\"text-green-600 text-sm mt-1\">+12% from last month</p>\n                    </div>\n                    <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                      <Users className=\"w-6 h-6 text-secondary\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-600 text-sm\">Pending Review</p>\n                      <p className=\"text-3xl font-bold text-gray-900\">{pendingApplications}</p>\n                      <p className=\"text-yellow-600 text-sm mt-1\">Requires attention</p>\n                    </div>\n                    <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                      <Clock className=\"w-6 h-6 text-yellow-600\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-600 text-sm\">Shortlisted</p>\n                      <p className=\"text-3xl font-bold text-gray-900\">{shortlistedApplications}</p>\n                      <p className=\"text-blue-600 text-sm mt-1\">Ready for interviews</p>\n                    </div>\n                    <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                      <CheckCircle className=\"w-6 h-6 text-purple-600\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Quick Actions */}\n            <Card className=\"mb-8\">\n              <CardHeader>\n                <CardTitle>Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                  <Button \n                    className=\"h-24 flex flex-col items-center justify-center\"\n                    onClick={handlePostNewJob}\n                  >\n                    <Briefcase className=\"w-6 h-6 mb-2\" />\n                    Post New Job\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"h-24 flex flex-col items-center justify-center\"\n                    onClick={handleReviewApplications}\n                  >\n                    <FileText className=\"w-6 h-6 mb-2\" />\n                    Review Applications\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"h-24 flex flex-col items-center justify-center\"\n                    onClick={handleScheduleInterviews}\n                  >\n                    <Calendar className=\"w-6 h-6 mb-2\" />\n                    Schedule Interviews\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"h-24 flex flex-col items-center justify-center\"\n                    onClick={handleGenerateReports}\n                  >\n                    <TrendingUp className=\"w-6 h-6 mb-2\" />\n                    Generate Reports\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {/* Recent Jobs */}\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Recent Job Postings</CardTitle>\n                    <Button variant=\"outline\" size=\"sm\" onClick={handleViewAllJobs}>\n                      View All\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {recentJobs.length === 0 ? (\n                    <p className=\"text-gray-500 text-center py-4\">No jobs posted yet</p>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {recentJobs.map((job) => (\n                        <div key={job.id} className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-medium text-gray-900\">{job.title}</h4>\n                            <p className=\"text-sm text-gray-600\">{job.department?.name}</p>\n                            <p className=\"text-xs text-gray-500\">\n                              Deadline: {job.endDate \n                                ? new Date(job.endDate).toLocaleDateString()\n                                : 'Open'}\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <Badge variant={job.isActive ? 'default' : 'secondary'}>\n                              {job.isActive ? 'Active' : 'Closed'}\n                            </Badge>\n                            <p className=\"text-sm text-gray-600 mt-1\">\n                              {applications.filter(app => app.jobId === job.id).length} applications\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Recent Applications */}\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Recent Applications</CardTitle>\n                    <Button variant=\"outline\" size=\"sm\" onClick={handleViewAllApplications}>\n                      View All\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {recentApplications.length === 0 ? (\n                    <p className=\"text-gray-500 text-center py-4\">No applications yet</p>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {recentApplications.map((application) => (\n                        <div key={application.id} className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-white text-sm font-medium\">\n                              {application.applicant?.firstName?.[0] || 'A'}\n                            </div>\n                            <div>\n                              <h4 className=\"font-medium text-gray-900\">\n                                {application.applicant?.firstName} {application.applicant?.surname}\n                              </h4>\n                              <p className=\"text-sm text-gray-600\">{application.job?.title}</p>\n                              <p className=\"text-xs text-gray-500\">\n                                {application.submittedOn\n                                  ? new Date(application.submittedOn).toLocaleDateString()\n                                  : 'Draft'}\n                              </p>\n                            </div>\n                          </div>\n                          <Badge className={`${getStatusColor(application.status)}`}>\n                            {application.status?.charAt(0).toUpperCase() + application.status?.slice(1)}\n                          </Badge>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Performance Overview */}\n            <Card className=\"mt-8\">\n              <CardHeader>\n                <CardTitle>Recruitment Performance</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Application Completion Rate</h4>\n                    <Progress value={85} className=\"mb-2\" />\n                    <p className=\"text-sm text-gray-600\">85% of applications are complete</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Time to Hire (Average)</h4>\n                    <div className=\"text-2xl font-bold text-primary mb-1\">24 days</div>\n                    <p className=\"text-sm text-gray-600\">3 days faster than last month</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Candidate Satisfaction</h4>\n                    <div className=\"text-2xl font-bold text-secondary mb-1\">4.2/5</div>\n                    <p className=\"text-sm text-gray-600\">Based on post-process surveys</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n\n  function getStatusColor(status: string) {\n    switch (status) {\n      case 'submitted':\n        return 'bg-blue-100 text-blue-800';\n      case 'shortlisted':\n        return 'bg-green-100 text-green-800';\n      case 'interviewed':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'rejected':\n        return 'bg-red-100 text-red-800';\n      case 'hired':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  }\n}\n","size_bytes":13924},"client/src/pages/admin/JobManagement.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport Navigation from '@/components/layout/Navigation';\nimport Sidebar from '@/components/layout/Sidebar';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Switch } from '@/components/ui/switch';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { isUnauthorizedError } from '@/lib/authUtils';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport type { Job, Department, Designation, CourseOffered, Jg,CertificateLevel,StudyArea as StudyAreas } from '@shared/schema';\nimport { Plus, Edit, Eye,Trash2, Upload,Calendar, Users,Search, Filter} from 'lucide-react';\n\nconst jobSchema = z\n  .object({\n    title: z.string().min(5, \"Job title must be at least 5 characters\"),\n    jg: z.string().min(1, \"Please select a job group\"),\n    posts: z.string().min(1, \"Please specify number of posts\"),\n    description: z.string().min(20, \"Description must be at least 20 characters\"),\n    departmentId: z.string().min(1, \"Please select a department\"),\n    designationId: z.string().optional(),\n    category: z.string().min(1, \"Please select category\"),\n    certificateLevel: z.string().min(1, \"Please select certificate level\"),\n    requirements: z.string().optional(),\n    requiredCourses: z.string().optional(),\n    advertType: z.string().min(1, \"Please specify advert type\"),\n    startDate: z.string().min(1, \"Please select an application Start Date\"),\n    endDate: z.string().min(1, \"Please select an application deadline\"),\n    advertNumb: z.string().min(6, \"Please Enter Advert Number\"),\n    experience: z.string().optional(),\n    isActive: z.boolean().optional(),\n  })\n  .superRefine((data, ctx) => {\n    if (data.category === \"Internal\") {\n      if (!data.designationId) {\n        ctx.addIssue({\n          path: [\"designationId\"],\n          code: z.ZodIssueCode.custom,\n          message: \"Designation is required when category is Internal\",\n        });\n      }\n\n      if (!data.experience) {\n        ctx.addIssue({\n          path: [\"experience\"],\n          code: z.ZodIssueCode.custom,\n          message: \"Experience is required when category is Internal\",\n        });\n      }\n\n      if (!data.jg) {\n        ctx.addIssue({\n          path: [\"jg\"],\n          code: z.ZodIssueCode.custom,\n          message: \"Job Group is required when category is Internal\",\n        });\n      }\n\n      if (!data.requiredCourses) {\n        ctx.addIssue({\n          path: [\"requiredCourses\"],\n          code: z.ZodIssueCode.custom,\n          message: \"Required Courses must be selected when category is Internal\",\n        });\n      }\n    }\n  });\ntype JobFormData = z.infer<typeof jobSchema>;\nexport default function AdminJobManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [departmentFilter, setDepartmentFilter] = useState('all');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [editingJob, setEditingJob] = useState<any>(null);\n\n\n  const { data: config, isLoading} = useQuery({\n      queryKey: ['/api/public/config'],\n      enabled: !!user && user.role === 'admin',\n    });\n  \n    const configData = config || {} as any;\n\n  const { data: applications = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/applications'],\n    enabled: !!user && user.role === 'admin',\n  });\n\n  const departments = configData?.departments || [];\n  const designations = configData?.designations || [];\n  const courses = configData?.courses || [];\n  const certificateLevels = configData?.certificateLevels || [];\n  const jobGroups = configData?.jobGroups || [];\n  const jobs = configData?.jobs || [];\n  const studyArea = configData?.studyAreas || [];\n\n  const form = useForm<JobFormData>({\n    resolver: zodResolver(jobSchema),\n    defaultValues: {\n      title: '',\n      description: '',\n      departmentId: '',\n      designationId: '',\n      jg: '',\n      certificateLevel: '',\n      requiredCourses: '',\n      posts: '',\n      experience: '',\n      category: '',\n      requirements: '',\n      advertNumb: '',\n      advertType: \"\",\n\n    },\n  });\n\n  const createJobMutation = useMutation({\n    mutationFn: async (data: JobFormData) => {\n      console.log(\"Sending payload:\", data);\n      // apiRequest already returns parsed JSON, no need to call .json() again\n      return await apiRequest('POST', '/api/admin/jobs', {\n        ...data,\n        departmentId: parseInt(data.departmentId),\n        posts: parseInt(data.posts),\n        jg: parseInt(data.jg),\n        designationId: data.designationId ? parseInt(data.designationId) : null,\n        certificateLevel: parseInt(data.certificateLevel),\n        requiredCourses: data.requiredCourses,\n        experience: data.experience,\n        advertType: data.advertType,\n        requirements: data.requirements || null,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Job Created',\n        description: 'Job posting has been created successfully.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/public/config'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/public/jobs'] });\n      setIsCreateModalOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: 'Unauthorized',\n          description: 'You are logged out. Logging in again...',\n          variant: 'destructive',\n        });\n        setTimeout(() => {\n          window.location.href = '/';\n        }, 500);\n        return;\n      }\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create job',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const updateJobMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      return await apiRequest('PUT', `/api/admin/jobs/${id}`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Job Updated',\n        description: 'Job posting has been updated successfully.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/public/config'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/public/jobs'] });\n      setEditingJob(null);\n      resetForm();\n      setIsCreateModalOpen(false);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: 'Unauthorized',\n          description: 'You are logged out. Logging in again...',\n          variant: 'destructive',\n        });\n        setTimeout(() => {\n          window.location.href = '/';\n        }, 500);\n        return;\n      }\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to update job',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleCreateJob = (data: JobFormData) => {\n    console.log(' At handkecreate job',data);\n    \n    if (editingJob) {\n      // Update existing job with proper type conversion\n      const processedData = {\n        ...data,\n        departmentId: parseInt(data.departmentId),\n        posts: parseInt(data.posts),\n        jg: parseInt(data.jg),\n        designationId: data.designationId ? parseInt(data.designationId) : null,\n        certificateLevel: parseInt(data.certificateLevel),\n        requirements: data.requirements || null,\n      };\n      updateJobMutation.mutate({\n        id: editingJob.id,\n        data: processedData\n      });\n    } else {\n      // Create new job\n      createJobMutation.mutate(data);\n    }\n  };\n\n  const handleEditJob = (job: any) => {\n    setEditingJob(job);\n    // Populate form with job data\n    form.reset({\n      title: job.title || '',\n      description: job.description || '',\n      departmentId: job.departmentId?.toString() || '',\n      designationId: job.designationId?.toString() || '',\n      jg: job.jg?.toString() || '',\n      certificateLevel: job.certificateLevel || '',\n      requiredCourses: job.requiredCourses || '',\n      posts: job.posts?.toString() || '',\n      experience: job.experience || '',\n      category: job.category || '',\n      requirements: job.requirements || '',\n      advertNumb: job.advertNumb || '',\n      advertType: job.advertType || '',\n      startDate: job.startDate || '',\n      endDate: job.endDate || '',\n      isActive: job.isActive || false\n    });\n    setIsCreateModalOpen(true);\n  };\n\n  const handleViewJob = (job: any) => {\n    // Navigate to job details page or show job details modal\n    console.log('View job:', job);\n    // You can implement a view modal or redirect to details page\n  };\n\n  // Delete job mutation\n  const deleteJobMutation = useMutation({\n    mutationFn: async (jobId: number) => {\n      return await apiRequest('DELETE', `/api/admin/jobs/${jobId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Job Deleted',\n        description: 'Job posting has been deleted successfully.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/public/config'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/public/jobs'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to delete job',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleDeleteJob = (jobId: number) => {\n    if (confirm('Are you sure you want to delete this job? This action cannot be undone.')) {\n      deleteJobMutation.mutate(jobId);\n    }\n  };\n\n  const resetForm = () => {\n    setEditingJob(null);\n    form.reset({\n      title: '',\n      description: '',\n      departmentId: '',\n      designationId: '',\n      jg: '',\n      certificateLevel: '',\n      requiredCourses: '',\n      posts: '',\n      experience: '',\n      category: '',\n      requirements: '',\n      advertNumb: '',\n      advertType: '',\n      startDate: '',\n      endDate: '',\n      isActive: false\n    });\n  };\n\n  const handleToggleJobStatus = (jobId: number, isActive: boolean) => {\n    updateJobMutation.mutate({\n      id: jobId,\n      data: { isActive: !isActive }\n    });\n  };\n\n  const filteredJobs = jobs.filter((job: any) => {\n    const matchesSearch = job.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         job.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesDepartment = departmentFilter === 'all' || job.departmentId?.toString() === departmentFilter;\n    const matchesStatus = statusFilter === 'all' || \n                         (statusFilter === 'active' && job.isActive) ||\n                         (statusFilter === 'inactive' && !job.isActive);\n    \n    return matchesSearch && matchesDepartment && matchesStatus;\n  });\n\n  const getApplicationCount = (jobId: number) => {\n    return applications.filter(app => app.jobId === jobId).length;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-neutral-50\">\n        <Navigation />\n        <div className=\"flex\">\n          <Sidebar userRole=\"admin\" />\n          <main className=\"flex-1 p-6\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n              <div className=\"h-64 bg-gray-200 rounded\"></div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar userRole=\"admin\" />\n        \n        <main className=\"flex-1 p-6\">\n          <div className=\"max-w-7xl mx-auto\">\n            {/* Header */}\n            <div className=\"flex justify-between items-center mb-8\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Job Management</h1>\n                <p className=\"text-gray-600\">Create, edit, and manage job postings</p>\n              </div>\n              \n              <Dialog open={isCreateModalOpen} onOpenChange={(open) => {\n                setIsCreateModalOpen(open);\n                if (!open) {\n                  resetForm();\n                }\n              }}>\n                <DialogTrigger asChild>\n                  <Button onClick={() => resetForm()}>\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Post New Job\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n                  {/* Debug: Show all form errors for inspection */}\n                  {Object.keys(form.formState.errors).length > 0 && (\n                    <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded\">\n                      <div className=\"font-bold text-red-700 mb-2\">Form Validation Errors:</div>\n                      <ul className=\"text-sm text-red-700\">\n                        {Object.entries(form.formState.errors).map(([field, error]) => (\n                          <li key={field}><strong>{field}:</strong> {error?.message?.toString() || JSON.stringify(error)}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                  <DialogHeader>\n                    <DialogTitle>\n                      {editingJob ? 'Edit Job Posting' : 'Create New Job Posting'}\n                    </DialogTitle>\n                  </DialogHeader>                  \n                  <form onSubmit={form.handleSubmit(handleCreateJob)} className=\"space-y-4\">\n                    <div className='grid grid-cols-3 gap-4'>\n                      <div>\n                        <Label htmlFor='advertNumb'>Advert Number:</Label>\n                        <Input id='advertNumb' {...form.register('advertNumb')} placeholder='e.g., TCPSB/Open/1/2025' />\n                        {form.formState.errors.advertNumb && (\n                          <p className='text-sm text-red-600 mt-1'>{ form.formState.errors.advertNumb?.message}</p>\n                          )}\n                      </div>\n                      <div>\n                        <Label htmlFor='startDate'> Job Application Start Date</Label>\n                        <Input\n                          id=\"startDate\"\n                          type=\"date\"\n                          {...form.register('startDate')}\n                        />\n                        {form.formState.errors.startDate && (\n                          <p className=\"text-sm text-red-600 mt-1\">\n                            {form.formState.errors.startDate.message}\n                          </p>\n                        )}\n                      </div>\n                      <div>\n                        <Label htmlFor='endDate'>Job Application Dateline</Label>\n                        <Input\n                          id=\"endDate\"\n                          type=\"date\"\n                          {...form.register('endDate')}\n                        />\n                        {form.formState.errors.endDate && (\n                          <p className=\"text-sm text-red-600 mt-1\">\n                            {form.formState.errors.endDate.message}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"title\">Job Title</Label>\n                        <Input id=\"title\" {...form.register('title')} placeholder=\"e.g., ICT Officer\" />\n                        {form.formState.errors.title && (\n                          <p className=\"text-sm text-red-600 mt-1\">\n                            {form.formState.errors.title.message}\n                          </p>\n                        )}\n                      </div>                      \n                      <div className=\"grid grid-cols-3 gap-4\">\n                      <div>\n                        <Label htmlFor=\"jg\">Job Group</Label>\n                        <Select onValueChange={(value) => form.setValue('jg', value)}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select Job Group\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {jobGroups.map((group:any) => (\n                              <SelectItem key={group.id} value={group.id.toString()}>\n                                Job Group {group.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        {form.formState.errors.jg && (\n                          <p className=\"text-sm text-red-600 mt-1\">\n                            {form.formState.errors.jg.message}\n                          </p>\n                        )}\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"posts\">Number of Posts</Label>\n                        <Input\n                          id=\"posts\"  type=\"number\" {...form.register('posts')}  placeholder=\"e.g., 5\"\n                          min=\"1\"\n                        />\n                        {form.formState.errors.posts && (\n                          <p className=\"text-sm text-red-600 mt-1\">\n                            {form.formState.errors.posts.message}\n                          </p>\n                        )}\n                      </div>\n                      <div>\n                        <Label htmlFor=\"category\">Category</Label>\n                        <Select onValueChange={(value) => form.setValue('category', value)}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select Category\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"Open\">Open</SelectItem>\n                            <SelectItem value=\"Internal\">Internal</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        {form.formState.errors.category && (\n                          <p className=\"text-sm text-red-600 mt-1\">\n                            {form.formState.errors.category.message}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"departmentId\">Department</Label>\n                        <Select onValueChange={(value) => form.setValue('departmentId', value)}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select Department\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {departments.map((dept:any) => (\n                              <SelectItem key={dept.id} value={dept.id.toString()}>\n                                {dept.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        {form.formState.errors.departmentId && (\n                          <p className=\"text-sm text-red-600 mt-1\">\n                            {form.formState.errors.departmentId.message}\n                          </p>\n                        )}\n                      </div>\n                      <div>\n                        <Label htmlFor=\"advertType\">Advert Type</Label>\n                        <Select onValueChange={(value) => form.setValue('advertType', value)}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select Advert type\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"First Time\">First Time</SelectItem>\n                            <SelectItem value=\"Readvertisement\">Readvertisement</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        {form.formState.errors.category && (\n                          <p className=\"text-sm text-red-600 mt-1\">\n                            {form.formState.errors.category.message}\n                          </p>\n                        )}\n                      </div>\n                    </div>                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"requiredCourses\">Required Courses/Fields</Label>\n                        <Select onValueChange={(value) => form.setValue('requiredCourses', value)}>                          \n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select Required Courses\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {studyArea.map((area:any) => (\n                              <SelectItem key={area.id} value={area.id.toString()}>\n                                {area.name}\n                              </SelectItem>))}\n                          </SelectContent>\n                        </Select>\n                        {form.formState.errors.requiredCourses && (\n                          <p className=\"text-sm text-red-600 mt-1\">\n                            {form.formState.errors.requiredCourses.message}\n                          </p>\n                        )}\n                      </div>\n                      <div>\n                        <Label htmlFor=\"certificateLevel\">Required Certificate Level</Label>\n                        <Select onValueChange={(value) => form.setValue('certificateLevel', value)} disabled={!form.watch(\"requiredCourses\")}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select Certificate Level\"/>                            \n                          </SelectTrigger>\n                          <SelectContent>\n                            {certificateLevels.map((certs:any) => (\n                              <SelectItem key={certs.id} value={certs.id.toString()}>\n                                {certs.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        {form.formState.errors.certificateLevel && (\n                          <p className=\"text-sm text-red-600 mt-1\">\n                            {form.formState.errors.certificateLevel.message}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-1 gap-4\">                      \n                    </div>\n                    <div>\n                      <Label htmlFor=\"description\">Job Description</Label>\n                      <Textarea\n                        id=\"description\"\n                        {...form.register('description')}\n                        placeholder=\"Provide a detailed job description...\"\n                        rows={8}\n                      />\n                      {form.formState.errors.description && (\n                        <p className=\"text-sm text-red-600 mt-1\">\n                          {form.formState.errors.description.message}\n                        </p>\n                      )}\n                    </div>\n                    <div className='grid grid-cols-3 gap-4'>                       \n                      <div>\n                        <Label htmlFor=\"designationId\">Designation</Label>\n                        <Select onValueChange={(value) => form.setValue('designationId', value)} disabled={form.watch(\"category\") !== \"Internal\"}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select Designation\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {designations.map((designation:any) => (\n                              <SelectItem key={designation.id} value={designation.id.toString()}>\n                                {designation.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        {form.formState.errors.designationId && (\n                          <p className=\"text-sm text-red-600 mt-1\">\n                            {form.formState.errors.designationId.message}\n                          </p>\n                        )}\n                      </div>\n                      <div>\n                        <Label htmlFor=\"experience\">Experience Requirement</Label>\n                        <Input id=\"experience\" type='number'\n                          {...form.register('experience')}\n                          placeholder=\"e.g., 3 years\"\n                        />\n                        {form.formState.errors.experience && (\n                          <p className=\"text-sm text-red-600 mt-1\">\n                            {form.formState.errors.experience.message}\n                          </p>\n                        )}\n                      </div>\n                      <div>\n                        <Label htmlFor=\"requirements\">Required Document</Label>\n                        <Select onValueChange={(value) => form.setValue('requirements', value)}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select Required Document\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"Letter of promotion\">Letter of promotion</SelectItem>\n                            <SelectItem value=\"Recommendation Letter\">Recommendation Letter</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        {form.formState.errors.requirements && (\n                          <p className=\"text-sm text-red-600 mt-1\">\n                            {form.formState.errors.requirements.message}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex justify-end space-x-4\">\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\"\n                        onClick={() => setIsCreateModalOpen(false)}\n                      >\n                        Cancel\n                      </Button>\n                      <Button \n                        type=\"submit\"\n                        disabled={createJobMutation.isPending || updateJobMutation.isPending}\n                      >\n                        {createJobMutation.isPending || updateJobMutation.isPending ? \n                          (editingJob ? 'Updating...' : 'Creating...') : \n                          (editingJob ? 'Update Job' : 'Create Job')}\n                      </Button>\n                    </div>\n                  </form>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {/* Job Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"text-3xl font-bold text-gray-900 mb-2\">{jobs.length}</div>\n                  <div className=\"text-gray-600\">Total Jobs</div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"text-3xl font-bold text-green-600 mb-2\">\n                    {jobs.filter((job:any) => job.isActive).length}\n                  </div>\n                  <div className=\"text-gray-600\">Active Jobs</div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"text-3xl font-bold text-blue-600 mb-2\">{applications.length}</div>\n                  <div className=\"text-gray-600\">Total Applications</div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"text-3xl font-bold text-yellow-600 mb-2\">\n                    {Math.round(applications.length / Math.max(jobs.length, 1))}\n                  </div>\n                  <div className=\"text-gray-600\">Avg. Applications per Job</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Search and Filters */}\n            <Card className=\"mb-8\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex flex-col lg:flex-row gap-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                      <Input\n                        placeholder=\"Search jobs...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"pl-10\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex gap-4\">\n                    <Select value={departmentFilter} onValueChange={setDepartmentFilter}>\n                      <SelectTrigger className=\"w-48\">\n                        <SelectValue placeholder=\"All Departments\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Departments</SelectItem>\n                        {departments.map((dept:any) => (\n                          <SelectItem key={dept.id} value={dept.id.toString()}>\n                            {dept.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n\n                    <Select value={statusFilter} onValueChange={setStatusFilter}>\n                      <SelectTrigger className=\"w-32\">\n                        <SelectValue placeholder=\"Status\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Status</SelectItem>\n                        <SelectItem value=\"active\">Active</SelectItem>\n                        <SelectItem value=\"inactive\">Inactive</SelectItem>\n                      </SelectContent>\n                    </Select>\n\n                    <Button variant=\"outline\">\n                      <Filter className=\"w-4 h-4 mr-2\" />\n                      More Filters\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Jobs Table */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Job Postings ({filteredJobs.length})</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {filteredJobs.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"text-gray-500 mb-4\">No jobs found</div>\n                    <Button onClick={() => setIsCreateModalOpen(true)}>\n                      Create Your First Job\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead>\n                        <tr className=\"border-b border-gray-200\">\n                          <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Job Title</th>\n                          <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Department</th>\n                          <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Applications</th>\n                          <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Deadline</th>\n                          <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Status</th>\n                          <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Actions</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {filteredJobs.map((job:any) => (\n                          <tr key={job.id} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                            <td className=\"py-3 px-4\">\n                              <div className=\"font-medium text-gray-900\">{job.title}</div>\n                              <div className=\"text-sm text-gray-600\">\n                                Job Group {\n                                  jobGroups.find((d:any) => d.id === job.jg)?.name\n                                }\n                              </div>\n                            </td>\n                            <td className=\"py-3 px-4 text-gray-600\">\n                              {departments.find((dept:any) => dept.id === job.departmentId)?.name}\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              <Badge variant=\"outline\">\n                                <Users className=\"w-3 h-3 mr-1\" />\n                                {getApplicationCount(job.id)}\n                              </Badge>\n                            </td>\n                            <td className=\"py-3 px-4 text-gray-600\">\n                              <div className=\"flex items-center\">\n                                <Calendar className=\"w-4 h-4 mr-1\" />\n                                {job.endDate\n                                  ? new Date(job.endDate).toLocaleDateString()\n                                  : 'Open'}\n                              </div>\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              <div className=\"flex items-center space-x-2\">\n                                <Switch\n                                  checked={job.isActive}\n                                  onCheckedChange={() => handleToggleJobStatus(job.id, job?.isActive)}\n                                />\n                                <Badge variant={job.isActive ? 'default' : 'secondary'}>\n                                  {job.isActive ? 'Active' : 'Inactive'}\n                                </Badge>\n                              </div>\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              <div className=\"flex space-x-2\">\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\" \n                                  onClick={() => handleViewJob(job)}\n                                  data-testid={`button-view-${job.id}`}\n                                  title=\"View job details\"\n                                >\n                                  <Eye className=\"w-4 h-4\" />\n                                </Button>\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\" \n                                  onClick={() => handleEditJob(job)}\n                                  data-testid={`button-edit-${job.id}`}\n                                  title=\"Edit job\"\n                                >\n                                  <Edit className=\"w-4 h-4\" />\n                                </Button>\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  onClick={() => handleDeleteJob(job.id)}\n                                  data-testid={`button-delete-${job.id}`}\n                                  title=\"Delete job\"\n                                  className=\"text-red-600 hover:text-red-800\"\n                                >\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n                              </div>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":37324},"client/src/pages/applicant/Applications.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useLocation } from 'wouter';\nimport Navigation from '@/components/layout/Navigation';\nimport Sidebar from '@/components/layout/Sidebar';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { isUnauthorizedError } from '@/lib/authUtils';\nimport { \n  Search, \n  Filter, \n  Eye, \n  FileText, \n  Calendar, \n  CheckCircle, \n  Clock, \n  XCircle,\n  Award\n} from 'lucide-react';\n\nexport default function ApplicantApplications() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [location, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [selectedApplication, setSelectedApplication] = useState<any>(null);\n\n  const { data: applications = [], isLoading } = useQuery({\n    queryKey: ['/api/applicant/applications'],\n    enabled: !!user && user.role === 'applicant',\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'draft':\n        return 'bg-gray-100 text-gray-800';\n      case 'submitted':\n        return 'bg-blue-100 text-blue-800';\n      case 'shortlisted':\n        return 'bg-green-100 text-green-800';\n      case 'interviewed':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'rejected':\n        return 'bg-red-100 text-red-800';\n      case 'hired':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'submitted':\n        return <FileText className=\"w-4 h-4\" />;\n      case 'shortlisted':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case 'interviewed':\n        return <Calendar className=\"w-4 h-4\" />;\n      case 'rejected':\n        return <XCircle className=\"w-4 h-4\" />;\n      case 'hired':\n        return <Award className=\"w-4 h-4\" />;\n      default:\n        return <Clock className=\"w-4 h-4\" />;\n    }\n  };\n\n  const filteredApplications = (applications as any).filter((app:any) => {\n    const matchesSearch = app.job?.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         app.job?.department?.name.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || app.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const statusCounts = (applications as any).reduce((acc:any, app:any) => {\n    acc[app.status] = (acc[app.status] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-neutral-50\">\n        <Navigation />\n        <div className=\"flex\">\n          <Sidebar userRole=\"applicant\" />\n          <main className=\"flex-1 p-6\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n                {[...Array(4)].map((_, i) => (\n                  <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\n                ))}\n              </div>\n              <div className=\"h-64 bg-gray-200 rounded\"></div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar userRole=\"applicant\" />\n        \n        <main className=\"flex-1 p-6\">\n          <div className=\"max-w-7xl mx-auto\">\n            {/* Header */}\n            <div className=\"mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">My Applications</h1>\n              <p className=\"text-gray-600\">\n                Track the status of your job applications and manage your submissions.\n              </p>\n            </div>\n\n            {/* Application Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"text-3xl font-bold text-gray-900 mb-2\">\n                    {(applications as any).length}\n                  </div>\n                  <div className=\"text-gray-600\">Total Applications</div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"text-3xl font-bold text-green-600 mb-2\">\n                    {statusCounts.shortlisted || 0}\n                  </div>\n                  <div className=\"text-gray-600\">Shortlisted</div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"text-3xl font-bold text-yellow-600 mb-2\">\n                    {statusCounts.interviewed || 0}\n                  </div>\n                  <div className=\"text-gray-600\">Interviewed</div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"text-3xl font-bold text-purple-600 mb-2\">\n                    {statusCounts.hired || 0}\n                  </div>\n                  <div className=\"text-gray-600\">Hired</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Search and Filters */}\n            <Card className=\"mb-8\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex flex-col lg:flex-row gap-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                      <Input\n                        placeholder=\"Search applications...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"pl-10\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex gap-4\">\n                    <Select value={statusFilter} onValueChange={setStatusFilter}>\n                      <SelectTrigger className=\"w-48\">\n                        <SelectValue placeholder=\"Filter by status\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Status</SelectItem>\n                        <SelectItem value=\"submitted\">Submitted</SelectItem>\n                        <SelectItem value=\"shortlisted\">Shortlisted</SelectItem>\n                        <SelectItem value=\"interviewed\">Interviewed</SelectItem>\n                        <SelectItem value=\"rejected\">Rejected</SelectItem>\n                        <SelectItem value=\"hired\">Hired</SelectItem>\n                      </SelectContent>\n                    </Select>\n\n                    <Button \n                      variant=\"outline\"\n                      onClick={() => toast({ title: 'Advanced Filters', description: 'More filtering options coming soon!' })}\n                    >\n                      <Filter className=\"w-4 h-4 mr-2\" />\n                      More Filters\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Applications List */}\n            {filteredApplications.length === 0 ? (\n              <Card>\n                <CardContent className=\"p-12 text-center\">\n                  <FileText className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n                    {(applications as any).length === 0 ? 'No Applications Yet' : 'No Applications Found'}\n                  </h3>\n                  <p className=\"text-gray-600 mb-6\">\n                    {(applications as any).length === 0 \n                      ? 'Start browsing and applying for jobs to see them here.'\n                      : 'No applications match your current filters. Try adjusting your search criteria.'}\n                  </p>\n                  {(applications as any).length === 0 ? (\n                    <Button onClick={() => setLocation('/jobs')}>Browse Jobs</Button>\n                  ) : (\n                    <Button \n                      variant=\"outline\"\n                      onClick={() => {\n                        setSearchTerm('');\n                        setStatusFilter('all');\n                      }}\n                    >\n                      Clear Filters\n                    </Button>\n                  )}\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-4\">\n                {filteredApplications.map((application:any) => (\n                  <Card key={application.id} className=\"hover:shadow-md transition-shadow\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-3 mb-3\">\n                            <h3 className=\"text-lg font-semibold text-gray-900\">\n                              {application.job?.title}\n                            </h3>\n                            <Badge className={getStatusColor(application.status)}>\n                              <div className=\"flex items-center gap-1\">\n                                {getStatusIcon(application.status)}\n                                {application.status?.charAt(0).toUpperCase() + application.status?.slice(1)}\n                              </div>\n                            </Badge>\n                          </div>\n\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-gray-600\">\n                            <div>\n                              <span className=\"font-medium\">Department:</span>\n                              <br />\n                              {application.job?.department?.name}\n                            </div>\n                            <div>\n                              <span className=\"font-medium\">Job Group:</span>\n                              <br />\n                              {application.job?.designation?.jobGroup}\n                            </div>\n                            <div>\n                              <span className=\"font-medium\">Applied:</span>\n                              <br />\n                              {application.submittedOn\n                                ? new Date(application.submittedOn).toLocaleDateString()\n                                : 'Draft'}\n                            </div>\n                          </div>\n\n                          {application.interviewDate && (\n                            <div className=\"mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                              <div className=\"flex items-center gap-2 text-yellow-800\">\n                                <Calendar className=\"w-4 h-4\" />\n                                <span className=\"font-medium\">\n                                  Interview scheduled for {new Date(application.interviewDate).toLocaleDateString()}\n                                </span>\n                              </div>\n                            </div>\n                          )}\n\n                          {application.remarks && (\n                            <div className=\"mt-3 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                              <p className=\"text-blue-800 text-sm\">\n                                <span className=\"font-medium\">Remarks:</span> {application.remarks}\n                              </p>\n                            </div>\n                          )}\n                        </div>\n\n                        <div className=\"mt-4 lg:mt-0 lg:ml-6 flex flex-col sm:flex-row gap-2\">\n                          <Dialog>\n                            <DialogTrigger asChild>\n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\"\n                                onClick={() => setSelectedApplication(application)}\n                              >\n                                <Eye className=\"w-4 h-4 mr-2\" />\n                                View Details\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent className=\"max-w-2xl\">\n                              <DialogHeader>\n                                <DialogTitle>{selectedApplication?.job?.title}</DialogTitle>\n                              </DialogHeader>\n                              <div className=\"space-y-4\">\n                                <div className=\"grid grid-cols-2 gap-4\">\n                                  <div>\n                                    <span className=\"font-medium\">Status:</span>\n                                    <Badge className={`ml-2 ${getStatusColor(selectedApplication?.status)}`}>\n                                      {selectedApplication?.status?.charAt(0).toUpperCase() + selectedApplication?.status?.slice(1)}\n                                    </Badge>\n                                  </div>\n                                  <div>\n                                    <span className=\"font-medium\">Application Date:</span>\n                                    <span className=\"ml-2\">\n                                      {selectedApplication?.submittedOn \n                                        ? new Date(selectedApplication.submittedOn).toLocaleDateString()\n                                        : 'Not submitted'}\n                                    </span>\n                                  </div>\n                                </div>\n                                \n                                <div>\n                                  <span className=\"font-medium\">Job Description:</span>\n                                  <p className=\"mt-1 text-gray-600\">\n                                    {selectedApplication?.job?.description || 'No description available'}\n                                  </p>\n                                </div>\n\n                                {selectedApplication?.remarks && (\n                                  <div>\n                                    <span className=\"font-medium\">Feedback:</span>\n                                    <p className=\"mt-1 text-gray-600\">{selectedApplication.remarks}</p>\n                                  </div>\n                                )}\n                              </div>\n                            </DialogContent>\n                          </Dialog>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15744},"client/src/pages/applicant/Dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport Navigation from \"@/components/layout/Navigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, CheckCircle, Calendar } from \"lucide-react\";\nimport ProgressIndicator from \"@/components/applicant/ProgressIndicator\";\nimport type { Application } from \"@shared/schema\";\nimport { usePublicConfig } from \"@/hooks/usePublicConfig\";\n\nexport default function ApplicantDashboard() {\n  const { user } = useAuth();\n  const [, navigate] = useLocation();\n\n  const { data: config } = usePublicConfig();\n  const jobs = config?.jobs || [];\n\n  // ✅ Fetch applications\n  const { data: applications = [] } = useQuery<Application[]>({\n    queryKey: [\"/api/applicant/applications\"],\n  });\n\n  // ✅ Fetch applicant profile (progress lives here)\n  type ProfileResponse = {\n    applicantProfile?: {\n      id: number;\n      isEmployee?: boolean;\n      profileCompletionPercentage?: number;\n      completedSteps?: number[];\n    };\n  };\n\n  const { data: profile } = useQuery<ProfileResponse>({\n    queryKey: [\"/api/auth/user\"],\n    enabled: !!user,\n  });\n\n  const steps = [\n    { id: 1, name: \"Personal Details\", required: true },\n    { id: 1.5, name: \"Employee Details\", required: true, conditional: true },\n    { id: 2, name: \"Address Information\", required: true },\n    { id: 3, name: \"Educational Background\", required: true },\n    { id: 4, name: \"Short Courses\", required: false },\n    { id: 5, name: \"Professional Qualifications\", required: false },\n    { id: 6, name: \"Employment History\", required: true },\n    { id: 7, name: \"Referees\", required: true },\n    { id: 8, name: \"Document Uploads\", required: true },\n  ].map((step) => ({\n    ...step,\n    completed:\n      profile?.applicantProfile?.completedSteps?.includes(step.id as number) ??\n      false,\n  }));\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"submitted\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"shortlisted\":\n        return \"bg-green-100 text-green-800\";\n      case \"interviewed\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"rejected\":\n        return \"bg-red-100 text-red-800\";\n      case \"hired\":\n        return \"bg-purple-100 text-purple-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      <Navigation />\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">\n            Welcome back, {user?.firstName || \"Applicant\"}!\n          </h1>\n          <p className=\"text-gray-600 mt-2\">\n            Manage your job applications and complete your profile\n          </p>\n        </div>\n\n        {/* ✅ Profile Completion */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Profile Completion</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ProgressIndicator\n              steps={steps}\n              currentStep={0}\n              completedSteps={profile?.applicantProfile?.completedSteps?.length || 0}\n            />\n            <div className=\"mt-6\">\n              <Button\n                onClick={() => {\n                  const completed = profile?.applicantProfile?.completedSteps || [];\n                  const lastStep = completed.length > 0 ? completed[completed.length - 1] : 1;\n\n                  const isEmployeeVerified = profile?.applicantProfile?.isEmployee;\n\n                  // Logic to decide next step\n                  let nextStep: number | 1.5 = lastStep < 8 ? lastStep + 1 : 8;\n                  if (lastStep === 1 && isEmployeeVerified) nextStep = 1.5;\n                  if (lastStep === 1 && !isEmployeeVerified) nextStep = 1;\n\n                  navigate(`/profile?step=${nextStep}`);\n                }}\n              >\n                Continue Profile Setup\n              </Button>\n\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Dashboard Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-600 text-sm\">Applications Submitted</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {applications.length}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <FileText className=\"w-6 h-6 text-primary\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-600 text-sm\">Shortlisted</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {applications.filter((app) => app.status === \"shortlisted\").length}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <CheckCircle className=\"w-6 h-6 text-secondary\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-600 text-sm\">Interview Invites</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {applications.filter((app) => app.status === \"interviewed\").length}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                  <Calendar className=\"w-6 h-6 text-yellow-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Applications */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Recent Applications</CardTitle>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => navigate(\"/applications\")}\n              >\n                View All\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {applications.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                  No applications yet\n                </h3>\n                <p className=\"text-gray-600 mb-4\">\n                  Start browsing and applying for jobs to see them here.\n                </p>\n                <Button onClick={() => navigate(\"/jobs\")}>Browse Jobs</Button>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"border-b border-gray-200\">\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-600\">\n                        Job Title\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-600\">\n                        Department\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-600\">\n                        Applied Date\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-600\">\n                        Status\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-600\">\n                        Actions\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {applications.slice(0, 5).map((application: any) => {\n                      const jobMatch = jobs.find((j: any) => j.id === application.jobId);\n                      return (\n                        <tr\n                          key={application.id}\n                          className=\"border-b border-gray-100 hover:bg-gray-50\"\n                        >\n                          <td className=\"py-3 px-4\">\n                            <div className=\"font-medium text-gray-900\">\n                              {jobMatch?.title || \"—\"}\n                            </div>\n                            <div className=\"text-sm text-gray-600\">\n                              {application?.job?.designation?.jobGroup || \"\"}\n                            </div>\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            <div className=\"font-medium text-gray-900\">\n                              {jobMatch?.title || \"—\"}\n                            </div>\n                            <div className=\"text-sm text-gray-600\">\n                            {(() => {\n                            const jobMatch = jobs.find((j) => j.id === application.jobId);\n                            const departments = config?.departments || [];\n                            const department = departments.find((d: any) => d.id === jobMatch?.departmentId);\n                            return department ? department.name : \"—\";\n                            })()}\n                            </div>\n                            </td>\n                          <td className=\"py-3 px-4 text-gray-600\">\n                            {application.submittedOn\n                              ? new Date(application.submittedOn).toLocaleDateString()\n                              : \"-\"}\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            <Badge className={getStatusColor(application.status || \"\")}> \n                              {application.status\n                                ? application.status.charAt(0).toUpperCase() +\n                                  application.status.slice(1)\n                                : \"Draft\"}\n                            </Badge>\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => navigate(`/applications?id=${application.id}`)}\n                            >\n                              View Details\n                            </Button>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11313},"client/src/pages/applicant/Profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Navigation from \"@/components/layout/Navigation\";\nimport Sidebar from \"@/components/layout/Sidebar\";\nimport ProgressIndicator from \"@/components/applicant/ProgressIndicator\";\nimport ProfileForm from \"@/components/applicant/ProfileForm\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\n// ------------------ Step type ------------------ //\ntype Step = 1 | 1.5 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\n\ntype ProfileResponse = {\n  applicantProfile?: {\n    id: number;\n    isEmployee?: boolean;\n    profileCompletionPercentage?: number;\n    completedSteps?: number[];\n    [key: string]: any;\n  };\n  [key: string]: any;\n};\n\nexport default function Profile() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // ✅ Fetch profile from backend\n  const { data: profile, isLoading } = useQuery<ProfileResponse>({\n    queryKey: [\"/api/auth/user\"],\n    enabled: !!user,\n  });\n\n  const isEmployeeVerified = profile?.applicantProfile?.isEmployee;\n\n  // ✅ Helper to get next allowed step based on completion\n  const getNextAllowedStep = (completedSteps: number[], isEmployee: boolean): Step => {\n    if (completedSteps.length === 0) return 1; // Start at step 1\n    \n    const highestCompleted = Math.max(...completedSteps) as Step;\n    \n    // Map next allowed step based on highest completed\n    if (highestCompleted === 1) {\n      return isEmployee ? 1.5 : 2;\n    } else if (highestCompleted === 1.5) {\n      return 2;\n    } else {\n      return Math.min(8, (highestCompleted + 1)) as Step;\n    }\n  };\n\n  // ✅ Calculate correct step based on data (will be computed in useEffect)\n  const calculateCorrectStep = (): Step => {\n    if (!profile?.applicantProfile) return 1;\n    \n    const searchParams = new URLSearchParams(window.location.search);\n    const stepParam = searchParams.get(\"step\");\n    const completed = profile?.applicantProfile?.completedSteps || [];\n    const maxAllowedStep = getNextAllowedStep(completed, !!isEmployeeVerified);\n\n    if (stepParam) {\n      const requestedStep = parseFloat(stepParam) as Step;\n      // Validate requested step and clamp to allowed range\n      if (requestedStep >= 1 && requestedStep <= 8 && [1, 1.5, 2, 3, 4, 5, 6, 7, 8].includes(requestedStep)) {\n        return Math.min(requestedStep, maxAllowedStep) as Step;\n      } else {\n        return maxAllowedStep; // Invalid step requested, use max allowed\n      }\n    } else {\n      return maxAllowedStep;\n    }\n  };\n\n  const [currentStep, setCurrentStep] = useState<Step>(1);\n\n  // ✅ Steps definition (with completed flag driven by DB)\n  const steps = [\n    {\n      id: 1,\n      name: \"Personal Details\",\n      required: true,\n      completed:\n        profile?.applicantProfile?.completedSteps?.includes(1) ?? false,\n    },\n    {\n      id: 1.5,\n      name: \"Employee Details\",\n      required: true,\n      conditional: true,\n      completed:\n        profile?.applicantProfile?.completedSteps?.includes(1.5) ?? false,\n    },\n    {\n      id: 2,\n      name: \"Address Information\",\n      required: true,\n      completed:\n        profile?.applicantProfile?.completedSteps?.includes(2) ?? false,\n    },\n    {\n      id: 3,\n      name: \"Educational Background\",\n      required: true,\n      completed:\n        profile?.applicantProfile?.completedSteps?.includes(3) ?? false,\n    },\n    {\n      id: 4,\n      name: \"Short Courses\",\n      required: false,\n      completed:\n        profile?.applicantProfile?.completedSteps?.includes(4) ?? false,\n    },\n    {\n      id: 5,\n      name: \"Professional Qualifications\",\n      required: false,\n      completed:\n        profile?.applicantProfile?.completedSteps?.includes(5) ?? false,\n    },\n    {\n      id: 6,\n      name: \"Employment History\",\n      required: true,\n      completed:\n        profile?.applicantProfile?.completedSteps?.includes(6) ?? false,\n    },\n    {\n      id: 7,\n      name: \"Referees\",\n      required: true,\n      completed:\n        profile?.applicantProfile?.completedSteps?.includes(7) ?? false,\n    },\n    {\n      id: 8,\n      name: \"Document Uploads\",\n      required: true,\n      completed:\n        profile?.applicantProfile?.completedSteps?.includes(8) ?? false,\n    },\n  ];\n\n  // ✅ Mutation for saving\n  const updateProfileMutation = useMutation({\n    mutationFn: async (payload: any) => {\n\n      // return console.log(payload);\n      \n      const { method, applicantId, step, data } = payload;\n      if (step ===8) return await apiRequest(\"POST\",\"/api/applicant/documents\",{data,applicantId})\n      if (method === \"POST\") {\n        return await apiRequest(\"POST\", \"/api/applicant/profile\", {\n          data,\n          applicantId,\n        });\n      }\n      if (method === \"PATCH\") {\n        return await apiRequest(\"PATCH\", \"/api/applicant/profile\", {\n          applicantId,\n          step,\n          data,\n        });\n      }\n      throw new Error(\"Invalid method for profile mutation\");\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been saved successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => (window.location.href = \"/\"), 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // ✅ Save handler with automatic progression\n  const handleSaveStep = (payload: any) => {\n    updateProfileMutation.mutate(payload, {\n      onSuccess: () => {\n        // Determine next step based on current step and fresh payload data\n        let nextStep: Step;\n        \n        if (currentStep === 1) {\n          // Use fresh payload data for employee status\n          nextStep = payload.data.isEmployee ? 1.5 : 2;\n        } else if (currentStep < 8) {\n          // For other steps, use current getNextStep logic\n          nextStep = getNextStep(currentStep);\n        } else {\n          return; // Don't advance from step 8\n        }\n        \n        setTimeout(() => setCurrentStep(nextStep), 500);\n      },\n    });\n  };\n\n  // ✅ Step navigation\n  const getNextStep = (current: Step): Step => {\n    if (current === 1 && isEmployeeVerified) return 1.5;\n    if (current === 1 && !isEmployeeVerified) return 2;\n    if (current === 1.5) return 2;\n    return (current + 1) as Step;\n  };\n  const getPrevStep = (current: Step): Step => {\n    if (current === 2 && isEmployeeVerified) return 1.5;\n    if (current === 2 && !isEmployeeVerified) return 1;\n    if (current === 1.5) return 1;\n    return (current - 1) as Step;\n  };\n\n  // Step navigation now handled through validation in ProfileForm\n  // No direct next step - user must save current step to advance\n  const handlePrevStep = () => {\n    const prev = getPrevStep(currentStep);\n    if (prev >= 1) setCurrentStep(prev);\n  };\n\n  // ✅ Update current step when profile data loads\n  useEffect(() => {\n    if (!isLoading && profile?.applicantProfile) {\n      const correctStep = calculateCorrectStep();\n      setCurrentStep(correctStep);\n    }\n  }, [isLoading, profile?.applicantProfile, isEmployeeVerified]);\n\n  // ✅ Auth check\n  useEffect(() => {\n    if (!isLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 500);\n    }\n  }, [isLoading, user, toast]);\n\n  // ✅ Loading state\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-neutral-50\">\n        <Navigation />\n        <div className=\"flex\">\n          <Sidebar userRole=\"applicant\" />\n          <main className=\"flex-1 p-6\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n              <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n              <div className=\"h-64 bg-gray-200 rounded\"></div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  // ✅ Access control\n  if (!user || user.role !== \"applicant\") {\n    return (\n      <div className=\"min-h-screen bg-neutral-50\">\n        <Navigation />\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">\n                Access Denied\n              </h2>\n              <p className=\"text-gray-600\">\n                You don't have permission to access this page.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  // ✅ Main render\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      <Navigation />\n      <div className=\"flex\">\n        <Sidebar userRole=\"applicant\" />\n        <main className=\"flex-1 p-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            {/* Header */}\n            <div className=\"mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                Complete Your Profile\n              </h1>\n              <p className=\"text-gray-600\">\n                Fill in all the required information to complete your\n                application profile. You can save your progress and continue\n                later.\n              </p>\n            </div>\n\n            {/* Progress Indicator */}\n            <Card className=\"mb-8\">\n              <CardHeader>\n                <CardTitle>Profile Completion Progress</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ProgressIndicator\n                  steps={steps}\n                  currentStep={currentStep}\n                  completedSteps={\n                    profile?.applicantProfile?.completedSteps?.length || 0\n                  }\n                />\n              </CardContent>\n            </Card>\n\n            {/* Profile Form */}\n            <Card>\n              <CardHeader>\n                <CardTitle>\n                  Step {currentStep}:{\" \"}\n                  {steps.find((s) => s.id === currentStep)?.name}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ProfileForm\n                  step={currentStep}\n                  profile={profile?.applicantProfile}\n                  onSave={handleSaveStep}\n                  isLoading={updateProfileMutation.isPending}\n                />\n\n                {/* Navigation Buttons */}\n                <div className=\"flex justify-between items-center mt-8 pt-6 border-t border-gray-200\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={handlePrevStep}\n                    disabled={currentStep === 1}\n                  >\n                    Previous\n                  </Button>\n                  <div className=\"flex space-x-4\">\n                    {currentStep < 8 ? (\n                      <p className=\"text-sm text-gray-600 self-center\">\n                        Save this step to continue to the next step\n                      </p>\n                    ) : (\n                      <Button\n                        onClick={() => {\n                          toast({\n                            title: \"Profile Complete!\",\n                            description:\n                              \"Your profile has been completed successfully. You can now apply for jobs.\",\n                          });\n                        }}\n                        disabled={updateProfileMutation.isPending}\n                      >\n                        Complete Profile\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12461},"client/src/pages/board/Dashboard.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport Navigation from '@/components/layout/Navigation';\nimport Sidebar from '@/components/layout/Sidebar';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { \n  Clock, \n  CheckCircle, \n  Calendar, \n  UserCheck, \n  Users, \n  TrendingUp,\n  FileText,\n  Award\n} from 'lucide-react';\n\nexport default function BoardDashboard() {\n  const { user } = useAuth();\n\n  const { data: applications = [] } = useQuery({\n    queryKey: ['/api/board/applications'],\n    enabled: !!user && user.role === 'board',\n  });\n\n  const { data: jobs = [] } = useQuery({\n    queryKey: ['/api/public/jobs'],\n  });\n\n  // Calculate statistics\n  const pendingReview = (applications as any).filter((app:any) => app.status === 'submitted').length;\n  const shortlisted = (applications as any).filter((app: any) => app.status === 'shortlisted').length;\n  const interviewed = (applications as any).filter((app: any) => app.status === 'interviewed').length;\n  const appointed = (applications as any).filter((app: any) => app.status === 'hired').length;\n\n  // Recent activity\n  const recentApplications = (applications as any)\n    .filter((app:any) => app.status === 'submitted')\n    .slice(0, 5);\n\n  const upcomingInterviews = (applications as any)\n    .filter((app:any) => app.status === 'shortlisted' && app.interviewDate)\n    .slice(0, 3);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'submitted':\n        return 'bg-blue-100 text-blue-800';\n      case 'shortlisted':\n        return 'bg-green-100 text-green-800';\n      case 'interviewed':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'rejected':\n        return 'bg-red-100 text-red-800';\n      case 'hired':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar userRole=\"board\" />\n        \n        <main className=\"flex-1 p-6\">\n          <div className=\"max-w-7xl mx-auto\">\n            {/* Header */}\n            <div className=\"mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                Board Committee Dashboard\n              </h1>\n              <p className=\"text-gray-600\">\n                Review applications, conduct interviews, and manage the selection process.\n              </p>\n            </div>\n\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-600 text-sm\">Pending Review</p>\n                      <p className=\"text-3xl font-bold text-gray-900\">{pendingReview}</p>\n                      <p className=\"text-yellow-600 text-sm mt-1\">Requires attention</p>\n                    </div>\n                    <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                      <Clock className=\"w-6 h-6 text-yellow-600\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-600 text-sm\">Shortlisted</p>\n                      <p className=\"text-3xl font-bold text-gray-900\">{shortlisted}</p>\n                      <p className=\"text-green-600 text-sm mt-1\">Ready for interviews</p>\n                    </div>\n                    <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                      <CheckCircle className=\"w-6 h-6 text-secondary\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-600 text-sm\">Interviews Scheduled</p>\n                      <p className=\"text-3xl font-bold text-gray-900\">{interviewed}</p>\n                      <p className=\"text-blue-600 text-sm mt-1\">In progress</p>\n                    </div>\n                    <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                      <Calendar className=\"w-6 h-6 text-primary\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-600 text-sm\">Appointed</p>\n                      <p className=\"text-3xl font-bold text-gray-900\">{appointed}</p>\n                      <p className=\"text-purple-600 text-sm mt-1\">This month</p>\n                    </div>\n                    <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                      <UserCheck className=\"w-6 h-6 text-purple-600\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Quick Actions */}\n            <Card className=\"mb-8\">\n              <CardHeader>\n                <CardTitle>Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                  <Button className=\"h-24 flex flex-col items-center justify-center\">\n                    <Users className=\"w-6 h-6 mb-2\" />\n                    Review Applications\n                  </Button>\n                  <Button variant=\"outline\" className=\"h-24 flex flex-col items-center justify-center\">\n                    <CheckCircle className=\"w-6 h-6 mb-2\" />\n                    Shortlist Candidates\n                  </Button>\n                  <Button variant=\"outline\" className=\"h-24 flex flex-col items-center justify-center\">\n                    <Calendar className=\"w-6 h-6 mb-2\" />\n                    Schedule Interviews\n                  </Button>\n                  <Button variant=\"outline\" className=\"h-24 flex flex-col items-center justify-center\">\n                    <TrendingUp className=\"w-6 h-6 mb-2\" />\n                    Generate Reports\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {/* Applications Requiring Review */}\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Applications for Review</CardTitle>\n                    <Button variant=\"outline\" size=\"sm\">View All</Button>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {recentApplications.length === 0 ? (\n                    <p className=\"text-gray-500 text-center py-4\">No applications pending review</p>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {recentApplications.map((application:any) => (\n                        <div key={application.id} className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center text-white text-sm font-medium\">\n                              {application.applicant?.firstName?.[0] || 'A'}\n                              {application.applicant?.surname?.[0] || ''}\n                            </div>\n                            <div>\n                              <h4 className=\"font-medium text-gray-900\">\n                                {application.applicant?.firstName} {application.applicant?.surname}\n                              </h4>\n                              <p className=\"text-sm text-gray-600\">{application.job?.title}</p>\n                              <p className=\"text-xs text-gray-500\">\n                                Applied: {application.submittedOn\n                                  ? new Date(application.submittedOn).toLocaleDateString()\n                                  : 'Draft'}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <Badge className={getStatusColor(application.status)}>\n                              {application.status?.charAt(0).toUpperCase() + application.status?.slice(1)}\n                            </Badge>\n                            <div className=\"mt-2 flex space-x-1\">\n                              <Button size=\"sm\" variant=\"outline\">\n                                Review\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Upcoming Interviews */}\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Upcoming Interviews</CardTitle>\n                    <Button variant=\"outline\" size=\"sm\">Schedule New</Button>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {upcomingInterviews.length === 0 ? (\n                    <p className=\"text-gray-500 text-center py-4\">No interviews scheduled</p>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {upcomingInterviews.map((application:any) => (\n                        <div key={application.id} className=\"p-3 border border-gray-200 rounded-lg\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h4 className=\"font-medium text-gray-900\">\n                              {application.job?.title}\n                            </h4>\n                            <Badge variant=\"outline\">\n                              {application.interviewDate \n                                ? new Date(application.interviewDate).toLocaleDateString()\n                                : 'TBD'}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-gray-600 mb-2\">\n                            Candidate: {application.applicant?.firstName} {application.applicant?.surname}\n                          </p>\n                          <div className=\"flex space-x-2\">\n                            <Button size=\"sm\" variant=\"outline\">\n                              View Profile\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\">\n                              Reschedule\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Selection Progress Overview */}\n            <Card className=\"mt-8\">\n              <CardHeader>\n                <CardTitle>Selection Process Overview</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Application Review Progress</h4>\n                    <Progress value={75} className=\"mb-2\" />\n                    <p className=\"text-sm text-gray-600\">75% of applications reviewed</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Average Interview Score</h4>\n                    <div className=\"text-2xl font-bold text-primary mb-1\">82/100</div>\n                    <p className=\"text-sm text-gray-600\">Based on completed interviews</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Time to Complete Process</h4>\n                    <div className=\"text-2xl font-bold text-secondary mb-1\">18 days</div>\n                    <p className=\"text-sm text-gray-600\">Average processing time</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recent Activity */}\n            <Card className=\"mt-8\">\n              <CardHeader>\n                <CardTitle>Recent Activity</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-3 p-3 bg-blue-50 rounded-lg\">\n                    <FileText className=\"w-5 h-5 text-blue-600\" />\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900\">New applications received</p>\n                      <p className=\"text-xs text-gray-600\">5 new applications for ICT Officer position</p>\n                    </div>\n                    <span className=\"text-xs text-gray-500\">2 hours ago</span>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-3 p-3 bg-green-50 rounded-lg\">\n                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900\">Candidates shortlisted</p>\n                      <p className=\"text-xs text-gray-600\">3 candidates shortlisted for Administrative Officer</p>\n                    </div>\n                    <span className=\"text-xs text-gray-500\">1 day ago</span>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-3 p-3 bg-yellow-50 rounded-lg\">\n                    <Calendar className=\"w-5 h-5 text-yellow-600\" />\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900\">Interview completed</p>\n                      <p className=\"text-xs text-gray-600\">Moses Wafula interviewed for ICT Officer position</p>\n                    </div>\n                    <span className=\"text-xs text-gray-500\">2 days ago</span>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-3 p-3 bg-purple-50 rounded-lg\">\n                    <Award className=\"w-5 h-5 text-purple-600\" />\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900\">Candidate appointed</p>\n                      <p className=\"text-xs text-gray-600\">Sarah Kemunto appointed as Health Records Officer</p>\n                    </div>\n                    <span className=\"text-xs text-gray-500\">3 days ago</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15655},"client/src/pages/board/Interviews.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport Navigation from '@/components/layout/Navigation';\nimport Sidebar from '@/components/layout/Sidebar';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { isUnauthorizedError } from '@/lib/authUtils';\nimport { \n  Calendar, \n  Clock, \n  User, \n  FileText, \n  CheckCircle, \n  Award,\n  Printer,\n  Plus,\n  Edit,\n  Save\n} from 'lucide-react';\n\ninterface InterviewScore {\n  technicalKnowledge: number;\n  communicationSkills: number;\n  problemSolving: number;\n  leadershipPotential: number;\n  comments: string;\n}\n\nexport default function BoardInterviews() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedSession, setSelectedSession] = useState('all');\n  const [showScoring, setShowScoring] = useState(false);\n  const [selectedCandidate, setSelectedCandidate] = useState<any>(null);\n  const [interviewScore, setInterviewScore] = useState<InterviewScore>({\n    technicalKnowledge: 0,\n    communicationSkills: 0,\n    problemSolving: 0,\n    leadershipPotential: 0,\n    comments: ''\n  });\n\n  const { data: applications = [], isLoading } = useQuery({\n    queryKey: ['/api/board/applications', { status: 'shortlisted' }],\n    enabled: !!user && user.role === 'board',\n  });\n\n  const { data: jobs = [] } = useQuery({\n    queryKey: ['/api/public/jobs'],\n  });\n\n  const updateApplicationMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      return await apiRequest('PUT', `/api/board/applications/${id}`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Interview Score Saved',\n        description: 'Interview score and comments have been saved successfully.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/board/applications'] });\n      setShowScoring(false);\n      resetScoreForm();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: 'Unauthorized',\n          description: 'You are logged out. Logging in again...',\n          variant: 'destructive',\n        });\n        setTimeout(() => {\n          window.location.href = '/';\n        }, 500);\n        return;\n      }\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to save interview score',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const resetScoreForm = () => {\n    setInterviewScore({\n      technicalKnowledge: 0,\n      communicationSkills: 0,\n      problemSolving: 0,\n      leadershipPotential: 0,\n      comments: ''\n    });\n    setSelectedCandidate(null);\n  };\n\n  const calculateTotalScore = () => {\n    return interviewScore.technicalKnowledge + \n           interviewScore.communicationSkills + \n           interviewScore.problemSolving + \n           interviewScore.leadershipPotential;\n  };\n\n  const handleSaveScore = () => {\n    const totalScore = calculateTotalScore();\n    updateApplicationMutation.mutate({\n      id: selectedCandidate.id,\n      data: {\n        status: 'interviewed',\n        interviewScore: totalScore,\n        remarks: interviewScore.comments\n      }\n    });\n  };\n\n  const groupedInterviews = (applications as any).reduce((groups: any, app:any) => {\n    const jobTitle = app.job?.title || 'Unknown Position';\n    if (!groups[jobTitle]) {\n      groups[jobTitle] = [];\n    }\n    groups[jobTitle].push(app);\n    return groups;\n  }, {});\n\n  const upcomingInterviews = [\n    {\n      id: 1,\n      jobTitle: 'ICT Officer',\n      date: '2024-12-20',\n      time: '09:00 AM',\n      candidates: 8,\n      venue: 'Conference Room A'\n    },\n    {\n      id: 2,\n      jobTitle: 'Administrative Officer',\n      date: '2024-12-22',\n      time: '10:00 AM',\n      candidates: 5,\n      venue: 'Conference Room B'\n    }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-neutral-50\">\n        <Navigation />\n        <div className=\"flex\">\n          <Sidebar userRole=\"board\" />\n          <main className=\"flex-1 p-6\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n              <div className=\"h-64 bg-gray-200 rounded\"></div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar userRole=\"board\" />\n        \n        <main className=\"flex-1 p-6\">\n          <div className=\"max-w-7xl mx-auto\">\n            {/* Header */}\n            <div className=\"flex items-center justify-between mb-8\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Interview Management</h1>\n                <p className=\"text-gray-600\">\n                  Schedule interviews, conduct assessments, and score candidates.\n                </p>\n              </div>\n              \n              <div className=\"flex space-x-2\">\n                <Dialog>\n                  <DialogTrigger asChild>\n                    <Button>\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Schedule Interview\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Schedule New Interview</DialogTitle>\n                    </DialogHeader>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label>Job Position</Label>\n                        <Select>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select job position\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {(jobs as any).map((job:any) => (\n                              <SelectItem key={job.id} value={job.id.toString()}>\n                                {job.title}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label>Interview Date</Label>\n                          <Input type=\"date\" />\n                        </div>\n                        <div>\n                          <Label>Time</Label>\n                          <Input type=\"time\" />\n                        </div>\n                      </div>\n                      <div>\n                        <Label>Venue</Label>\n                        <Input placeholder=\"e.g., Conference Room A\" />\n                      </div>\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button variant=\"outline\">Cancel</Button>\n                        <Button>Schedule Interview</Button>\n                      </div>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {/* Scheduled Interviews */}\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Upcoming Interviews</CardTitle>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Calendar className=\"w-4 h-4 mr-2\" />\n                      View Calendar\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {upcomingInterviews.map((interview) => (\n                      <div key={interview.id} className=\"border border-gray-200 rounded-lg p-4\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <h4 className=\"font-semibold text-gray-900\">{interview.jobTitle}</h4>\n                          <Badge variant=\"outline\">\n                            {interview.candidates} candidates\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-2 gap-4 text-sm text-gray-600 mb-3\">\n                          <div className=\"flex items-center\">\n                            <Calendar className=\"w-4 h-4 mr-2\" />\n                            {new Date(interview.date).toLocaleDateString()}\n                          </div>\n                          <div className=\"flex items-center\">\n                            <Clock className=\"w-4 h-4 mr-2\" />\n                            {interview.time}\n                          </div>\n                        </div>\n                        \n                        <p className=\"text-sm text-gray-600 mb-3\">Venue: {interview.venue}</p>\n                        \n                        <div className=\"flex space-x-2\">\n                          <Button size=\"sm\" variant=\"outline\">\n                            <FileText className=\"w-3 h-3 mr-1\" />\n                            View List\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\">\n                            <Printer className=\"w-3 h-3 mr-1\" />\n                            Print Sheets\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\">\n                            <Edit className=\"w-3 h-3 mr-1\" />\n                            Edit\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Interview Scoring */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Interview Scoring</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label>Select Interview Session</Label>\n                      <Select value={selectedSession} onValueChange={setSelectedSession}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select interview session\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"all\">All Sessions</SelectItem>\n                          {upcomingInterviews.map((interview) => (\n                            <SelectItem key={interview.id} value={interview.id.toString()}>\n                              {interview.jobTitle} - {new Date(interview.date).toLocaleDateString()}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    {/* Scoring Parameters */}\n                    <div className=\"space-y-3 p-4 border border-gray-200 rounded-lg\">\n                      <h4 className=\"font-medium text-gray-900 mb-3\">Scoring Parameters</h4>\n                      \n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-700\">Technical Knowledge</span>\n                          <div className=\"flex items-center space-x-2\">\n                            <Input \n                              type=\"number\" \n                              placeholder=\"0-30\" \n                              max=\"30\"\n                              className=\"w-16 text-sm\"\n                              value={interviewScore.technicalKnowledge}\n                              onChange={(e) => setInterviewScore(prev => ({\n                                ...prev,\n                                technicalKnowledge: parseInt(e.target.value) || 0\n                              }))}\n                            />\n                            <span className=\"text-xs text-gray-500\">/30</span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-700\">Communication Skills</span>\n                          <div className=\"flex items-center space-x-2\">\n                            <Input \n                              type=\"number\" \n                              placeholder=\"0-25\" \n                              max=\"25\"\n                              className=\"w-16 text-sm\"\n                              value={interviewScore.communicationSkills}\n                              onChange={(e) => setInterviewScore(prev => ({\n                                ...prev,\n                                communicationSkills: parseInt(e.target.value) || 0\n                              }))}\n                            />\n                            <span className=\"text-xs text-gray-500\">/25</span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-700\">Problem Solving</span>\n                          <div className=\"flex items-center space-x-2\">\n                            <Input \n                              type=\"number\" \n                              placeholder=\"0-25\" \n                              max=\"25\"\n                              className=\"w-16 text-sm\"\n                              value={interviewScore.problemSolving}\n                              onChange={(e) => setInterviewScore(prev => ({\n                                ...prev,\n                                problemSolving: parseInt(e.target.value) || 0\n                              }))}\n                            />\n                            <span className=\"text-xs text-gray-500\">/25</span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-700\">Leadership Potential</span>\n                          <div className=\"flex items-center space-x-2\">\n                            <Input \n                              type=\"number\" \n                              placeholder=\"0-20\" \n                              max=\"20\"\n                              className=\"w-16 text-sm\"\n                              value={interviewScore.leadershipPotential}\n                              onChange={(e) => setInterviewScore(prev => ({\n                                ...prev,\n                                leadershipPotential: parseInt(e.target.value) || 0\n                              }))}\n                            />\n                            <span className=\"text-xs text-gray-500\">/20</span>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"pt-3 border-t border-gray-200\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <span className=\"font-medium text-gray-900\">Total Score:</span>\n                          <span className=\"text-lg font-bold text-primary\">\n                            {calculateTotalScore()}/100\n                          </span>\n                        </div>\n                        \n                        <div>\n                          <Label>Interview Comments</Label>\n                          <Textarea \n                            placeholder=\"Interview comments and remarks...\"\n                            rows={3}\n                            value={interviewScore.comments}\n                            onChange={(e) => setInterviewScore(prev => ({\n                              ...prev,\n                              comments: e.target.value\n                            }))}\n                          />\n                        </div>\n                        \n                        <Button \n                          className=\"w-full mt-3\" \n                          onClick={handleSaveScore}\n                          disabled={updateApplicationMutation.isPending || !selectedCandidate}\n                        >\n                          <Save className=\"w-4 h-4 mr-2\" />\n                          {updateApplicationMutation.isPending ? 'Saving...' : 'Save Score & Comments'}\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Candidates List */}\n            <Card className=\"mt-8\">\n              <CardHeader>\n                <CardTitle>Interview Candidates</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {(applications as any).length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <User className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Candidates Shortlisted</h3>\n                    <p className=\"text-gray-600\">Shortlisted candidates will appear here for interview scheduling.</p>\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead>\n                        <tr className=\"border-b border-gray-200\">\n                          <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Candidate</th>\n                          <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Position</th>\n                          <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Interview Date</th>\n                          <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Score</th>\n                          <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Status</th>\n                          <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Actions</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {(applications as any).map((application:any) => (\n                          <tr key={application.id} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                            <td className=\"py-3 px-4\">\n                              <div className=\"flex items-center space-x-3\">\n                                <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-white text-sm font-medium\">\n                                  {application.applicant?.firstName?.[0] || 'A'}\n                                  {application.applicant?.surname?.[0] || ''}\n                                </div>\n                                <div>\n                                  <div className=\"font-medium text-gray-900\">\n                                    {application.applicant?.firstName} {application.applicant?.surname}\n                                  </div>\n                                  <div className=\"text-sm text-gray-600\">\n                                    {application.applicant?.phoneNumber}\n                                  </div>\n                                </div>\n                              </div>\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              <div className=\"font-medium text-gray-900\">{application.job?.title}</div>\n                              <div className=\"text-sm text-gray-600\">Job Group {application.job?.designation?.jobGroup}</div>\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              {application.interviewDate ? (\n                                <div className=\"flex items-center text-sm\">\n                                  <Calendar className=\"w-4 h-4 mr-1 text-gray-400\" />\n                                  {new Date(application.interviewDate).toLocaleDateString()}\n                                </div>\n                              ) : (\n                                <Badge variant=\"secondary\">Not Scheduled</Badge>\n                              )}\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              {application.interviewScore ? (\n                                <div className=\"flex items-center\">\n                                  <Award className=\"w-4 h-4 mr-1 text-yellow-600\" />\n                                  <span className=\"font-medium\">{application.interviewScore}/100</span>\n                                </div>\n                              ) : (\n                                <span className=\"text-gray-400\">Not scored</span>\n                              )}\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              <Badge className={\n                                application.status === 'interviewed' \n                                  ? 'bg-green-100 text-green-800' \n                                  : 'bg-yellow-100 text-yellow-800'\n                              }>\n                                {application.status === 'interviewed' ? 'Completed' : 'Pending'}\n                              </Badge>\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              <div className=\"flex space-x-2\">\n                                <Button \n                                  size=\"sm\" \n                                  variant=\"outline\"\n                                  onClick={() => {\n                                    setSelectedCandidate(application);\n                                    setShowScoring(true);\n                                  }}\n                                >\n                                  <Award className=\"w-3 h-3 mr-1\" />\n                                  Score\n                                </Button>\n                                <Button size=\"sm\" variant=\"outline\">\n                                  <FileText className=\"w-3 h-3 mr-1\" />\n                                  Profile\n                                </Button>\n                              </div>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Interview Results Summary */}\n            {(applications as any).some((app:any) => app.interviewScore) && (\n              <Card className=\"mt-8\">\n                <CardHeader>\n                  <CardTitle>Interview Results Summary</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-primary mb-1\">\n                        {Math.round(\n                          (applications as any)\n                            .filter((app:any) => app.interviewScore)\n                            .reduce((sum:any, app:any) => sum + (app.interviewScore || 0), 0) / \n                          (applications as any).filter((app:any) => app.interviewScore).length || 0\n                        )}\n                      </div>\n                      <p className=\"text-sm text-gray-600\">Average Score</p>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-secondary mb-1\">\n                        {Math.max(...(applications as any).map((app:any) => app.interviewScore || 0))}\n                      </div>\n                      <p className=\"text-sm text-gray-600\">Highest Score</p>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n                        {(applications as any).filter((app:any) => app.interviewScore).length}\n                      </div>\n                      <p className=\"text-sm text-gray-600\">Interviewed</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":25301},"client/src/pages/board/Shortlisting.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport Navigation from '@/components/layout/Navigation';\nimport Sidebar from '@/components/layout/Sidebar';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { isUnauthorizedError } from '@/lib/authUtils';\nimport { \n  Search, \n  Filter, \n  FileText, \n  CheckCircle, \n  XCircle, \n  Calendar,\n  Download,\n  Eye,\n  GraduationCap,\n  Award,\n  Briefcase\n} from 'lucide-react';\n\nexport default function BoardShortlisting() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [jobFilter, setJobFilter] = useState('all');\n  const [statusFilter, setStatusFilter] = useState('submitted');\n  const [selectedApplication, setSelectedApplication] = useState<any>(null);\n  const [showRemarks, setShowRemarks] = useState(false);\n  const [remarks, setRemarks] = useState('');\n  const [score, setScore] = useState('');\n\n  const { data: applications = [], isLoading } = useQuery({\n    queryKey: ['/api/board/applications', { status: statusFilter, jobId: jobFilter !== 'all' ? jobFilter : undefined }],\n    enabled: !!user && user.role === 'board',\n  });\n\n  const { data: jobs = [] } = useQuery({\n    queryKey: ['/api/public/jobs'],\n  });\n\n  const updateApplicationMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      return await apiRequest('PUT', `/api/board/applications/${id}`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Application Updated',\n        description: 'Application status has been updated successfully.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/board/applications'] });\n      setSelectedApplication(null);\n      setShowRemarks(false);\n      setRemarks('');\n      setScore('');\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: 'Unauthorized',\n          description: 'You are logged out. Logging in again...',\n          variant: 'destructive',\n        });\n        setTimeout(() => {\n          window.location.href = '/';\n        }, 500);\n        return;\n      }\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to update application',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleStatusUpdate = (applicationId: number, newStatus: string, additionalData: any = {}) => {\n    updateApplicationMutation.mutate({\n      id: applicationId,\n      data: {\n        status: newStatus,\n        remarks: remarks || additionalData.remarks || '',\n        ...additionalData\n      }\n    });\n  };\n\n  const filteredApplications = applications.filter(app => {\n    const matchesSearch = \n      app.applicant?.firstName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      app.applicant?.surname?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      app.job?.title?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesJob = jobFilter === 'all' || app.jobId?.toString() === jobFilter;\n    \n    return matchesSearch && matchesJob;\n  });\n\n  const getQualificationMatch = (application: any) => {\n    // Mock qualification matching logic - in real app this would check against job requirements\n    const educationLevel = application.applicant?.educationRecords?.length || 0;\n    const experience = application.applicant?.employmentHistory?.length || 0;\n    \n    if (educationLevel >= 3 && experience >= 2) return { percentage: 100, color: 'text-green-600' };\n    if (educationLevel >= 2 && experience >= 1) return { percentage: 85, color: 'text-blue-600' };\n    if (educationLevel >= 1) return { percentage: 70, color: 'text-yellow-600' };\n    return { percentage: 50, color: 'text-red-600' };\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'submitted':\n        return 'bg-blue-100 text-blue-800';\n      case 'shortlisted':\n        return 'bg-green-100 text-green-800';\n      case 'rejected':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-neutral-50\">\n        <Navigation />\n        <div className=\"flex\">\n          <Sidebar userRole=\"board\" />\n          <main className=\"flex-1 p-6\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n              <div className=\"h-64 bg-gray-200 rounded\"></div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar userRole=\"board\" />\n        \n        <main className=\"flex-1 p-6\">\n          <div className=\"max-w-7xl mx-auto\">\n            {/* Header */}\n            <div className=\"flex items-center justify-between mb-8\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Shortlisting Panel</h1>\n                <p className=\"text-gray-600\">\n                  Review applications and select candidates for interviews.\n                </p>\n              </div>\n              \n              <div className=\"flex space-x-2\">\n                <Button variant=\"outline\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export List\n                </Button>\n                <Button>\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  Print Sheet\n                </Button>\n              </div>\n            </div>\n\n            {/* Filters */}\n            <Card className=\"mb-8\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex flex-col lg:flex-row gap-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                      <Input\n                        placeholder=\"Search by applicant name or job title...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"pl-10\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex gap-4\">\n                    <Select value={jobFilter} onValueChange={setJobFilter}>\n                      <SelectTrigger className=\"w-48\">\n                        <SelectValue placeholder=\"All Jobs\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Jobs</SelectItem>\n                        {jobs.map((job) => (\n                          <SelectItem key={job.id} value={job.id.toString()}>\n                            {job.title}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n\n                    <Select value={statusFilter} onValueChange={setStatusFilter}>\n                      <SelectTrigger className=\"w-40\">\n                        <SelectValue placeholder=\"Status\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"submitted\">Submitted</SelectItem>\n                        <SelectItem value=\"shortlisted\">Shortlisted</SelectItem>\n                        <SelectItem value=\"rejected\">Rejected</SelectItem>\n                      </SelectContent>\n                    </Select>\n\n                    <Button variant=\"outline\">\n                      <Filter className=\"w-4 h-4 mr-2\" />\n                      More Filters\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Applications Table */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Applications for Review ({filteredApplications.length})</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {filteredApplications.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <FileText className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No Applications Found</h3>\n                    <p className=\"text-gray-600\">\n                      No applications match your current filters.\n                    </p>\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead>\n                        <tr className=\"border-b border-gray-200\">\n                          <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Applicant</th>\n                          <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Qualification Match</th>\n                          <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Documents</th>\n                          <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Score</th>\n                          <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Status</th>\n                          <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Actions</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {filteredApplications.map((application) => {\n                          const qualMatch = getQualificationMatch(application);\n                          \n                          return (\n                            <tr key={application.id} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                              <td className=\"py-3 px-4\">\n                                <div className=\"flex items-center space-x-3\">\n                                  <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center text-white text-sm font-medium\">\n                                    {application.applicant?.firstName?.[0] || 'A'}\n                                    {application.applicant?.surname?.[0] || ''}\n                                  </div>\n                                  <div>\n                                    <div className=\"font-medium text-gray-900\">\n                                      {application.applicant?.firstName} {application.applicant?.surname}\n                                    </div>\n                                    <div className=\"text-sm text-gray-600 flex items-center\">\n                                      <GraduationCap className=\"w-3 h-3 mr-1\" />\n                                      {application.job?.title}\n                                    </div>\n                                  </div>\n                                </div>\n                              </td>\n                              <td className=\"py-3 px-4\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <div className={`w-3 h-3 rounded-full ${qualMatch.percentage >= 85 ? 'bg-green-500' : qualMatch.percentage >= 70 ? 'bg-yellow-500' : 'bg-red-500'}`}></div>\n                                  <span className={`text-sm font-medium ${qualMatch.color}`}>\n                                    {qualMatch.percentage}% Match\n                                  </span>\n                                </div>\n                                <div className=\"text-xs text-gray-500 mt-1\">\n                                  Education, Experience verified\n                                </div>\n                              </td>\n                              <td className=\"py-3 px-4\">\n                                <Button \n                                  size=\"sm\" \n                                  variant=\"outline\"\n                                  className=\"bg-blue-50 text-blue-700 hover:bg-blue-100\"\n                                >\n                                  <FileText className=\"w-3 h-3 mr-1\" />\n                                  View PDF\n                                </Button>\n                              </td>\n                              <td className=\"py-3 px-4\">\n                                <Input \n                                  type=\"number\" \n                                  placeholder=\"0-100\" \n                                  max=\"100\"\n                                  className=\"w-20 text-sm\"\n                                  value={score}\n                                  onChange={(e) => setScore(e.target.value)}\n                                />\n                              </td>\n                              <td className=\"py-3 px-4\">\n                                <Badge className={getStatusColor(application.status)}>\n                                  {application.status?.charAt(0).toUpperCase() + application.status?.slice(1)}\n                                </Badge>\n                              </td>\n                              <td className=\"py-3 px-4\">\n                                <div className=\"flex space-x-2\">\n                                  <Dialog>\n                                    <DialogTrigger asChild>\n                                      <Button \n                                        size=\"sm\" \n                                        className=\"bg-secondary hover:bg-green-700\"\n                                        onClick={() => setSelectedApplication(application)}\n                                      >\n                                        <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                        Shortlist\n                                      </Button>\n                                    </DialogTrigger>\n                                    <DialogContent>\n                                      <DialogHeader>\n                                        <DialogTitle>Shortlist Candidate</DialogTitle>\n                                      </DialogHeader>\n                                      <div className=\"space-y-4\">\n                                        <div>\n                                          <Label>Interview Date</Label>\n                                          <Input type=\"date\" className=\"mt-1\" />\n                                        </div>\n                                        <div>\n                                          <Label>Remarks</Label>\n                                          <Textarea \n                                            placeholder=\"Add remarks about the candidate...\"\n                                            value={remarks}\n                                            onChange={(e) => setRemarks(e.target.value)}\n                                            className=\"mt-1\"\n                                          />\n                                        </div>\n                                        <div className=\"flex justify-end space-x-2\">\n                                          <Button variant=\"outline\">Cancel</Button>\n                                          <Button \n                                            onClick={() => handleStatusUpdate(selectedApplication?.id, 'shortlisted', { interviewDate: new Date().toISOString().split('T')[0] })}\n                                            disabled={updateApplicationMutation.isPending}\n                                          >\n                                            {updateApplicationMutation.isPending ? 'Processing...' : 'Shortlist'}\n                                          </Button>\n                                        </div>\n                                      </div>\n                                    </DialogContent>\n                                  </Dialog>\n                                  \n                                  <Button \n                                    size=\"sm\" \n                                    variant=\"outline\"\n                                    onClick={() => {\n                                      setSelectedApplication(application);\n                                      setShowRemarks(true);\n                                    }}\n                                  >\n                                    <Eye className=\"w-3 h-3 mr-1\" />\n                                    View Profile\n                                  </Button>\n                                  \n                                  <Button \n                                    size=\"sm\" \n                                    variant=\"outline\"\n                                    className=\"text-red-600 hover:bg-red-50\"\n                                    onClick={() => handleStatusUpdate(application.id, 'rejected', { remarks: 'Did not meet requirements' })}\n                                  >\n                                    <XCircle className=\"w-3 h-3 mr-1\" />\n                                    Reject\n                                  </Button>\n                                </div>\n                              </td>\n                            </tr>\n                          );\n                        })}\n                      </tbody>\n                    </table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Profile View Dialog */}\n            <Dialog open={showRemarks} onOpenChange={setShowRemarks}>\n              <DialogContent className=\"max-w-4xl\">\n                <DialogHeader>\n                  <DialogTitle>\n                    Candidate Profile - {selectedApplication?.applicant?.firstName} {selectedApplication?.applicant?.surname}\n                  </DialogTitle>\n                </DialogHeader>\n                \n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  <div>\n                    <h4 className=\"font-semibold mb-3 flex items-center\">\n                      <Award className=\"w-4 h-4 mr-2\" />\n                      Qualifications\n                    </h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"p-3 bg-gray-50 rounded-lg\">\n                        <p className=\"font-medium\">Education</p>\n                        <p className=\"text-gray-600\">Bachelor's in Information Technology</p>\n                        <p className=\"text-gray-500 text-xs\">University of Nairobi, 2020</p>\n                      </div>\n                      <div className=\"p-3 bg-gray-50 rounded-lg\">\n                        <p className=\"font-medium\">Professional Certification</p>\n                        <p className=\"text-gray-600\">CISCO Certified Network Associate</p>\n                        <p className=\"text-gray-500 text-xs\">Valid until 2025</p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-semibold mb-3 flex items-center\">\n                      <Briefcase className=\"w-4 h-4 mr-2\" />\n                      Experience\n                    </h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"p-3 bg-gray-50 rounded-lg\">\n                        <p className=\"font-medium\">IT Support Specialist</p>\n                        <p className=\"text-gray-600\">TechCorp Ltd</p>\n                        <p className=\"text-gray-500 text-xs\">2021 - Present (3 years)</p>\n                      </div>\n                      <div className=\"p-3 bg-gray-50 rounded-lg\">\n                        <p className=\"font-medium\">Junior Developer</p>\n                        <p className=\"text-gray-600\">StartupXYZ</p>\n                        <p className=\"text-gray-500 text-xs\">2020 - 2021 (1 year)</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"mt-6\">\n                  <h4 className=\"font-semibold mb-3\">Assessment & Remarks</h4>\n                  <Textarea \n                    placeholder=\"Add your assessment and remarks about this candidate...\"\n                    value={remarks}\n                    onChange={(e) => setRemarks(e.target.value)}\n                    rows={4}\n                  />\n                </div>\n\n                <div className=\"flex justify-end space-x-2 mt-6\">\n                  <Button variant=\"outline\" onClick={() => setShowRemarks(false)}>\n                    Close\n                  </Button>\n                  <Button \n                    onClick={() => handleStatusUpdate(selectedApplication?.id, 'shortlisted')}\n                    disabled={updateApplicationMutation.isPending}\n                  >\n                    Shortlist Candidate\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21674},"client/src/pages/modals/Jobs.tsx":{"content":"import React, { useEffect } from \"react\";\nimport {\n  Modal,\n  Form,\n  Input,\n  Select,\n  DatePicker,\n  Row,\n  Col,\n  Button,\n} from \"antd\";\nimport { Department, Award, StudyArea, JobGroup, Job } from \"@/types/jobTypes\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\n\nconst { Option } = Select;\n\n// Validation schema using zod\nconst jobSchema = z.object({\n  code: z.string().min(1, \"Advert number is required\"),\n  start_date: z.date({ required_error: \"Start date is required\" }),\n  end_date: z.date({ required_error: \"End date is required\" }),\n  award_id: z.string().min(1, \"Certificate is required\"),\n  required_courses: z.string().min(1, \"Course selection is required\"),\n  title: z.string().min(1, \"Job title is required\"),\n  grade: z.string().min(1, \"Job group is required\"),\n  posts: z.coerce.number().min(1, \"Number of posts is required\"),\n  department_id: z.string().min(1, \"Department is required\"),\n  category: z.string().min(1, \"Status is required\"),\n  experience: z.coerce.number().min(0, \"Experience is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  advert_type: z.string().min(1, \"Advert type is required\"),\n  required_certificate: z.string().optional(),\n});\n\ntype JobFormValues = z.infer<typeof jobSchema>;\n\ninterface JobModalProps {\n  isOpen: boolean;\n  isEdit: boolean;\n  closeModal: () => void;\n  onSubmit: (values: JobFormValues) => void;\n  initialValues?: Partial<Job>;\n  departments: Department[];\n  awards: Award[];\n  studyArea: StudyArea[];\n  jg: JobGroup[];\n}\n\nexport const JobModal: React.FC<JobModalProps> = ({\n  isOpen,\n  isEdit,\n  closeModal,\n  onSubmit,\n  initialValues,\n  departments,\n  awards,\n  studyArea,\n  jg,\n}) => {\n  const [form] = Form.useForm();\n\n  const {\n    control,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm<JobFormValues>({\n    resolver: zodResolver(jobSchema),\n    defaultValues: initialValues,\n  });\n\n  useEffect(() => {\n    if (isEdit && initialValues) {\n      reset(initialValues as any);\n      form.setFieldsValue(initialValues);\n    } else {\n      reset({} as any);\n      form.resetFields();\n    }\n  }, [isEdit, initialValues, form, reset]);\n\n  const handleOk = handleSubmit((values) => {\n    onSubmit(values);\n    closeModal();\n  });\n\n  return (\n    <Modal\n      className=\"job-modal-header-green\"\n      title={isEdit ? \"Edit and Update Adverts\" : \"Job Advertisements\"}\n      open={isOpen}\n      onCancel={() => {\n        form.resetFields();\n        closeModal();\n      }}\n      okText={isEdit ? \"Update\" : \"Save\"}\n      width=\"90%\"\n      style={{ maxWidth: \"75%\" }}\n      onOk={handleOk}\n      centered\n      destroyOnClose\n    >\n      <Form form={form} layout=\"vertical\">\n        <Row gutter={16}>\n          <Col xs={24} sm={4}>\n            <Form.Item\n              name=\"code\"\n              label=\"Advert #\"\n              rules={[{ required: true, message: \"Advert number is required\" }]}\n            >\n              <Input placeholder=\"Enter Advert Number\" />\n            </Form.Item>\n          </Col>\n          <Col xs={24} sm={4}>\n            <Form.Item\n              name=\"start_date\"\n              label=\"Start Date\"\n              rules={[{ required: true, message: \"Start date is required\" }]}\n            >\n              <DatePicker style={{ width: \"100%\" }} />\n            </Form.Item>\n          </Col>\n          <Col xs={24} sm={4}>\n            <Form.Item\n              name=\"end_date\"\n              label=\"End Date\"\n              rules={[{ required: true, message: \"End date is required\" }]}\n            >\n              <DatePicker style={{ width: \"100%\" }} />\n            </Form.Item>\n          </Col>\n          <Col xs={24} sm={4}>\n            <Form.Item\n              name=\"award_id\"\n              label=\"Certificate\"\n              rules={[{ required: true, message: \"Certificate is required\" }]}\n            >\n              <Select>\n                {awards.map((a) => (\n                  <Option key={a.award_id} value={a.award_id}>\n                    {a.name}\n                  </Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col xs={24} sm={8}>\n            <Form.Item\n              name=\"required_courses\"\n              label=\"Courses\"\n              rules={[{ required: true, message: \"Course selection is required\" }]}\n            >\n              <Select placeholder=\"Select required courses\">\n                {studyArea.map((course) => (\n                  <Option key={course.area_id} value={course.area_id}>\n                    {course.name}\n                  </Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row gutter={16}>\n          <Col xs={24} sm={16}>\n            <Form.Item\n              name=\"title\"\n              label=\"Job Title\"\n              rules={[{ required: true, message: \"Job title is required\" }]}\n            >\n              <Input placeholder=\"Enter job title\" />\n            </Form.Item>\n          </Col>\n          <Col xs={24} sm={4}>\n            <Form.Item\n              name=\"grade\"\n              label=\"JG/ Scale\"\n              rules={[{ required: true, message: \"Job group is required\" }]}\n            >\n              <Select>\n                {jg.map((j) => (\n                  <Option key={j.jg_id} value={j.jg_id}>\n                    {j.name}\n                  </Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col xs={24} sm={4}>\n            <Form.Item\n              name=\"posts\"\n              label=\"Posts\"\n              rules={[{ required: true, message: \"Number of posts is required\" }]}\n            >\n              <Input type=\"number\" placeholder=\"Enter number of posts\" />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row gutter={16}>\n          <Col xs={24} sm={16}>\n            <Form.Item\n              name=\"department_id\"\n              label=\"Department\"\n              rules={[{ required: true, message: \"Department is required\" }]}\n            >\n              <Select placeholder=\"Select department\">\n                {departments.map((dept) => (\n                  <Option key={dept.department_id} value={dept.department_id}>\n                    {dept.name}\n                  </Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col xs={24} sm={4}>\n            <Form.Item\n              name=\"category\"\n              label=\"Status\"\n              rules={[{ required: true, message: \"Status is required\" }]}\n            >\n              <Select placeholder=\"Select status\">\n                <Option value=\"open\">Open</Option>\n                <Option value=\"internal\">Internal</Option>\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col xs={24} sm={4}>\n            <Form.Item\n              name=\"experience\"\n              label=\"Experience\"\n              rules={[{ required: true, message: \"Experience is required\" }]}\n            >\n              <Input placeholder=\"Number of Experience\" type=\"number\" />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Form.Item\n          name=\"description\"\n          label=\"Description\"\n          rules={[{ required: true, message: \"Description is required\" }]}\n        >\n          <Input.TextArea\n            placeholder=\"Enter job description\"\n            style={{ minHeight: 200 }}\n          />\n        </Form.Item>\n        <Row gutter={16}>\n          <Col xs={24} sm={12}>\n            <Form.Item\n              name=\"advert_type\"\n              label=\"Advert Type\"\n              rules={[{ required: true, message: \"Advert type is required\" }]}\n            >\n              <Select placeholder=\"Advert Type\">\n                <Option value=\"1\">First-time Advert</Option>\n                <Option value=\"2\">Re-Advertisement</Option>\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col xs={24} sm={12}>\n            <Form.Item name=\"required_certificate\" label=\"Required Document (optional)\">\n              <Select placeholder=\"Required Document\">\n                <Option value=\"1\">Letter of First Appointment</Option>\n                <Option value=\"2\">Letter of Last Promotion</Option>\n              </Select>\n            </Form.Item>\n          </Col>\n        </Row>\n      </Form>\n    </Modal>\n  );\n};\n","size_bytes":8423},"seeds/seeds.ts":{"content":"import { storage } from './../server/storage';\n\nconst jobGroups = [\n  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K',\n  'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T'\n];\nconst studyArea = [\n    \"Hospitality & Tourism\",\n    \"Agriculture & Agribusiness\",\n    \"Law\",\n    \"Science\",\n    \"Mathematics, Actuarial Science & Economics\",\n    \"Textile Technology, Clothing and Fashion Design\",\n    \"Physical Eduation\",\n    \"Human Health Sciences\",\n    \"Animal Health Sciences\",\n    \"Food Science and Nutrition\",\n    \"Humanities and Social Sciences\",\n    \"Environmental Sciences & Natural Resource Management\",\n    \"Languages\",\n    \"Business\",\n    \"Arts\",\n    \"Education\",\n    \"Computing and Information Sciences\",\n    \"Religious Studies\",\n    \"Technical Training\",\n    \"Secondary Education Level\",\n    \"GeoScience\",\n    \"Special Education\",\n    \"Engineering\",\n    \"Architecture, Design, Planning and Land Management\"\n];\nconst certificateLevel = [\n  'Master\\'s Degree',\n  'Bachelor\\'s Degree',\n  'Diploma Higher',\n  'Advanced Diploma',\n  'Ordinary Diploma',\n  'Certificate',\n  'O-Level',\n  'A-Level',\n  'KCSE',\n  'KCPE',\n  'Craft Certificate',\n  'PhD'\n];\nconst specializations: Record<string, string[]> = {\n  \"Hospitality & Tourism\": [\n    'Cabin Crew/Air Hostess',\n    'Travel and Tourism Management',\n    'Air Travel Operations (Foundation)',\n    'Air Travel Operations (Consultant)',\n    'Airport Operations (Foundation)',\n    'Airport Fundamentals',\n    'Airline passenger handling',\n    'Airport Ramp Services',\n    'Aviation Security',\n    ' International Freight Management'\n  ],\n  \"Agriculture & Agribusiness\":[\n    'Agribusiness',\n    'Agribusiness Management',\n    'Agricultural Resource Management',\n    'Agribusiness Management and Marketing',\n    'Agricultural Resource Economics and Management',\n    'Agribusiness Management and Enterprise Development',\n      ''\n    ],\n  \"Law\": [\n    ''\n  ],\n  \"Science\": [\n    ''\n      \n    ],\n  \"Mathematics, Actuarial Science & Economics\": [\n    ''\n  ],\n  \"Textile Technology, Clothing and Fashion Design\": [\n    ''\n  ],\n  \"Physical Eduation\": [\n    ''\n  ],\n  \"Human Health Sciences\": [\n    ''\n  ],\n  \"Animal Health Sciences\": [\n    ''\n  ],\n  \"Food Science and Nutrition\": [\n    ''\n  ],\n  \"Humanities and Social Sciences\": [\n    ''\n  ],\n  \"Environmental Sciences & Natural Resource Management\": [\n    ''\n  ],\n  \"Languages\": [\n    ''\n  ],\n  \"Business\": [\n    ''\n  ],\n  \"Arts\": [\n    ''\n  ],\n  \"Education\": [\n    ''\n  ],\n  \"Computing and Information Sciences\": [\n    'Information Communication Technology',\n    'Computer Science', 'Software Engineering',\n    'Archives and Information Services'\n  ],\n  \"Religious Studies\": [\n    ''\n  ],\n  \"Technical Training\": [\n    ''\n  ],\n  \"Secondary Education Level\": [\n    ''\n  ],\n  \"GeoScience\": [\n    ''      \n    ],\n  \"Special Education\": [\n    ''\n  ],\n  \"Engineering\": [\n    ''\n  ],\n  \"Architecture, Design, Planning and Land Management\": [\n    ''\n  ]\n};\nconst Awards = [\n  'Master\\'s Degree', 'Bachelor\\'s Degree',\n  'Diploma Higher', 'Advanced Diploma', 'Ordinary Diploma',\n  'Certificate', 'O-Level', 'A-Level', 'KCSE', 'KCPE'\n];\nconst counties = [\n  'Baringo', 'Bomet', 'Bungoma', 'Busia', 'Elgeyo Marakwet', 'Embu', 'Garissa',\n  'Homa Bay', 'Isiolo', 'Kajiado', 'Kakamega', 'Kericho', 'Kiambu', 'Kilifi',\n  'Kirinyaga', 'Kisii', 'Kisumu', 'Kitui', 'Kwale', 'Laikipia', 'Lamu',\n  'Machakos', 'Makueni', 'Mandera', 'Marsabit', 'Meru', 'Migori', 'Mombasa',\n  'Murang’a', 'Nairobi', 'Nakuru', 'Nandi', 'Narok', 'Nyamira', 'Nyandarua',\n  'Nyeri', 'Samburu', 'Siaya', 'Taita Taveta', 'Tana River', 'Tharaka Nithi',\n  'Trans Nzoia', 'Turkana', 'Uasin Gishu', 'Vihiga', 'Wajir', 'West Pokot'\n];\nconst depts = [\n  'Finance and Economic Planning', 'Education and Technical Training', 'Health Services and Sanitation',\n  'Public Service Management', 'Agriculture', 'Land Housing and Urban Development', 'County Public Service Board','Water, Environment and Natural Resources and Natural Resources'\n];\nconst ethnicity = [\"Luhya\",\"Kalenjin\",\"Kikuyu\",\"Luo\",\"Teso\",\"Kisii\",\"Kenyan Somalis\"];\nconst subCountyMap: Record<string, string[]> = {\n  'Trans Nzoia': ['Kiminini', 'Saboti', 'Endebess', 'Cherangany', 'Kwanza'],\n  'Bungoma': ['Kabuchai', 'Kimilili', 'Sirisia', 'Webuye East', 'Webuye West', 'Bumula', 'Kanduyi', 'Mt Elgon','Tongaren'],\n  'Uasin Gishu': ['Soy', 'Turbo', 'Moiben', 'Kapseret', 'Kesses', 'Ainabkoi'],\n  'Kakamega': ['Lurambi', 'Malava', 'Mumias East', 'Mumias West', 'Navakholo', 'Butere', 'Ikolomani', 'Shinyalu', 'Khwisero','Lugari','Likuyani','Matungu'],\n  'West Pokot': ['Pokot South', 'Pokot North', 'Sigor', 'Kapenguria','Kacheliba'],\n  'Busia': ['Teso North', 'Teso South', 'Nambale', 'Matayos', 'Butula', 'Bunyala','Funyula','Budalang’i'],\n  'Vihiga': ['Luanda', 'Emuhaya', 'Hamisi', 'Sabatia', 'Vihiga'],\n  'Nandi': ['Nandi Hills', 'Chesumei', 'Emgwen', 'Mosop', 'Aldai', 'Tinderet'],\n  'Nairobi': ['Westlands', 'Langata', 'Embakasi', 'Starehe', 'Dagoretti', 'Kamukunji', 'Mathare', 'Kasarani', 'Makadara','Kibra','Roysambu','Dagoretti South','Dagoretti North','Ruaraka','Embakasi Central','Embakasi West','Embakasi East','Embakasi South','Embakasi North'],\n  'Mombasa': ['Mvita', 'Changamwe', 'Jomvu', 'Kisauni', 'Nyali', 'Likoni'],\n  'Kisumu': ['Kisumu Central', 'Kisumu East', 'Kisumu West', 'Nyando', 'Muhoroni', 'Seme'],\n  'Nakuru': ['Nakuru Town East', 'Nakuru Town West', 'Naivasha', 'Gilgil','Bahati','Njoro', 'Molo', 'Kuresoi North', 'Kuresoi South', 'Subukia', 'Rongai'],\n  'Machakos': ['Machakos Town', 'Mavoko', 'Masinga', 'Yatta', 'Kangundo', 'Kathiani', 'Matungulu','Mwala'],\n};\nconst wardMap: Record<string, string[]> = {\n    //Trans Nzoia County\n  'Cherangany': ['Makutano', 'Kaplamai', 'Sinyerere', 'Motosiet', 'Chepsiro/Kiptoror', 'Kapkures', 'Cherangany/Suwerwa'],\n  'Saboti': ['Saboti', 'Tuwan', 'Matisi', 'Mbakalo', 'Kinyoro'],\n  'Kiminini': ['Kiminini', 'Waitaluk', 'Sirende', 'Sikhendu', 'Nabiswa'],\n  'Endebess': ['Endebess', 'Matumbei', 'Chepchoina'],\n    'Kwanza': ['Kwanza', 'Kapomboi', 'Keiyo', 'Bidii'],\n    // Bungoma County\n  'Mt Elgon': [    'Cheptais', 'Chesikaki', 'Chepyuk', 'Kapkateny', 'Kaptama', 'Elgon'  ],\n  'Sirisia': [    'Namwela', 'Malakisi/South Kulisiru', 'Lwandanyi'  ],\n  'Kabuchai': [    'Kabuchai/Chwele', 'West Nalondo', 'Bwake/Luuya', 'Mukuyuni', 'South Bukusu' ],\n  'Kanduyi': [    'Bukembe West', 'Bukembe East', 'Township', 'Khalaba', 'Musikoma', 'East Sang’alo',  'Tuuti/Marakaru', 'West Sang’alo'\n  ],\n  'Bumula': ['Bumula', 'Khasoko', 'Kabula', 'Kimaeti', 'South Bukusu', 'Siboti'  ],\n  'Webuye East': ['Mihuu', 'Ndivisi', 'Maraka' ],\n  'Webuye West': [    'Sitikho', 'Matulo', 'Bokoli'  ],\n  'Kimilili': [    'Kibingei', 'Kimilili', 'Maeni', 'Kamukuywa'  ],\n  'Tongaren': [    'Mbakalo', 'Naitiri/Kabuyefwe', 'Milima', 'Ndalu/Tabani', 'Tongaren', 'Soysambu/Mitua'\n    ],\n  //Kakamega County\n  'Lugari': ['Mautuma', 'Lugari', 'Lumakanda', 'Chekalini', 'Chevaywa', 'Lawandeti'],\n  'Likuyani': ['Likuyani', 'Sango', 'Kongoni', 'Nzoia', 'Sinoko'],\n  'Malava': ['West Kabras', 'Chemuche', 'East Kabras', 'Butali/Chegulo', 'Manda-Shivanga', 'Shirugu-Mugai', 'South Kabras'],\n  'Lurambi': ['Butsotso East', 'Butsotso South', 'Butsotso Central', 'Sheywe', 'Mahiakalo', 'Shirere'],\n  'Mumias East': ['Lusheya/Lubinu', 'Malaha/Isongo', 'Makunga/East Wanga'],\n  'Navakholo': ['Ingotse-Mathia', 'Shinoyi-Shikomari', 'Esumeyia', 'Bunyala West', 'Bunyala East', 'Bunyala Central'],\n  'Mumias West': ['Mumias Central', 'Mumias North', 'Etenje', 'Musanda'],\n  'Matungu': ['Koyonzo', 'Kholera', 'Khalaba', 'Mayoni', 'Namamali'],\n  'Butere': ['Marama West', 'Marama Central', 'Marenyo-Shianda', 'Marama North', 'Marama South'],\n  'Khwisero': ['Kisa North', 'Kisa East', 'Kisa West', 'Kisa Central'],\n  'Ikolomani': ['Idakho South', 'Idakho North', 'Idakho East', 'Idakho Central'],\n  'Shinyalu': ['Isukha North', 'Isukha Central', 'Isukha South', 'Isukha East', 'Isukha West', 'Murhanda'],\n  //Uasin Gishu County\n  'Soy': ['Kuinet/Kapsuswa', 'Segero/Barsombe', 'Kipsomba', 'Moi’s Bridge', 'Kapkures'],\n  'Turbo': ['Huruma', 'Kamagut', 'Kapsaos', 'Kiplombe', 'Ngenyilel', 'Tapsagoi'],\n  'Moiben': ['Karuna/Meibeki', 'Kimumu', 'Moiben', 'Sergoit', 'Tembelio'],\n  'Kesses': ['Cheptiret/Kipchamo', 'Racecourse', 'Tarakwa', 'Tulwet/Chuiyat'],\n  'Kapseret': ['Kipkenyo', 'Langas', 'Ngeria', 'Simat/Kapseret', 'Megun'],\n  'Ainabkoi': ['Ainabkoi/Olare', 'Kaptagat', 'Kapsoya'],\n     // Nairobi County\n  'Westlands': ['Kitisuru', 'Parklands', 'Karura', 'Mountain View', 'Kangemi'],\n  'Kibra': ['Makina', 'Woodley', 'Sarang’ombe', 'Lindi', 'Laini Saba'],\n  'Roysambu': ['Githurai', 'Kahawa West', 'Zimmerman', 'Roysambu', 'Kahawa'],\n  'Dagoretti South': ['Mutu-ini', 'Ngando', 'Uthiru', 'Waithaka', 'Riruta'],\n  'Dagoretti North': ['Kawangware', 'Kilimani', 'Gatina', 'Kileleshwa', 'Kabiro'],\n  'Langata': ['Karen', 'Nairobi West', 'South C', 'Nyayo Highrise'],\n  'Kasarani': ['Clay City', 'Ruai', 'Mwiki', 'Njiru', 'Kamulu'],\n  'Ruaraka': ['Baba Dogo', 'Lucky Summer', 'Mathare North', 'Utalii', 'Korogocho'],\n  'Mathare': ['Huruma', 'Mabatini', 'Kiamaiko', 'Ngei', 'Mlango Kubwa'],\n  'Starehe': ['Nairobi Central', 'Ngara', 'Pangani', 'Ziwani', 'Landimawe', 'Nairobi South'],\n  'Makadara': ['Maringo', 'Hamza', 'Viwandani', 'Harambee', 'Makongeni'],\n  'Kamukunji': ['Pumwani', 'Eastleigh North', 'Eastleigh South', 'Airbase', 'California'],\n  'Embakasi Central': ['Kayole North', 'Kayole South', 'Komarocks', 'Chokaa', 'Matopeni'],\n  'Embakasi East': ['Upper Savanna', 'Lower Savanna', 'Embakasi', 'Utawala', 'Mihang’o'],\n  'Embakasi West': ['Umoja 1', 'Umoja 2', 'Mowlem', 'Kariobangi South'],\n  'Embakasi North': ['Kariobangi North', 'Dandora I', 'Dandora II', 'Dandora III', 'Dandora IV'],\n  'Embakasi South': ['Kwa Reuben', 'Imara Daima', 'Kwa Njenga', 'Pipeline', 'Kware'],\n\n  // Busia County\n  'Teso North': ['Malaba Central', 'Malaba North', 'Ang’urai South', 'Malaba South', 'Ang’urai North', 'Ang’urai East'],\n  'Teso South': ['Ang’orom', 'Chakol South', 'Amukura Central', 'Chakol North', 'Amukura East', 'Amukura West'],\n  'Nambale': ['Nambale Township', 'Bukhayo North/Waltsi', 'Bukhayo East', 'Bukhayo Central'],\n  'Matayos': ['Bukhayo West', 'Mayenje', 'Matayos South', 'Busibwabo', 'Burumba'],\n  'Butula': ['Marachi West', 'Kingandole', 'Marachi Central', 'Marachi East', 'Marachi North', 'Elugulu'],\n  'Funyula': ['Namboboto/Nambuku', 'Nangina', 'Bwiri', 'Ageng’a Nanguba'],\n  'Budalang’i': ['Bunyala Central', 'Bunyala North', 'Bunyala West', 'Bunyala South'],\n\n  // Mombasa County\n  'Changamwe': ['Port Reitz', 'Kipevu', 'Airport', 'Miritini', 'Chaani'],\n  'Jomvu': ['Jomvu Kuu', 'Magongo', 'Mikindani'],\n  'Kisauni': ['Mjambere', 'Junda', 'Bamburi', 'Mwakirunge', 'Mtopanga', 'Magogoni', 'Shanzu'],\n  'Nyali': ['Frere Town', 'Ziwa la Ng’ombe', 'Mkomani', 'Kongowea', 'Kadzandani'],\n  'Likoni': ['Mtongwe', 'Shika Adabu', 'Bofu', 'Likoni', 'Timbwani'],\n  'Mvita': ['Mji Wa Kale/Makadara', 'Tudor', 'Tononoka', 'Shimanzi/Ganjoni', 'Majengo'],  \n  // 🌄 West Pokot County\n  'Kapenguria': ['Riwo', 'Kapenguria', 'Mnagei', 'Siyoi', 'Endugh', 'Sook'],\n  'Sigor': ['Sekerr', 'Masool', 'Lomut', 'Weiwei'],\n  'Kacheliba': ['Suam', 'Kodich', 'Kasei', 'Kapchok', 'Kiwawa', 'Alale'],\n  'Pokot South': ['Chepareria', 'Batei', 'Lelan', 'Tapach'],\n\n  // 🌿 Vihiga County\n  'Vihiga': ['Lugaga-Wamuluma', 'South Maragoli', 'Central Maragoli', 'Mungoma'],\n  'Sabatia': ['Lyaduywa/Izava', 'West Sabatia', 'Chavakali', 'North Maragoli', 'Wodanga', 'Busali'],\n  'Hamisi': ['Shiru', 'Gisambai', 'Shamakhokho', 'Banja', 'Muhudu', 'Tambaa', 'Jepkoyai'],\n  'Luanda': ['Luanda Township', 'Wemilabi', 'Mwibona', 'Luanda South', 'Emabungo'],\n  'Emuhaya': ['North East Bunyore', 'Central Bunyore', 'West Bunyore'],\n\n  // 🏞️ Nandi County\n  'Mosop': ['Chepterwai', 'Kipkaren', 'Kurgung/Surungai', 'Kabiyet', 'Ndalat', 'Kabisaga', 'Sangalo/Kebulonik'],\n  'Aldai': ['Kabwareng', 'Terik', 'Kemeloi-Maraba', 'Kobujoi', 'Kaptumo-Kaboi', 'Koyo-Ndurio'],\n  'Chesumei': ['Chemundu/Kapng’etuny', 'Kosirai', 'Lelmokwo/Ngechek', 'Kaptel/Kamoiywo', 'Kiptuya'],\n  'Emgwen': ['Chepkumia', 'Kapkangani', 'Kapsabet', 'Kilibwoni'],\n  'Nandi Hills': ['Nandi Hills', 'Chepkunyuk', 'Ol’lessos', 'Kapchorua'],\n  'Tinderet': ['Songhor/Soba', 'Tinderet', 'Chemelil/Chemase', 'Kapsimotwo'],\n\n  // 🌋 Nakuru County\n  'Molo': ['Mariashoni', 'Elburgon', 'Turi', 'Molo'],\n  'Njoro': ['Mau Narok', 'Mauche', 'Kihingo', 'Nessuit', 'Lare', 'Njoro'],\n  'Naivasha': ['Biashara', 'Hell’s Gate', 'Lake View', 'Maiella', 'Mai Mahiu', 'Olkaria', 'Naivasha East', 'Viwandani'],\n  'Nakuru Town West': ['Barut', 'London', 'Kaptembwo', 'Kapkures', 'Rhoda', 'Shabaab'],\n  'Gilgil': ['Gilgil', 'Elementaita', 'Mbaruk/Eburu', 'Malewa West', 'Murindati'],\n  'Kuresoi South': ['Amalo', 'Keringet', 'Kiptagich', 'Tinet'],\n  'Kuresoi North': ['Kiptororo', 'Nyota', 'Sirikwa', 'Kamara'],\n  'Subukia': ['Subukia', 'Waseges', 'Kabazi'],\n  'Rongai': ['Menengai West', 'Visoi', 'Mosop', 'Solai'],\n  'Bahati': ['Dundori', 'Kabatini', 'Kiamaina', 'Lanet/Umoja', 'Bahati'],\n  'Nakuru Town East': ['Biashara', 'Kivumbini', 'Flamingo', 'Menengai', 'Nakuru East'],\n\n  // 🏙️ Machakos County\n  'Masinga': ['Kivaa', 'Masinga Central', 'Ekalakala', 'Muthesya', 'Ndithini'],\n  'Yatta': ['Ndalani', 'Matuu', 'Kithimani', 'Ikomba', 'Katangi'],\n  'Kangundo': ['Kangundo North', 'Kangundo Central', 'Kangundo East', 'Kangundo West'],\n  'Matungulu': ['Tala', 'Matungulu North', 'Matungulu East', 'Matungulu West', 'Kyeleni'],\n  'Kathiani': ['Mitaboni', 'Kathiani Central', 'Upper Kaewa/Iveti', 'Lower Kaewa/Kaani'],\n  'Mavoko': ['Mlolongo', 'Syokimau/Mulolongo', 'Kinanie', 'Athi River'],\n  'Machakos Town': ['Kalama', 'Mua', 'Mutituni', 'Machakos Central', 'Mumbuni North', 'Muvuti/Kiima-Kimwe', 'Kola'],\n  'Mwala': ['Mwala', 'Muthetheni', 'Wamunyu', 'Kibauni', 'Makutano/Mwala']\n};\nasync function seedDept() {\n  for (const name of depts) {\n    await storage.seedDepartment({ name });\n  }\n}\nasync function seedEthnicity() {\n  for (const name of ethnicity) {\n    await storage.seedEthnicity({ name });\n  }\n}\nasync function seedJobGroups() {\n  for (const name of jobGroups) {\n    await storage.seedJobGroup({ name });\n  }\n  console.log('✅ Job Groups seeded');\n}\nasync function seedCounties() {\n  for (const name of counties) {\n    await storage.seedCounties({ name });\n  }\n  console.log('✅ Counties seeded');\n}\nasync function seedSubCounties() {\n  for (const [countyName, subNames] of Object.entries(subCountyMap)) {\n    const county = await storage.getCountyByCountyName(countyName);\n    if (!county) {\n      console.warn(`⚠️ County not found: ${countyName}`);\n      continue;\n    }\n\n    for (const name of subNames) {\n      await storage.seedSubCounties({\n        name,\n        countyId: county.id,\n        createdAt: new Date(),\n      });\n    }\n  }\n\n  console.log('✅ Sub-counties seeded');\n}\nasync function seedStudyArea() {\n  for (const name of studyArea) {\n    await storage.seedStudy({ name });\n  }\n  console.log('✅ Study Ares seeded');\n}\nasync function seedSpecialization() {\n  for (const [studyArea, specialize] of Object.entries(specializations)) {\n    const study = await storage.getStudyAreaByName(studyArea);\n    if (!study) {\n      console.warn(`⚠️ Study area not found: ${studyArea}`);\n      continue;\n    }\n    for (const name of specialize) {\n      await storage.seedSpecialize({\n        name,\n        studyArea: study.id,\n        createdAt: new Date(),\n      });\n    }\n  }\n\n  console.log('✅ Specialization seeded');\n}\nasync function seedWards() {\n  for (const [constituencyName, wardNames] of Object.entries(wardMap)) {\n    const constituency = await storage.getConstituencyByName(constituencyName);\n    if (!constituency) {\n      console.warn(`⚠️ Constituency not found: ${constituencyName}`);\n      continue;\n    }\n\n    for (const name of wardNames) {\n      await storage.seedWard({\n        name,\n        constituencyId: constituency.id,\n        createdAt: new Date(),\n      });\n    }\n  }\n\n  console.log('✅ Wards seeded successfully');\n}\nasync function seedCertificateLevel() {\n  for (const name of certificateLevel) {\n    await storage.seedCertLevel({ name });\n  }\n  console.log('✅ Certificate level seeded');\n}\nasync function seedAwards() {\n  for (const name of Awards) {\n    await storage.seedAward({ name });\n  }\n  console.log('✅ Awards seeded');\n}\n// Run all seeds\nasync function runAllSeeds() {\n  await storage.truncateAll();\n  await seedJobGroups();\n  await seedCounties();\n  await seedSubCounties();\n  await seedWards();\n  await seedStudyArea();\n  await seedSpecialization();\n  await seedAwards();\n  await seedCertificateLevel();\n  await seedDept();\n  await seedEthnicity();\n\n  console.log('🌱 All seed operations completed');\n}\n\nrunAllSeeds().catch(console.error);\n ","size_bytes":16819},"server/applicantService.ts":{"content":"import { IStorage } from \"./storage\";\n\nexport class ApplicantService {\n  constructor(private storage: IStorage) { }\n  async updateStep(applicantId: number, step: number, data: any) {  \n  await this.updateBasicInfo(applicantId, data);  \n\n  // ✅ always return the fresh full profile\n  return this.storage.getApplicantById(applicantId);\n}\n  async updateBasicInfo(applicantId: number, data: any) {\n    return this.storage.updateApplicant(applicantId, { ...data }, data.step);\n  }\nasync resolveApplicantId(userId: string): Promise<number> {\n  let applicant = await this.storage.getApplicant(userId);\n  const data:any = {userId, ...applicant}\n  if (!applicant) {\n    const newApplicant = await this.storage.createApplicant(data);\n    return newApplicant.id;\n  }\n  return applicant.id;\n}\n\n}\n","size_bytes":786},"server/upsertHelper.ts":{"content":"import { db } from \"./db\";\nimport { eq, inArray, Table, Column } from \"drizzle-orm\";\nimport { normalizeDates, autoDateFields } from \"../client/src/lib/sanitizeDates\";\n\ninterface UpsertOptions<T> {\n  table: Table;\n  primaryKey: Column<any>;\n  foreignKey: Column<any>;\n  foreignKeyValue: number | string;\n  records: T[];\n  label?: string;\n  diagnostics?: boolean;\n}\n\nexport async function upsertByPKAndFK<T extends Record<string, any>>({\n  table,\n  primaryKey,\n  foreignKey,\n  foreignKeyValue,\n  records,\n  label,\n  diagnostics = false,\n}: UpsertOptions<T>): Promise<{\n  success: boolean;\n  inserted: number;\n  updated: number;\n  deleted: number;\n}> {\n  const tableLabel = label ?? (table as any)._?.name ?? \"unknown\";\n  const dateFields = autoDateFields[tableLabel] || [];\n\n  if (diagnostics) {\n    console.log(`🔄 Upserting ${records.length} records into ${tableLabel}`);\n  }\n\n  return await db.transaction(async (trx) => {\n    // 1️⃣ Fetch existing records for this applicant\n    const existing = await trx\n      .select({ id: primaryKey })\n      .from(table)\n      .where(eq(foreignKey, foreignKeyValue));\n\n    const existingIds = new Set(existing.map((r) => r.id));\n    const incomingIds = new Set(records.map((r) => r.id).filter(Boolean));\n\n    // 2️⃣ Delete only rows that are no longer in incoming payload\n    const idsToDelete = Array.from(existingIds).filter(\n      (id) => !incomingIds.has(id)\n    );\n      if (idsToDelete.length > 0) {\n        console.log(`🗑️ Deleting ${idsToDelete.length} IDs from ${tableLabel}`);\n      //   await trx.delete(table).where(inArray(primaryKey, idsToDelete));\n      if (diagnostics) console.log(\"🗑️ Deleted IDs:\", idsToDelete);\n    }\n\n    // 3️⃣ Insert or Update\n    let inserted = 0;\n    let updated = 0;\n\n    for (const r of records) {\n      const payload = normalizeDates(\n        { ...r, [foreignKey.name]: foreignKeyValue },\n        { dateFields, setUpdatedAt: true }\n      );\n\n      if (r.id && existingIds.has(r.id)) {\n        await trx.update(table).set(payload).where(eq(primaryKey, r.id));\n        updated++;\n        if (diagnostics) console.log(`✏️ Updated row id=${r.id}`, payload);\n      } else {\n        await trx.insert(table).values(payload);\n        inserted++;\n        if (diagnostics) console.log(`➕ Inserted new row ${table}`, payload);\n      }\n    }\n\n    return { success: true, inserted, updated, deleted: idsToDelete.length };\n  });\n}","size_bytes":2430},"server/upsertRecord.ts":{"content":"import { db } from \"./db\";\nimport { eq, inArray, Table, Column } from \"drizzle-orm\";\nimport { normalizeDates, autoDateFields } from \"../client/src/lib/sanitizeDates\";\n\n// 🔹 Option A: Table WITH FK\ninterface UpsertWithFK<T> {\n  table: Table;\n  records: T[];\n  primaryKeyColumn: Column<any>;        // PK required\n  foreignKeyColumn: Column<any>;        // FK required\n  foreignKeyValue: number | string;     // e.g. applicantId\n  diagnostics?: boolean;\n  label?: string;\n}\n\n// 🔹 Option B: Table WITHOUT FK\ninterface UpsertWithoutFK<T> {\n  table: Table;\n  records: T[];\n  primaryKeyColumn: Column<any>;        // PK required\n  diagnostics?: boolean;\n  label?: string;\n}\n\n// 🔹 Union type\ntype UpsertOptions<T> = UpsertWithFK<T> | UpsertWithoutFK<T>;\n\n/**\n * Generic upsert helper\n * - Deletes rows that are missing in incoming payload\n * - Updates rows that have an `id`\n * - Inserts rows that don’t have an `id`\n */\nexport async function upsertRecordsByPK<T extends Record<string, any>>(\n  options: UpsertOptions<T>\n): Promise<{ success: boolean; inserted: number; updated: number; deleted: number }> {\n  const { table, records, primaryKeyColumn, diagnostics = false, label } = options;\n\n  const hasFK = \"foreignKeyColumn\" in options;\n  const foreignKeyColumn = hasFK ? options.foreignKeyColumn : undefined;\n  const foreignKeyValue = hasFK ? options.foreignKeyValue : undefined;\n\n  const tableLabel = label ?? (table as any)._?.name ?? \"unknown\";\n  const dateFields = autoDateFields[tableLabel] || [];\n\n  if (diagnostics) {\n    console.log(`🔄 Upserting ${records.length} records into ${tableLabel}`);\n  }\n\n  return await db.transaction(async (trx) => {\n    // 1️⃣ Fetch existing IDs\n    let existing: { id: any }[] = [];\n    if (hasFK && foreignKeyColumn && foreignKeyValue !== undefined) {\n      existing = await trx\n        .select({ id: primaryKeyColumn })\n        .from(table)\n        .where(eq(foreignKeyColumn, foreignKeyValue));\n    } else {\n      existing = await trx.select({ id: primaryKeyColumn }).from(table);\n    }\n\n    const existingIds = new Set(existing.map((r) => r.id));\n    const incomingIds = new Set(records.map((r) => r.id).filter(Boolean));\n\n    // 2️⃣ Delete rows not in incoming payload\n    const idsToDelete = [...existingIds].filter((id) => !incomingIds.has(id));\n    if (idsToDelete.length > 0) {\n      await trx.delete(table).where(inArray(primaryKeyColumn, idsToDelete));\n      if (diagnostics) console.log(\"🗑️ Deleted IDs:\", idsToDelete);\n    }\n\n    // 3️⃣ Insert/Update\n    let insertedCount = 0;\n    let updatedCount = 0;\n\n    for (const r of records) {\n      const payload = normalizeDates(\n        hasFK && foreignKeyColumn && foreignKeyValue !== undefined\n          ? { ...r, [foreignKeyColumn.name]: foreignKeyValue }\n          : { ...r },\n        { dateFields, setUpdatedAt: true }\n      );\n\n      if (r.id && existingIds.has(r.id)) {\n        await trx.update(table).set(payload).where(eq(primaryKeyColumn, r.id));\n        updatedCount++;\n        if (diagnostics) console.log(`✏️ Updated row id=${r.id}`);\n      } else {\n        await trx.insert(table).values(payload);\n        insertedCount++;\n        if (diagnostics) console.log(\"➕ Inserted new row:\", payload);\n      }\n    }\n\n    return {\n      success: true,\n      inserted: insertedCount,\n      updated: updatedCount,\n      deleted: idsToDelete.length,\n    };\n  });\n}\n","size_bytes":3397},"shared/schemas.ts":{"content":"import { z } from \"zod\";\n\n// ------------------ Step 1: Personal Details ------------------ //\nexport const personalDetailsSchema = z.object({\n  salutation: z.string().min(1, \"Salutation is required\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  surname: z.string().min(1, \"Surname is required\"),\n  otherName: z.string().optional(),\n  idPassportType: z.enum([\"national_id\", \"passport\", \"alien_id\"], {\n    errorMap: () => ({ message: \"Please select a valid ID/Passport type\" }),\n  }),\n  nationalId: z.string().min(5, \"National ID is required\"),\n  dateOfBirth: z.coerce.date({ required_error: \"Date of birth is required\" }),\n  gender: z.enum([\"Male\", \"Female\"], {\n    errorMap: () => ({ message: \"Gender is required\" }),\n  }),\n  nationality: z.string().optional(),\n  phoneNumber: z.string().min(10, \"Valid phone number is required\"),\n  altPhoneNumber: z.string().optional(),\n  ethnicity: z.string().optional(),\n  religion: z.string().optional(),\n  kraPin: z.string().optional(),\n  isPwd: z.boolean().optional(),\n  pwdNumber: z.string().optional(),\n  isEmployee: z.boolean().optional(),\n});\n\n// ------------------ Step 1.5: Employee Details ------------------ //\nexport const employeeDetailsSchema = z.object({\n  personalNumber: z.string().min(1, \"Personal number is required\"),\n  designation: z.string().min(1, \"Designation is required\"),\n  dutyStation: z.string().min(1, \"Duty station is required\"),\n  jg: z.string().min(1, \"Job group is required\"),\n  actingPosition: z.string().optional(),\n  departmentId: z.number({ invalid_type_error: \"Department is required\" }),\n  dofa: z.string().optional(),\n  doca: z.string().optional(),\n});\n\n// ------------------ Step 2: Address ------------------ //\nexport const addressSchema = z.object({\n  countyId: z.number().nullable().optional(),\n  constituencyId: z.number().nullable().optional(),\n  wardId: z.number().nullable().optional(),\n  address: z.string().optional(),\n});\n\n// ------------------ Step 3: Education ------------------ //\nexport const educationSchema = z.object({\n  institution: z.string().min(1, \"Institution is required\"),\n  qualification: z.string().min(1, \"Qualification is required\"),\n  specializationId: z.number().nullable().optional(),\n  certificateLevelId: z.number().nullable().optional(),\n  studyArea: z.number({ invalid_type_error: \"Study area is required\" }),\n  courseId: z.number().nullable().optional(),\n  grade: z.string().optional(),\n  courseName: z.string().optional(),\n  yearFrom: z\n    .number({ invalid_type_error: \"Year from is required\" })\n    .min(1950, \"Invalid year\")\n    .max(new Date().getFullYear(), \"Invalid year\"),\n  yearCompleted: z\n    .number({ invalid_type_error: \"Year completed is required\" })\n    .min(1950, \"Invalid year\")\n    .max(new Date().getFullYear(), \"Invalid year\"),\n});\n\nexport const educationStepSchema = z.object({\n  education: z.array(educationSchema).min(1, \"At least one education record is required\"),\n});\n\n// ------------------ Step 4: Short Courses ------------------ //\nexport const shortCourseSchema = z.object({\n  course: z.string().min(1, \"Course name is required\"),\n  institutionName: z.string().min(1, \"Institution name is required\"),\n  certificateNo: z.string().min(1, \"Certificate number is required\"),\n  startDate: z.string().min(1, \"Start date is required\"),\n  endDate: z.string().min(1, \"End date is required\"),\n});\n\nexport const shortCoursesStepSchema = z.object({\n  shortCourses: z.array(shortCourseSchema),\n});\n\n// ------------------ Step 5: Professional Qualifications ------------------ //\nexport const professionalQualificationSchema = z.object({\n  institution: z.string().min(1, \"Institution is required\"),\n  studentNo: z.string().min(1, \"Student registration number is required\"),\n  areaOfStudyId: z.number().nullable().optional(),\n  specialisationId: z.number({ invalid_type_error: \"Specialisation is required\" }),\n  course: z.string().min(1, \"Course is required\"),\n  awardId: z.number({ invalid_type_error: \"Award is required\" }),\n  gradeId: z.number({ invalid_type_error: \"Grade is required\" }),\n  examiner: z.string().min(1, \"Examiner is required\"),\n  certificateNo: z.string().min(1, \"Certificate number is required\"),\n  startDate: z.string().min(1, \"Start date is required\"),\n  endDate: z.string().min(1, \"End date is required\"),\n});\n\nexport const professionalQualificationsStepSchema = z.object({\n  professionalQualifications: z.array(professionalQualificationSchema),\n});\n\n// ------------------ Step 6: Employment History ------------------ //\nexport const employmentSchema = z.object({\n  employer: z.string().min(1, \"Employer is required\"),\n  position: z.string().min(1, \"Position is required\"),\n  isCurrent: z.boolean().optional(),\n  startDate: z.string().min(1, \"Start date is required\"),\n  endDate: z.string().min(1, \"End date is required\"),\n  duties: z.string().optional(),\n});\n\nexport const employmentStepSchema = z.object({\n  employmentHistory: z.array(employmentSchema),\n});\n\n// ------------------ Step 7: Referees ------------------ //\nexport const refereeSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  position: z.string().min(1, \"Position is required\"),\n  organization: z.string().min(1, \"Organization is required\"),\n  relationship: z.string().min(1, \"Relationship is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  phoneNumber: z.string().min(1, \"Phone number is required\"),\n});\n\nexport const refereesStepSchema = z.object({\n  referees: z.array(refereeSchema)\n    .min(3, \"You must provide exactly 3 referees\")\n    .max(3, \"You can only provide exactly 3 referees\")\n    .length(3, \"Exactly 3 referees are required\"),\n});\n\n// ------------------ Step 8: Documents ------------------ //\nexport const documentSchema = z.object({\n  docType: z.string().min(1, \"Document type is required\"),\n  filePath: z.string().min(1, \"File path is required\"),\n});\n\nexport const documentsStepSchema = z.object({\n  documents: z.array(documentSchema),\n});\n\n// ------------------ Master Step Schemas ------------------ //\nexport const stepSchemas: Record<number, z.ZodTypeAny> = {\n  1: personalDetailsSchema,\n  1.5: employeeDetailsSchema,\n  2: addressSchema,\n  3: educationStepSchema,\n  4: shortCoursesStepSchema,\n  5: professionalQualificationsStepSchema,\n  6: employmentStepSchema,\n  7: refereesStepSchema,\n  8: documentsStepSchema,\n};\n\n// ------------------ Step Defaults ------------------ //\nexport const stepDefaults: Record<number, any> = {\n  1: {\n    salutation: \"\",\n    firstName: \"\",\n    surname: \"\",\n    otherName: \"\",\n    phoneNumber: \"\",\n  },\n  1.5: {\n    personalNumber: \"\",\n    designation: \"\",\n    dutyStation: \"\",\n    jg: \"\",\n    departmentId: 0,\n  },\n  2: { countyId: null, constituencyId: null, wardId: null, address: \"\" },\n  3: {\n    education: [\n      {\n        institution: \"\",\n        qualification: \"\",\n        specializationId: null,\n        certificateLevelId: null,\n        studyArea: 0,\n        courseId: null,\n        grade: \"\",\n        yearFrom: new Date().getFullYear(),\n        yearCompleted: new Date().getFullYear(),\n      },\n    ],\n  },\n  4: {\n    shortCourses: [\n      {\n        course: \"\",\n        institutionName: \"\",\n        certificateNo: \"\",\n        startDate: \"\",\n        endDate: \"\",\n      },\n    ],\n  },\n  5: {\n    professionalQualifications: [\n      {\n        institution: \"\",\n        studentNo: \"\",\n        areaOfStudyId: null,\n        specialisationId: 0,\n        course: \"\",\n        awardId: 0,\n        gradeId: 0,\n        examiner: \"\",\n        certificateNo: \"\",\n        startDate: \"\",\n        endDate: \"\",\n      },\n    ],\n  },\n  6: {\n    employmentHistory: [\n      {\n        employer: \"\",\n        position: \"\",\n        startDate: \"\",\n        endDate: \"\",\n        responsibilities: \"\",\n      },\n    ],\n  },\n  7: {\n    referees: [\n      {\n        name: \"\",\n        position: \"\",\n        organization: \"\",\n        relationship: \"\",\n        email: \"\",\n        phoneNumber: \"\",\n      },\n      {\n        name: \"\",\n        position: \"\",\n        organization: \"\",\n        relationship: \"\",\n        email: \"\",\n        phoneNumber: \"\",\n      },\n      {\n        name: \"\",\n        position: \"\",\n        organization: \"\",\n        relationship: \"\",\n        email: \"\",\n        phoneNumber: \"\",\n      },\n    ],\n  },\n  8: { documents: [] },\n};","size_bytes":8259},"client/src/hooks/useApplicantVerification.ts":{"content":"import { useState, useEffect } from 'react';\n\ninterface VerifiedEmployee {\n  personalNumber?: string;\n  designation?: string;\n  dutyStation?: string;\n  jg?: string;\n}\n\nexport function useApplicantVerification(form: any) {\n  const [isVerifiedEmployee, setIsVerifiedEmployee] = useState(false);\n  const [showEmployeeVerification, setShowEmployeeVerification] = useState(false);\n  const [verifiedEmployeeData, setVerifiedEmployeeData] = useState<VerifiedEmployee>({});\n\n  // Watch for checkbox changes\n  useEffect(() => {\n    const isEmployee = form.watch('isEmployee');\n    if (isEmployee && !isVerifiedEmployee) {\n      setShowEmployeeVerification(true);\n    }\n  }, [form.watch('isEmployee')]);\n\n  const verifyEmployee = (data: VerifiedEmployee) => {\n    setVerifiedEmployeeData(data);\n    setIsVerifiedEmployee(true);\n    setShowEmployeeVerification(false);\n  };\n\n  const getNextStep = (currentStep: number): number => {\n    if (currentStep === 1 && isVerifiedEmployee) return 1.5;\n    return currentStep + 1;\n  };\n\n  return {\n    isVerifiedEmployee,\n    showEmployeeVerification,\n    setShowEmployeeVerification,\n    verifiedEmployeeData,\n    verifyEmployee,\n      getNextStep,\n    setIsVerifiedEmployee,\n  };\n}\n","size_bytes":1213},"client/src/hooks/useProfileFormState.ts":{"content":"import { useState } from 'react';\n\nexport function useProfileFormState(step: number, isVerifiedEmployee: boolean) {\n  const [educationRecords, setEducationRecords] = useState([]);\n  const [employeeData, setEmployeeData] = useState({\n    personalNumber: '',\n    designation: '',\n    dutyStation: '',\n    jg: '',\n  });\n  const [professionalQualifications, setProfessionalQualifications] = useState([\n    { institution: '', studentNo: '', areaOfStudyId: 0, specialisationId: 0, course: '', awardId: 0, gradeId: '', examiner: '', certificateNo: '', startDate: '', endDate: '' }\n  ]);\n  const [shortCourses, setShortCourses] = useState([\n    { institutionName: '', course: '', certificateNo: '', startDate: '', endDate: '' }\n  ]);\n  const [employmentHistory, setEmploymentHistory] = useState([]);\n  const [referees, setReferees] = useState([\n    { name: '', position: '', organization: '', email: '', phoneNumber: '', relationship: '' }\n  ]);\n  const [uploadedDocuments, setUploadedDocuments] = useState<{ [key: string]: File | null }>({\n    national_id: null,\n    certificates: null,\n    transcripts: null,\n    professional_certs: null,\n    kra_pin: null,\n    good_conduct: null,\n  });\n\n  const getStepData = () => ({\n    ...(step === 1 && { isVerifiedEmployee }),\n    ...(step === 1.5 && { employee: employeeData }),\n    ...(step === 3 && { education: educationRecords }),\n    ...(step === 4 && { shortCourses }),\n    ...(step === 5 && { professionalQualifications }),\n    ...(step === 6 && { employmentHistory }),\n    ...(step === 7 && { referees }),\n    ...(step === 8 && { documents: uploadedDocuments }),\n  });\n\n  return {\n    educationRecords,\n    setEducationRecords,\n    employeeData,\n    setEmployeeData,\n    professionalQualifications,\n    setProfessionalQualifications,\n    shortCourses,\n    setShortCourses,\n    employmentHistory,\n    setEmploymentHistory,\n    referees,\n    setReferees,\n    uploadedDocuments,\n    setUploadedDocuments,\n    getStepData,\n  };\n}\n","size_bytes":1969},"client/src/lib/sanitizeDates.ts":{"content":"/**\n * Convert form values into a proper Date or null.\n * Handles:\n *  - JS Date objects\n *  - \"YYYY-MM-DD\" strings from <input type=\"date\">\n *  - numeric years (e.g., 2021 → Jan 1st of that year)\n *  - other strings (tries to parse)\n * Returns `null` if invalid.\n */\nexport function sanitizeDate(value: any): Date | null {\n  if (value === null || value === undefined || value === \"\") {\n    return null;\n  }\n\n  // Already a Date\n  if (value instanceof Date) {\n    return isNaN(value.getTime()) ? null : value;\n  }\n\n  // Numeric year (e.g., 2021 → Jan 1, 2021)\n  if (typeof value === \"number\") {\n    const parsed = new Date(value, 0, 1);\n    return isNaN(parsed.getTime()) ? null : parsed;\n  }\n\n  // YYYY-MM-DD string (from <input type=\"date\">)\n  if (typeof value === \"string\" && /^\\d{4}-\\d{2}-\\d{2}$/.test(value)) {\n    const parsed = new Date(`${value}T00:00:00Z`);\n    return isNaN(parsed.getTime()) ? null : parsed;\n  }\n\n  // Try parsing anything else (e.g., ISO string)\n  const parsed = new Date(value);\n  return isNaN(parsed.getTime()) ? null : parsed;\n}\nexport const filterEmptyFields = (obj: any): any => {\n  if (Array.isArray(obj)) {\n    return obj.map(filterEmptyFields).filter((v) => v !== null && v !== undefined);\n  }\n\n  if (obj instanceof Date) {\n    return obj; // ✅ keep real Date objects\n  }\n\n  if (typeof obj === \"string\") {\n    // ✅ keep ISO date strings (YYYY-MM-DD...)\n    if (/^\\d{4}-\\d{2}-\\d{2}T/.test(obj)) return obj;\n    if (obj.trim() === \"\") return null;\n    return obj;\n  }\n\n  if (obj && typeof obj === \"object\") {\n    return Object.fromEntries(\n      Object.entries(obj)\n        .map(([k, v]) => [k, filterEmptyFields(v)])\n        .filter(([_, v]) => v !== null && v !== undefined && v !== \"\")\n    );\n  }\n\n  if (obj === null || obj === undefined) return null;\n\n  return obj; // ✅ keep numbers, booleans, etc.\n};\ntype AnyRecord = Record<string, any>;\n\ninterface NormalizeOptions {\n  dateFields?: string[];\n  protectCreatedAt?: boolean;\n  setUpdatedAt?: boolean;\n}\n\nexport function normalizeDates<T extends Record<string, any>>(\n  input: T,\n  options: NormalizeOptions = {}\n): T {\n  const {\n    dateFields = [],\n    protectCreatedAt = true,\n    setUpdatedAt = true,\n  } = options;\n\n  const output: Record<string, any> = { ...input };\n\n  // ✅ Convert provided fields into Dates\n  for (const field of dateFields) {\n    if (field in output && output[field]) {\n      output[field] = new Date(output[field]);\n    }\n  }\n\n  // ✅ Only strip createdAt on updates\n  if (protectCreatedAt && \"createdAt\" in output && output.id) {\n    delete output.createdAt;\n  }\n\n  // ✅ Always refresh updatedAt\n  if (setUpdatedAt) {\n    output.updatedAt = new Date();\n  }\n\n  return output as T;\n}\n// autoDateFields.ts\nexport const autoDateFields: Record<string, string[]> = {\n  educationRecords: [], // none are actual Date columns, just yearFrom/yearCompleted (ints)\n  shortCourse: [\"startDate\", \"endDate\"],\n  professionalQualifications: [\"startDate\", \"endDate\"],\n  employmentHistory: [\"startDate\", \"endDate\"],\n  referees: [], // no dates\n  documents: [], // no dates\n};\n","size_bytes":3088},"client/src/components/layout/AuthDrawerz.tsx":{"content":"import { useState } from \"react\";\nimport { useForm, SubmitHandler } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport {\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n} from \"@/components/ui/drawer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Progress } from \"@/components/ui/progress\"; // ✅ import Progress bar\n\n// ------------------ Signup Schema ------------------ //\nconst signupSchema = z\n  .object({\n    firstName: z.string().min(2, \"First name must be at least 2 characters\"),\n    lastName: z.string().min(2, \"Last name must be at least 2 characters\"),\n    email: z.string().email(\"Invalid email address\"),\n    phoneNumber: z.string().min(10, \"Phone number must be at least 10 digits\"),\n    idPassportType: z\n      .enum([\"national_id\", \"passport\", \"alien_id\"], {\n        required_error: \"Please select ID/Passport type\",\n      })\n      .optional(),\n    idPassportNumber: z.string().min(5, \"ID/Passport number is required\"),\n    password: z\n      .string()\n      .min(8, \"Password must be at least 8 characters\")\n      .regex(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[\\W_]).{8,}$/,\n        \"Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character\"\n      ),\n    confirmPassword: z.string(),\n    profilePhoto: z.instanceof(File).optional(),\n    agreeToTerms: z\n      .boolean()\n      .refine((val) => val === true, \"You must agree to the terms and conditions\"),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords don't match\",\n    path: [\"confirmPassword\"],\n  });\n\ntype SignupData = z.infer<typeof signupSchema>;\n\n// ------------------ Password Strength Utility ------------------ //\nfunction getPasswordStrength(password: string) {\n  let score = 0;\n  if (password.length >= 8) score++;\n  if (/[A-Z]/.test(password)) score++;\n  if (/[a-z]/.test(password)) score++;\n  if (/[0-9]/.test(password)) score++;\n  if (/[\\W_]/.test(password)) score++;\n\n  if (score <= 2) return { label: \"Weak\", value: 33, color: \"bg-red-500\" };\n  if (score === 3 || score === 4)\n    return { label: \"Medium\", value: 66, color: \"bg-yellow-500\" };\n  return { label: \"Strong\", value: 100, color: \"bg-green-600\" };\n}\n\n// ------------------ Component ------------------ //\nexport default function AuthDrawer({\n  open,\n  onClose,\n}: {\n  open: boolean;\n  onClose: () => void;\n}) {\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [passwordValue, setPasswordValue] = useState(\"\");\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<SignupData>({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phoneNumber: \"\",\n      idPassportType: undefined,\n      idPassportNumber: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      profilePhoto: undefined,\n      agreeToTerms: false,\n    },\n  });\n\n  const onSubmit: SubmitHandler<SignupData> = async (data) => {\n    try {\n      setLoading(true);\n\n      const formData = new FormData();\n      formData.append(\"firstName\", data.firstName);\n      formData.append(\"lastName\", data.lastName);\n      formData.append(\"email\", data.email);\n      formData.append(\"phoneNumber\", data.phoneNumber);\n      if (data.idPassportType) formData.append(\"idPassportType\", data.idPassportType);\n      formData.append(\"idPassportNumber\", data.idPassportNumber);\n      formData.append(\"password\", data.password);\n      if (data.profilePhoto) formData.append(\"profilePhoto\", data.profilePhoto);\n\n      await new Promise((resolve) => setTimeout(resolve, 1200)); // simulate API\n\n      toast({\n        title: \"Account Created\",\n        description: \"Your account has been successfully created!\",\n      });\n      onClose();\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const strength = getPasswordStrength(passwordValue);\n\n  return (\n    <Drawer open={open} onOpenChange={onClose}>\n      <DrawerContent>\n        <DrawerHeader>\n          <DrawerTitle>Create an Account</DrawerTitle>\n        </DrawerHeader>\n        <form onSubmit={handleSubmit(onSubmit)} className=\"p-6 space-y-4\">\n          <div>\n                  <Label htmlFor=\"email\">Email Address</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    {...register('email')}\n                  />\n                  {errors.email && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {errors.email.message}\n                    </p>\n                  )}\n                </div>\n          <div>\n            <Label>Password</Label>\n            <Input\n              type=\"password\"\n              {...register(\"password\")}\n              onChange={(e) => setPasswordValue(e.target.value)}\n            />\n            {errors.password && (\n              <p className=\"text-red-600 text-sm\">{errors.password.message}</p>\n            )}\n\n            {/* ✅ Password Strength Meter */}\n            {passwordValue && (\n              <div className=\"mt-2\">\n                <Progress value={strength.value} className=\"h-2\" />\n                <p className={`text-sm mt-1 font-medium ${strength.color}`}>\n                  {strength.label}\n                </p>\n              </div>\n            )}\n          </div>\n\n          <div>\n            <Label>Confirm Password</Label>\n            <Input type=\"password\" {...register(\"confirmPassword\")} />\n            {errors.confirmPassword && (\n              <p className=\"text-red-600 text-sm\">{errors.confirmPassword.message}</p>\n            )}\n          </div>\n\n          {/* Other fields remain unchanged... */}\n\n          <Button type=\"submit\" disabled={loading} className=\"w-full\">\n            {loading ? \"Creating account...\" : \"Create Account\"}\n          </Button>\n        </form>\n      </DrawerContent>\n    </Drawer>\n  );\n}\n","size_bytes":6363},"client/src/pages/admin/Settings.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport Navigation from '@/components/layout/Navigation';\nimport Sidebar from '@/components/layout/Sidebar';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useFileUpload } from '@/hooks/useFileUpload';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { \n  Plus, \n  Edit, \n  Trash2, \n  FileText, \n  MapPin, \n  Users, \n  Award, \n  HelpCircle,\n  Settings as SettingsIcon,\n  Building,\n  GraduationCap,\n  Briefcase,\n  HomeIcon,\n  HouseIcon,\n  Building2,\n  Info,\n  Camera,\n  Globe,\n  Upload,\n  Link,\n  X\n} from 'lucide-react';\n\n// Form schemas\nconst noticeSchema = z.object({\n  title: z.string().min(5, \"Title must be at least 5 characters\"),\n  content: z.string().min(10, \"Content must be at least 10 characters\"),\n  type: z.string().optional(),\n  priority: z.string().default('medium'),\n  isActive: z.boolean().default(true),\n});\n\nconst boardMemberSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  position: z.string().min(2, \"Position must be at least 2 characters\"),\n  bio: z.string().optional(),\n  photoUrl: z.string().optional(),\n  order: z.number().optional().default(0),\n});\n\nconst countySchema = z.object({\n  name: z.string().min(2, \"County name must be at least 2 characters\"),\n});\n\nconst constituencySchema = z.object({\n  name: z.string().min(2, \"Constituency name must be at least 2 characters\"),\n  countyId: z.string().min(1, \"Please select a county\"),\n});\n\nconst wardSchema = z.object({\n  name: z.string().min(2, \"Ward name must be at least 2 characters\"),\n  constituencyId: z.string().min(1, \"Please select a constituency\"),\n});\n\nconst studyAreaSchema = z.object({\n  name: z.string().min(2, \"Study area name must be at least 2 characters\"),\n});\n\nconst specializationSchema = z.object({\n  name: z.string().min(2, \"Specialization name must be at least 2 characters\"),\n  studyArea: z.string().min(1, \"Please select a study area\"),\n});\n\nconst jobGroupSchema = z.object({\n  name: z.string().min(1, \"Job group name is required\"),\n  description: z.string().optional(),\n});\n\nconst awardSchema = z.object({\n  name: z.string().min(2, \"Award name must be at least 2 characters\"),\n});\n\nconst ethnicitySchema = z.object({\n  name: z.string().min(2, \"Ethnicity name must be at least 2 characters\"),\n});\nconst deptSchema = z.object({\n  name: z.string().min(2, \"Department name must be at least 2 characters\"),\n});\n\nconst faqSchema = z.object({\n  question: z.string().min(10, \"Question must be at least 10 characters\"),\n  answer: z.string().min(20, \"Answer must be at least 20 characters\"),\n  category: z.string().min(1, \"Please select a category\"),\n  order: z.number().optional(),\n});\n\nconst roleAssignmentSchema = z.object({\n  userId: z.string().min(1, \"Please select a user\"),\n  role: z.string().min(1, \"Please select a role\"),\n  assignedBy: z.string().optional(),\n});\n\nconst aboutConfigSchema = z.object({\n  key: z.string().min(1, \"Key is required\"),\n  value: z.string().min(1, \"Value is required\"),\n  section: z.string().default('about'),\n});\n\nconst galleryItemSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n  category: z.string().min(1, \"Category is required\"),\n  imageUrl: z.string().optional(),\n  eventDate: z.string().optional(),\n});\n\ntype NoticeFormData = z.infer<typeof noticeSchema>;\ntype CountyFormData = z.infer<typeof countySchema>;\ntype ConstituencyFormData = z.infer<typeof constituencySchema>;\ntype WardFormData = z.infer<typeof wardSchema>;\ntype StudyAreaFormData = z.infer<typeof studyAreaSchema>;\ntype SpecializationFormData = z.infer<typeof specializationSchema>;\ntype JobGroupFormData = z.infer<typeof jobGroupSchema>;\ntype AwardFormData = z.infer<typeof awardSchema>;\ntype EthnicityFormData = z.infer<typeof ethnicitySchema>;\ntype FaqFormData = z.infer<typeof faqSchema>;\ntype DeptFormData = z.infer<typeof deptSchema>;\ntype RoleAssignmentFormData = z.infer<typeof roleAssignmentSchema>;\ntype AboutConfigFormData = z.infer<typeof aboutConfigSchema>;\ntype GalleryItemFormData = z.infer<typeof galleryItemSchema>;\ntype BoardMemberFormData = z.infer<typeof boardMemberSchema>;\n\nexport default function AdminSettings() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Modal states\n  const [activeTab, setActiveTab] = useState('notices');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedCounty, setSelectedCounty] = useState('');\n  const [selectedConstituency, setSelectedConstituency] = useState('');\n  const [selectedStudyArea, setSelectedStudyArea] = useState('');\n  const [userSearchTerm, setUserSearchTerm] = useState('');\n  \n  // Gallery upload states\n  const [galleryImageMode, setGalleryImageMode] = useState<'url' | 'upload'>('url');\n  const [uploadedImageFile, setUploadedImageFile] = useState<File | null>(null);\n  const [previewImageUrl, setPreviewImageUrl] = useState<string>('');\n\n  // Fetch configuration data\n  const { data: config } = useQuery({\n    queryKey: ['/api/public/config'],\n    enabled: !!user && user.role === 'admin',\n  });\n\n  // Fetch all users for role assignment\n  const { data: allUsers = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/all-users'],\n    enabled: !!user && user.role === 'admin',\n  });\n\n  // Fetch board members\n  const { data: boardMembers = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/board-members'],\n    enabled: !!user && user.role === 'admin',\n  });\n\n  const configData = config || {} as any;\n  const counties = configData.counties || [];\n  const constituencies = configData.constituencies || [];\n  const wards = configData.wards || [];\n  const studyAreas = configData.studyAreas || [];\n  const specializations = configData.specializations || [];\n  const jobGroups = configData.jobGroups || [];\n  const awards = configData.awards || [];\n  const faqs = configData.faqs || [];\n  const notices = configData.notices || [];\n  const ethnicity = configData.ethnicity || [];\n  const departments = configData.departments || [];\n  const admins = configData.admins || [];\n\n  // Fetch About and Gallery data\n  const { data: aboutConfig = {} } = useQuery<Record<string, any>>({\n    queryKey: ['/api/public/system-config?section=about'],\n    enabled: !!user && user.role === 'admin',\n  });\n  \n  const { data: contactConfig = {} } = useQuery<Record<string, any>>({\n    queryKey: ['/api/public/system-config?section=contact'],\n    enabled: !!user && user.role === 'admin',\n  });\n  \n  const { data: galleryItems = [] } = useQuery<any[]>({\n    queryKey: ['/api/public/gallery'],\n    enabled: !!user && user.role === 'admin',\n  });\n  // Forms\n  const noticeForm = useForm<NoticeFormData>({ resolver: zodResolver(noticeSchema) });\n  const countyForm = useForm<CountyFormData>({ resolver: zodResolver(countySchema) });\n  const constituencyForm = useForm<ConstituencyFormData>({ resolver: zodResolver(constituencySchema) });\n  const wardForm = useForm<WardFormData>({ resolver: zodResolver(wardSchema) });\n  const studyAreaForm = useForm<StudyAreaFormData>({ resolver: zodResolver(studyAreaSchema) });\n  const specializationForm = useForm<SpecializationFormData>({ resolver: zodResolver(specializationSchema) });\n  const jobGroupForm = useForm<JobGroupFormData>({ resolver: zodResolver(jobGroupSchema) });\n  const awardForm = useForm<AwardFormData>({ resolver: zodResolver(awardSchema) });\n  const ethnicityForm = useForm<EthnicityFormData>({ resolver: zodResolver(ethnicitySchema) });\n  const faqForm = useForm<FaqFormData>({ resolver: zodResolver(faqSchema) });\n  const deptForm = useForm<DeptFormData>({ resolver: zodResolver(deptSchema) });\n  const roleAssignmentForm = useForm<RoleAssignmentFormData>({ resolver: zodResolver(roleAssignmentSchema) });\n  const aboutConfigForm = useForm<AboutConfigFormData>({ resolver: zodResolver(aboutConfigSchema) });\n  const galleryItemForm = useForm<GalleryItemFormData>({ resolver: zodResolver(galleryItemSchema) });\n  const boardMemberForm = useForm<BoardMemberFormData>({ resolver: zodResolver(boardMemberSchema) });\n\n  // File upload configuration for gallery (aligned with server-side accepted types)\n  const galleryFileUpload = useFileUpload({\n    endpoint: '/api/upload',\n    fieldName: 'file',\n    acceptedTypes: ['image/jpeg', 'image/jpg', 'image/png'],\n    maxSizeInMB: 10,\n    successMessage: 'Image uploaded successfully!',\n    errorMessage: 'Failed to upload image',\n    invalidateQueries: ['/api/public/gallery']\n  });\n\n  // Generic mutation handler\n  const createMutation = useMutation({\n    mutationFn: async ({ endpoint, data }: { endpoint: string; data: any }) => {\n      return await apiRequest('POST', endpoint, data);\n    },\n    onSuccess: (_, variables) => {\n      toast({\n        title: 'Success',\n        description: 'Item created successfully.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/public/config'] });\n      \n      // Invalidate gallery cache when gallery items are added\n      if (variables.endpoint.includes('gallery')) {\n        queryClient.invalidateQueries({ queryKey: ['/api/public/gallery'] });\n      }\n      \n      setIsModalOpen(false);\n      // Reset appropriate form based on endpoint\n      if (variables.endpoint.includes('notices')) noticeForm.reset();\n      else if (variables.endpoint.includes('counties')) countyForm.reset();\n      else if (variables.endpoint.includes('constituencies')) constituencyForm.reset();\n      else if (variables.endpoint.includes('wards')) wardForm.reset();\n      else if (variables.endpoint.includes('study-areas')) studyAreaForm.reset();\n      else if (variables.endpoint.includes('specializations')) specializationForm.reset();\n      else if (variables.endpoint.includes('job-groups')) jobGroupForm.reset();\n      else if (variables.endpoint.includes('awards')) awardForm.reset();\n      else if (variables.endpoint.includes('ethnicity')) ethnicityForm.reset();\n      else if (variables.endpoint.includes('faqs')) faqForm.reset();\n      else if (variables.endpoint.includes('dept')) deptForm.reset();\n      else if (variables.endpoint.includes('system-config')) aboutConfigForm.reset();\n      else if (variables.endpoint.includes('gallery')) galleryItemForm.reset();\n      else if (variables.endpoint.includes('board-members')) boardMemberForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create item',\n        variant: 'destructive',\n      });\n    },\n  });\n  // Tab configurations\n  const tabs = [\n    { \n      id: 'notices', \n      label: 'Notices', \n      icon: FileText,\n      description: 'Manage system notices and announcements'\n    },\n    { \n      id: 'dept', \n      label: 'Departments', \n      icon: Building,\n      description: 'Manage Departments'\n    },\n    { \n      id: 'geography', \n      label: 'Location', \n      icon: MapPin,\n      description: 'Manage counties, constituencies, and wards'\n    },\n    { \n      id: 'education', \n      label: 'Education', \n      icon: GraduationCap,\n      description: 'Manage study areas and specializations'\n    },\n    { \n      id: 'job-management', \n      label: 'Job Groups', \n      icon: Briefcase,\n      description: 'Manage job groups and related data'\n    },\n    { \n      id: 'awards', \n      label: 'Awards', \n      icon: Award,\n      description: 'Manage awards and recognitions'\n    },\n    { \n      id: 'users', \n      label: 'Ethnicity', \n      icon: Users,\n      description: 'Manage user roles and ethnicity data'\n    },\n    { \n      id: 'roles', \n      label: 'Role', \n      icon: SettingsIcon,\n      description: 'Assign roles to users'\n    },\n    { \n      id: 'faqs', \n      label: 'FAQs', \n      icon: HelpCircle,\n      description: 'Manage frequently asked questions'\n    },\n    {\n      id: 'about',\n      label: 'About Page',\n      icon: Info,\n      description: 'Manage about page content'\n    },\n    {\n      id: 'board-leadership',\n      label: 'Board Leadership',\n      icon: Users,\n      description: 'Manage board members and leadership'\n    },\n    {\n      id: 'gallery',\n      label: 'Gallery',\n      icon: Camera,\n      description: 'Manage gallery items and images'\n    },\n  ];\n\n  const handleCreateNotice = (data: NoticeFormData) => {\n    createMutation.mutate({ endpoint: '/api/admin/notices', data });\n  };\n\n  const handleCreateCounty = (data: CountyFormData) => {\n    createMutation.mutate({ endpoint: '/api/admin/counties', data });\n  };\n\n  const handleCreateConstituency = (data: ConstituencyFormData) => {\n    createMutation.mutate({ \n      endpoint: '/api/admin/constituencies', \n      data: { ...data, countyId: parseInt(data.countyId) }\n    });\n  };\n\n  const handleCreateWard = (data: WardFormData) => {\n    createMutation.mutate({ \n      endpoint: '/api/admin/wards', \n      data: { ...data, constituencyId: parseInt(data.constituencyId) }\n    });\n  };\n\n  const handleCreateStudyArea = (data: StudyAreaFormData) => {\n    createMutation.mutate({ endpoint: '/api/admin/study-areas', data });\n  };\n\n  const handleCreateSpecialization = (data: SpecializationFormData) => {\n    createMutation.mutate({ \n      endpoint: '/api/admin/specializations', \n      data: { ...data, studyArea: parseInt(data.studyArea) }\n    });\n  };\n\n  const handleCreateJobGroup = (data: JobGroupFormData) => {\n    createMutation.mutate({ endpoint: '/api/admin/job-groups', data });\n  };\n  const handleCreateDept = (data: DeptFormData) => {\n    createMutation.mutate({ endpoint: '/api/admin/dept', data });\n  };\n\n  const handleCreateAward = (data: AwardFormData) => {\n    createMutation.mutate({ endpoint: '/api/admin/awards', data });\n  };\n\n  const handleCreateEthnicity = (data: EthnicityFormData) => {\n    createMutation.mutate({ endpoint: '/api/admin/ethnicity', data });\n  };\n\n  const handleCreateFaq = (data: FaqFormData) => {\n    createMutation.mutate({ endpoint: '/api/admin/faqs', data });\n  };\n\n  const handleCreateRoleAssignment = (data: RoleAssignmentFormData) => {\n    createMutation.mutate({ \n      endpoint: '/api/admin/role-assignments', \n      data: { ...data, assignedBy: user?.id }\n    });\n  };\n\n  const handleCreateAboutConfig = (data: AboutConfigFormData) => {\n    createMutation.mutate({ endpoint: '/api/admin/system-config', data });\n  };\n\n  const handleCreateBoardMember = (data: BoardMemberFormData) => {\n    createMutation.mutate({ endpoint: '/api/admin/board-members', data });\n  };\n\n  const handleCreateGalleryItem = async (data: GalleryItemFormData) => {\n    try {\n      // Validate that either URL or file is provided\n      if (galleryImageMode === 'url' && (!data.imageUrl || data.imageUrl.trim() === '')) {\n        toast({\n          title: 'Image Required',\n          description: 'Please provide an image URL.',\n          variant: 'destructive',\n        });\n        return;\n      }\n\n      if (galleryImageMode === 'upload' && !uploadedImageFile) {\n        toast({\n          title: 'Image Required',\n          description: 'Please select an image file to upload.',\n          variant: 'destructive',\n        });\n        return;\n      }\n\n      let imageUrl = data.imageUrl || '';\n\n      // Handle file upload if in upload mode\n      if (galleryImageMode === 'upload' && uploadedImageFile) {\n        toast({\n          title: 'Processing...',\n          description: 'Uploading image and creating gallery item...',\n        });\n\n        // Upload the file first\n        const uploadResult = await galleryFileUpload.uploadFile(uploadedImageFile, 'gallery-image', {\n          title: data.title,\n          category: data.category\n        });\n\n        // Use the uploaded file URL\n        imageUrl = uploadResult.fileUrl || uploadResult.url || uploadResult.path || '';\n      }\n\n      // Create the gallery item with the image URL (either from input or upload)\n      const processedData = {\n        ...data,\n        imageUrl,\n        eventDate: data.eventDate ? new Date(data.eventDate).toISOString() : null\n      };\n\n      createMutation.mutate({ endpoint: '/api/admin/gallery', data: processedData });\n\n      // Reset upload states after successful submission\n      setUploadedImageFile(null);\n      setPreviewImageUrl('');\n      setGalleryImageMode('url');\n\n    } catch (error: any) {\n      toast({\n        title: 'Upload Failed',\n        description: error.message || 'Failed to upload image',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const filteredConstituencies = selectedCounty \n    ? constituencies.filter((c: any) => c.countyId === parseInt(selectedCounty))\n    : [];\n\n  const filteredWards = selectedConstituency \n    ? wards.filter((w: any) => w.constituencyId === parseInt(selectedConstituency))\n    : [];\n\n  const filteredSpecializations = selectedStudyArea \n    ? specializations.filter((s: any) => s.studyArea === parseInt(selectedStudyArea))\n    : [];\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar userRole=\"admin\" />\n        \n        <main className=\"flex-1 p-6\">\n          <div className=\"max-w-7xl mx-auto\">\n            {/* Header */}\n            <div className=\"mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">System Configuration</h1>\n              <p className=\"text-gray-600\">\n                Manage system data, lookup tables, and configuration settings\n              </p>\n            </div>\n\n            {/* Configuration Tabs */}\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-5 lg:grid-cols-10 mb-8\">\n                {tabs.map((tab) => (\n                  <TabsTrigger key={tab.id} value={tab.id} className=\"flex items-center gap-2\">\n                    <tab.icon className=\"w-4 h-4\" />\n                    {tab.label}\n                  </TabsTrigger>\n                ))}\n              </TabsList>\n                {/* Job Management Tab */}\n              <TabsContent value=\"dept\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <div>\n                      <CardTitle>Departments Management</CardTitle>\n                      <p className=\"text-sm text-gray-600 mt-1\">Manage departments</p>\n                    </div>\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button>\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Add Department\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Add New Department</DialogTitle>\n                        </DialogHeader>\n                        <form onSubmit={deptForm.handleSubmit(handleCreateDept)} className=\"space-y-4\">\n                          <div>\n                            <Label htmlFor=\"dept-name\">Department Name</Label>\n                            <Input \n                              id=\"dept-name\" \n                              {...deptForm.register('name')} \n                              placeholder=\"e.g., Health Services and Sanitation...\"\n                            />\n                            {deptForm.formState.errors.name && (\n                              <p className=\"text-sm text-red-600 mt-1\">\n                                {deptForm.formState.errors.name.message}\n                              </p>\n                            )}\n                          </div>\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button type=\"submit\">Add Department</Button>\n                          </div>\n                        </form>\n                      </DialogContent>\n                    </Dialog>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      {departments.length === 0 ? (\n                        <div className=\"col-span-3 text-center py-8 text-gray-500\">\n                          <HouseIcon className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                          <p>No departments yet. Click \"Add Department\" to get started.</p>\n                        </div>\n                      ) : (\n                        departments.map((dept: any) => (\n                          <Card key={dept.id}>\n                            <CardContent className=\"p-4\">\n                              <h4 className=\"font-semibold mb-2\">{dept.name}</h4>\n                              {dept.description && (\n                                <p className=\"text-sm text-gray-600\">{dept.description}</p>\n                              )}\n                            </CardContent>\n                          </Card>\n                        ))\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n              {/* Notices Tab */}\n              <TabsContent value=\"notices\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <div>\n                      <CardTitle>Notices Management</CardTitle>\n                      <p className=\"text-sm text-gray-600 mt-1\">Create and manage system notices</p>\n                    </div>\n                    <Dialog open={isModalOpen && activeTab === 'notices'} onOpenChange={setIsModalOpen}>\n                      <DialogTrigger asChild>\n                        <Button onClick={() => setActiveTab('notices')}>\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Add Notice\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Create New Notice</DialogTitle>\n                        </DialogHeader>\n                        <form onSubmit={noticeForm.handleSubmit(handleCreateNotice)} className=\"space-y-4\">\n                          <div>\n                            <Label htmlFor=\"notice-title\">Title</Label>\n                            <Input \n                              id=\"notice-title\" \n                              {...noticeForm.register('title')} \n                              placeholder=\"Notice title\"\n                            />\n                            {noticeForm.formState.errors.title && (\n                              <p className=\"text-sm text-red-600 mt-1\">\n                                {noticeForm.formState.errors.title.message}\n                              </p>\n                            )}\n                          </div>\n                          <div>\n                            <Label htmlFor=\"notice-content\">Content</Label>\n                            <Textarea \n                              id=\"notice-content\" \n                              {...noticeForm.register('content')} \n                              placeholder=\"Notice content\"\n                              rows={4}\n                            />\n                            {noticeForm.formState.errors.content && (\n                              <p className=\"text-sm text-red-600 mt-1\">\n                                {noticeForm.formState.errors.content.message}\n                              </p>\n                            )}\n                          </div>\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div>\n                              <Label htmlFor=\"notice-type\">Type</Label>\n                              <Select onValueChange={(value) => noticeForm.setValue('type', value)}>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select type\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"general\">General</SelectItem>\n                                  <SelectItem value=\"urgent\">Urgent</SelectItem>\n                                  <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </div>\n                            <div>\n                              <Label htmlFor=\"notice-priority\">Priority</Label>\n                              <Select onValueChange={(value) => noticeForm.setValue('priority', value)}>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select priority\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"low\">Low</SelectItem>\n                                  <SelectItem value=\"medium\">Medium</SelectItem>\n                                  <SelectItem value=\"high\">High</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </div>\n                          </div>\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button type=\"button\" variant=\"outline\" onClick={() => setIsModalOpen(false)}>\n                              Cancel\n                            </Button>\n                            <Button type=\"submit\">Create Notice</Button>\n                          </div>\n                        </form>\n                      </DialogContent>\n                    </Dialog>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      {notices.length === 0 ? (\n                        <div className=\"col-span-3 text-center py-8 text-gray-500\">\n                          <FileText className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                          <p>Click \"Add Notice\" to create your first notice</p>\n                        </div>\n                      ) : (\n                        notices.map((notice: any) => (\n                          <Card key={notice.id}>\n                            <CardContent className=\"p-4\">\n                              <h4 className=\"font-semibold mb-2\">{notice.title}</h4>\n                              {notice.content && (\n                                <p className=\"text-sm text-gray-600\">{notice.content}</p>\n                              )}\n                            </CardContent>\n                          </Card>\n                        ))\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Location Tab */}\n              <TabsContent value=\"geography\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                  {/* Counties */}\n                  <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between\">\n                      <div>\n                        <CardTitle className=\"text-lg\">Counties</CardTitle>\n                        <p className=\"text-sm text-gray-600\">{counties.length} counties</p>\n                      </div>\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button size=\"sm\">\n                            <Plus className=\"w-4 h-4 mr-2\" />\n                            Add\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent>\n                          <DialogHeader>\n                            <DialogTitle>Add New County</DialogTitle>\n                          </DialogHeader>\n                          <form onSubmit={countyForm.handleSubmit(handleCreateCounty)} className=\"space-y-4\">\n                            <div>\n                              <Label htmlFor=\"county-name\">County Name</Label>\n                              <Input \n                                id=\"county-name\" \n                                {...countyForm.register('name')} \n                                placeholder=\"Enter county name\"\n                              />\n                              {countyForm.formState.errors.name && (\n                                <p className=\"text-sm text-red-600 mt-1\">\n                                  {countyForm.formState.errors.name.message}\n                                </p>\n                              )}\n                            </div>\n                            <div className=\"flex justify-end space-x-2\">\n                              <Button type=\"submit\">Add County</Button>\n                            </div>\n                          </form>\n                        </DialogContent>\n                      </Dialog>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                        {counties.length === 0 ? (\n                          <p className=\"text-gray-500 text-center py-4\">No counties yet</p>\n                        ) : (\n                          counties.map((county: any) => (\n                            <div key={county.id} className=\"flex items-center justify-between p-2 border rounded\">\n                              <span className=\"text-sm\">{county.name}</span>\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\"\n                                onClick={() => setSelectedCounty(county.id.toString())}\n                              >\n                                Select\n                              </Button>\n                            </div>\n                          ))\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Constituencies */}\n                  <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between\">\n                      <div>\n                        <CardTitle className=\"text-lg\">Constituencies</CardTitle>\n                        <p className=\"text-sm text-gray-600\">\n                          {selectedCounty ? filteredConstituencies.length : constituencies.length} constituencies\n                        </p>\n                      </div>\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button size=\"sm\" disabled={!selectedCounty}>\n                            <Plus className=\"w-4 h-4 mr-2\" />\n                            Add\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent>\n                          <DialogHeader>\n                            <DialogTitle>Add New Constituency</DialogTitle>\n                          </DialogHeader>\n                          <form onSubmit={constituencyForm.handleSubmit(handleCreateConstituency)} className=\"space-y-4\">\n                            <div>\n                              <Label htmlFor=\"constituency-county\">County</Label>\n                              <Select \n                                value={selectedCounty}\n                                onValueChange={(value) => {\n                                  setSelectedCounty(value);\n                                  constituencyForm.setValue('countyId', value);\n                                }}\n                              >\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select county\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  {counties.map((county: any) => (\n                                    <SelectItem key={county.id} value={county.id.toString()}>\n                                      {county.name}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                            </div>\n                            <div>\n                              <Label htmlFor=\"constituency-name\">Constituency Name</Label>\n                              <Input \n                                id=\"constituency-name\" \n                                {...constituencyForm.register('name')} \n                                placeholder=\"Enter constituency name\"\n                              />\n                              {constituencyForm.formState.errors.name && (\n                                <p className=\"text-sm text-red-600 mt-1\">\n                                  {constituencyForm.formState.errors.name.message}\n                                </p>\n                              )}\n                            </div>\n                            <div className=\"flex justify-end space-x-2\">\n                              <Button type=\"submit\">Add Constituency</Button>\n                            </div>\n                          </form>\n                        </DialogContent>\n                      </Dialog>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                        {(selectedCounty ? filteredConstituencies : constituencies).length === 0 ? (\n                          <p className=\"text-gray-500 text-center py-4\">\n                            {selectedCounty ? 'No constituencies in selected county' : 'Select a county first'}\n                          </p>\n                        ) : (\n                          (selectedCounty ? filteredConstituencies : constituencies).map((constituency: any) => (\n                            <div key={constituency.id} className=\"flex items-center justify-between p-2 border rounded\">\n                              <span className=\"text-sm\">{constituency.name}</span>\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\"\n                                onClick={() => setSelectedConstituency(constituency.id.toString())}\n                              >\n                                Select\n                              </Button>\n                            </div>\n                          ))\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Wards */}\n                  <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between\">\n                      <div>\n                        <CardTitle className=\"text-lg\">Wards</CardTitle>\n                        <p className=\"text-sm text-gray-600\">\n                          {selectedConstituency ? filteredWards.length : wards.length} wards\n                        </p>\n                      </div>\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button size=\"sm\" disabled={!selectedConstituency}>\n                            <Plus className=\"w-4 h-4 mr-2\" />\n                            Add\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent>\n                          <DialogHeader>\n                            <DialogTitle>Add New Ward</DialogTitle>\n                          </DialogHeader>\n                          <form onSubmit={wardForm.handleSubmit(handleCreateWard)} className=\"space-y-4\">\n                            <div>\n                              <Label htmlFor=\"ward-constituency\">Constituency</Label>\n                              <Select \n                                value={selectedConstituency}\n                                onValueChange={(value) => {\n                                  setSelectedConstituency(value);\n                                  wardForm.setValue('constituencyId', value);\n                                }}\n                              >\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select constituency\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  {filteredConstituencies.map((constituency: any) => (\n                                    <SelectItem key={constituency.id} value={constituency.id.toString()}>\n                                      {constituency.name}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                            </div>\n                            <div>\n                              <Label htmlFor=\"ward-name\">Ward Name</Label>\n                              <Input \n                                id=\"ward-name\" \n                                {...wardForm.register('name')} \n                                placeholder=\"Enter ward name\"\n                              />\n                              {wardForm.formState.errors.name && (\n                                <p className=\"text-sm text-red-600 mt-1\">\n                                  {wardForm.formState.errors.name.message}\n                                </p>\n                              )}\n                            </div>\n                            <div className=\"flex justify-end space-x-2\">\n                              <Button type=\"submit\">Add Ward</Button>\n                            </div>\n                          </form>\n                        </DialogContent>\n                      </Dialog>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                        {(selectedConstituency ? filteredWards : wards).length === 0 ? (\n                          <p className=\"text-gray-500 text-center py-4\">\n                            {selectedConstituency ? 'No wards in selected constituency' : 'Select a constituency first'}\n                          </p>\n                        ) : (\n                          (selectedConstituency ? filteredWards : wards).map((ward: any) => (\n                            <div key={ward.id} className=\"p-2 border rounded\">\n                              <span className=\"text-sm\">{ward.name}</span>\n                            </div>\n                          ))\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n\n              {/* Education Tab */}\n              <TabsContent value=\"education\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  {/* Study Areas */}\n                  <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between\">\n                      <div>\n                        <CardTitle className=\"text-lg\">Study Areas</CardTitle>\n                        <p className=\"text-sm text-gray-600\">{studyAreas.length} study areas</p>\n                      </div>\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button size=\"sm\">\n                            <Plus className=\"w-4 h-4 mr-2\" />\n                            Add Study Area\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent>\n                          <DialogHeader>\n                            <DialogTitle>Add New Study Area</DialogTitle>\n                          </DialogHeader>\n                          <form onSubmit={studyAreaForm.handleSubmit(handleCreateStudyArea)} className=\"space-y-4\">\n                            <div>\n                              <Label htmlFor=\"study-area-name\">Study Area Name</Label>\n                              <Input \n                                id=\"study-area-name\" \n                                {...studyAreaForm.register('name')} \n                                placeholder=\"e.g., Computer Science, Engineering\"\n                              />\n                              {studyAreaForm.formState.errors.name && (\n                                <p className=\"text-sm text-red-600 mt-1\">\n                                  {studyAreaForm.formState.errors.name.message}\n                                </p>\n                              )}\n                            </div>\n                            <div className=\"flex justify-end space-x-2\">\n                              <Button type=\"submit\">Add Study Area</Button>\n                            </div>\n                          </form>\n                        </DialogContent>\n                      </Dialog>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                        {studyAreas.length === 0 ? (\n                          <p className=\"text-gray-500 text-center py-4\">No study areas yet</p>\n                        ) : (\n                          studyAreas.map((area: any) => (\n                            <div key={area.id} className=\"flex items-center justify-between p-2 border rounded\">\n                              <span className=\"text-sm\">{area.name}</span>\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\"\n                                onClick={() => setSelectedStudyArea(area.id.toString())}\n                              >\n                                Select\n                              </Button>\n                            </div>\n                          ))\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Specializations */}\n                  <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between\">\n                      <div>\n                        <CardTitle className=\"text-lg\">Specializations</CardTitle>\n                        <p className=\"text-sm text-gray-600\">\n                          {selectedStudyArea ? filteredSpecializations.length : specializations.length} specializations\n                        </p>\n                      </div>\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button size=\"sm\" disabled={!selectedStudyArea}>\n                            <Plus className=\"w-4 h-4 mr-2\" />\n                            Add Specialization\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent>\n                          <DialogHeader>\n                            <DialogTitle>Add New Specialization</DialogTitle>\n                          </DialogHeader>\n                          <form onSubmit={specializationForm.handleSubmit(handleCreateSpecialization)} className=\"space-y-4\">\n                            <div>\n                              <Label htmlFor=\"specialization-study-area\">Study Area</Label>\n                              <Select \n                                value={selectedStudyArea}\n                                onValueChange={(value) => {\n                                  setSelectedStudyArea(value);\n                                  specializationForm.setValue('studyArea', value);\n                                }}\n                              >\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select study area\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  {studyAreas.map((area: any) => (\n                                    <SelectItem key={area.id} value={area.id.toString()}>\n                                      {area.name}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                            </div>\n                            <div>\n                              <Label htmlFor=\"specialization-name\">Specialization Name</Label>\n                              <Input \n                                id=\"specialization-name\" \n                                {...specializationForm.register('name')} \n                                placeholder=\"e.g., Software Engineering, Web Development\"\n                              />\n                              {specializationForm.formState.errors.name && (\n                                <p className=\"text-sm text-red-600 mt-1\">\n                                  {specializationForm.formState.errors.name.message}\n                                </p>\n                              )}\n                            </div>\n                            <div className=\"flex justify-end space-x-2\">\n                              <Button type=\"submit\">Add Specialization</Button>\n                            </div>\n                          </form>\n                        </DialogContent>\n                      </Dialog>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                        {(selectedStudyArea ? filteredSpecializations : specializations).length === 0 ? (\n                          <p className=\"text-gray-500 text-center py-4\">\n                            {selectedStudyArea ? 'No specializations in selected study area' : 'Select a study area first'}\n                          </p>\n                        ) : (\n                          (selectedStudyArea ? filteredSpecializations : specializations).map((spec: any) => (\n                            <div key={spec.id} className=\"p-2 border rounded\">\n                              <span className=\"text-sm\">{spec.name}</span>\n                            </div>\n                          ))\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n\n              {/* Job Management Tab */}\n              <TabsContent value=\"job-management\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <div>\n                      <CardTitle>Job Groups Management</CardTitle>\n                      <p className=\"text-sm text-gray-600 mt-1\">Manage job groups and classifications</p>\n                    </div>\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button>\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Add Job Group\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Add New Job Group</DialogTitle>\n                        </DialogHeader>\n                        <form onSubmit={jobGroupForm.handleSubmit(handleCreateJobGroup)} className=\"space-y-4\">\n                          <div>\n                            <Label htmlFor=\"job-group-name\">Job Group Name</Label>\n                            <Input \n                              id=\"job-group-name\" \n                              {...jobGroupForm.register('name')} \n                              placeholder=\"e.g., A, B, C, D...\"\n                            />\n                            {jobGroupForm.formState.errors.name && (\n                              <p className=\"text-sm text-red-600 mt-1\">\n                                {jobGroupForm.formState.errors.name.message}\n                              </p>\n                            )}\n                          </div>\n                          <div>\n                            <Label htmlFor=\"job-group-description\">Description (Optional)</Label>\n                            <Textarea \n                              id=\"job-group-description\" \n                              {...jobGroupForm.register('description')} \n                              placeholder=\"Description of the job group\"\n                              rows={3}\n                            />\n                          </div>\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button type=\"submit\">Add Job Group</Button>\n                          </div>\n                        </form>\n                      </DialogContent>\n                    </Dialog>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      {jobGroups.length === 0 ? (\n                        <div className=\"col-span-3 text-center py-8 text-gray-500\">\n                          <Briefcase className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                          <p>No job groups yet. Click \"Add Job Group\" to get started.</p>\n                        </div>\n                      ) : (\n                        jobGroups.map((group: any) => (\n                          <Card key={group.id}>\n                            <CardContent className=\"p-4\">\n                              <h4 className=\"font-semibold mb-2\">Job Group {group.name}</h4>\n                              {group.description && (\n                                <p className=\"text-sm text-gray-600\">{group.description}</p>\n                              )}\n                            </CardContent>\n                          </Card>\n                        ))\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Awards Tab */}\n              <TabsContent value=\"awards\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <div>\n                      <CardTitle>Certificates Awards Management</CardTitle>\n                      <p className=\"text-sm text-gray-600 mt-1\">Manage certificate awards</p>\n                    </div>\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button>\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Add Award\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Add New Award</DialogTitle>\n                        </DialogHeader>\n                        <form onSubmit={awardForm.handleSubmit(handleCreateAward)} className=\"space-y-4\">\n                          <div>\n                            <Label htmlFor=\"award-name\">Award Name</Label>\n                            <Input \n                              id=\"award-name\" \n                              {...awardForm.register('name')} \n                              placeholder=\"e.g., Best Employee, Outstanding Service\"\n                            />\n                            {awardForm.formState.errors.name && (\n                              <p className=\"text-sm text-red-600 mt-1\">\n                                {awardForm.formState.errors.name.message}\n                              </p>\n                            )}\n                          </div>\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button type=\"submit\">Add Award</Button>\n                          </div>\n                        </form>\n                      </DialogContent>\n                    </Dialog>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      {awards.length === 0 ? (\n                        <div className=\"col-span-2 text-center py-8 text-gray-500\">\n                          <Award className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                          <p>No awards yet. Click \"Add Award\" to get started.</p>\n                        </div>\n                      ) : (\n                        awards.map((award: any) => (\n                          <Card key={award.id}>\n                            <CardContent className=\"p-4\">\n                              <h4 className=\"font-semibold mb-2\">{award.name}</h4>\n                              {award.description && (\n                                <p className=\"text-sm text-gray-600\">{award.description}</p>\n                              )}\n                            </CardContent>\n                          </Card>\n                        ))\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* User Management Tab */}\n              <TabsContent value=\"users\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <div>\n                      <CardTitle>Ethnicity Management</CardTitle>\n                      <p className=\"text-sm text-gray-600 mt-1\">Manage ethnicity data and user roles</p>\n                    </div>\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button>\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Add Ethnicity\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Add New Ethnicity</DialogTitle>\n                        </DialogHeader>\n                        <form onSubmit={ethnicityForm.handleSubmit(handleCreateEthnicity)} className=\"space-y-4\">\n                          <div>\n                            <Label htmlFor=\"ethnicity-name\">Ethnicity Name</Label>\n                            <Input \n                              id=\"ethnicity-name\" \n                              {...ethnicityForm.register('name')} \n                              placeholder=\"e.g., Kikuyu, Luo, Kalenjin\"\n                            />\n                            {ethnicityForm.formState.errors.name && (\n                              <p className=\"text-sm text-red-600 mt-1\">\n                                {ethnicityForm.formState.errors.name.message}\n                              </p>\n                            )}\n                          </div>\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button type=\"submit\">Add Ethnicity</Button>\n                          </div>\n                        </form>\n                      </DialogContent>\n                    </Dialog>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-4 gap-4\">\n                      {ethnicity.length===0 ? (<div className=\"text-center py-8 text-gray-500\">\n                      <Users className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                      <p>Click \"Add Ethnicity\" to manage ethnicity data</p>\n                    </div>) : (ethnicity.map((e:any)=> (\n                      <Card>\n                        <CardContent>\n                          <div className='text-sm text-gray-600 text-center py-8'>\n                            <h4> { e.name}</h4>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    )))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* FAQs Tab */}\n              <TabsContent value=\"faqs\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <div>\n                      <CardTitle>FAQ Management</CardTitle>\n                      <p className=\"text-sm text-gray-600 mt-1\">Manage frequently asked questions</p>\n                    </div>\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button>\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Add FAQ\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-2xl\">\n                        <DialogHeader>\n                          <DialogTitle>Add New FAQ</DialogTitle>\n                        </DialogHeader>\n                        <form onSubmit={faqForm.handleSubmit(handleCreateFaq)} className=\"space-y-4\">\n                          <div>\n                            <Label htmlFor=\"faq-category\">Category</Label>\n                            <Select onValueChange={(value) => faqForm.setValue('category', value)}>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select category\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"application\">Application Process</SelectItem>\n                                <SelectItem value=\"requirements\">Requirements</SelectItem>\n                                <SelectItem value=\"selection\">Selection Process</SelectItem>\n                                <SelectItem value=\"account\">Account Management</SelectItem>\n                                <SelectItem value=\"technical\">Technical Support</SelectItem>\n                                <SelectItem value=\"general\">General</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            {faqForm.formState.errors.category && (\n                              <p className=\"text-sm text-red-600 mt-1\">\n                                {faqForm.formState.errors.category.message}\n                              </p>\n                            )}\n                          </div>\n                          <div>\n                            <Label htmlFor=\"faq-question\">Question</Label>\n                            <Input \n                              id=\"faq-question\" \n                              {...faqForm.register('question')} \n                              placeholder=\"Enter the question\"\n                            />\n                            {faqForm.formState.errors.question && (\n                              <p className=\"text-sm text-red-600 mt-1\">\n                                {faqForm.formState.errors.question.message}\n                              </p>\n                            )}\n                          </div>\n                          <div>\n                            <Label htmlFor=\"faq-answer\">Answer</Label>\n                            <Textarea \n                              id=\"faq-answer\" \n                              {...faqForm.register('answer')} \n                              placeholder=\"Enter the answer\"\n                              rows={5}\n                            />\n                            {faqForm.formState.errors.answer && (\n                              <p className=\"text-sm text-red-600 mt-1\">\n                                {faqForm.formState.errors.answer.message}\n                              </p>\n                            )}\n                          </div>\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button type=\"submit\">Add FAQ</Button>\n                          </div>\n                        </form>\n                      </DialogContent>\n                    </Dialog>\n                  </CardHeader>\n                    <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      {faqs.length === 0 ? (\n                        <div className=\"col-span-2 text-center py-8 text-gray-500\">\n                          <HelpCircle className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                          <p>Click \"Add FAQ\" to create your first FAQ entry</p>\n                        </div>\n                      ) : (\n                        faqs.map((faq: any) => (\n                          <Card key={faq.id}>\n                            <CardContent className=\"p-4\">\n                              <h4 className=\"font-semibold mb-2\">{faq.question}</h4>\n                              {faq.answer && (\n                                <p className=\"text-sm text-gray-600\">{faq.answer}</p>\n                              )}\n                            </CardContent>\n                          </Card>\n                        ))\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n              {/* Role Assignments Tab */}\n              <TabsContent value=\"roles\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <div>\n                      <CardTitle>Role Assignments</CardTitle>\n                      <p className=\"text-sm text-gray-600 mt-1\">Assign roles to users in the system</p>\n                    </div>\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button>\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Assign Role\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Assign Role to User</DialogTitle>\n                        </DialogHeader>\n                        <form onSubmit={roleAssignmentForm.handleSubmit(handleCreateRoleAssignment)} className=\"space-y-4\">\n                          <div>\n                            <Label htmlFor=\"role-user\">User</Label>\n                            <div className=\"space-y-2\">\n                              <Input\n                                placeholder=\"Search users...\"\n                                value={userSearchTerm}\n                                onChange={(e) => setUserSearchTerm(e.target.value)}\n                                className=\"mb-2\"\n                              />\n                              <Select onValueChange={(value) => roleAssignmentForm.setValue('userId', value)}>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select user\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  {(allUsers as any[])\n                                    .filter((user: any) => \n                                      user.name?.toLowerCase().includes(userSearchTerm.toLowerCase()) ||\n                                      user.email?.toLowerCase().includes(userSearchTerm.toLowerCase())\n                                    )\n                                    .slice(0, 50) // Limit to 50 results for performance\n                                    .map((user: any) => (\n                                      <SelectItem key={user.id} value={user.id}>\n                                        {user.name} ({user.email})\n                                      </SelectItem>\n                                    ))}\n                                  {allUsers.length === 0 && (\n                                    <SelectItem value=\"\" disabled>\n                                      No users found\n                                    </SelectItem>\n                                  )}\n                                </SelectContent>\n                              </Select>\n                            </div>\n                            {roleAssignmentForm.formState.errors.userId && (\n                              <p className=\"text-sm text-red-600 mt-1\">\n                                {roleAssignmentForm.formState.errors.userId.message}\n                              </p>\n                            )}\n                          </div>\n                          <div>\n                            <Label htmlFor=\"role-assignment\">Role</Label>\n                            <Select onValueChange={(value) => roleAssignmentForm.setValue('role', value)}>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select role\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"admin\">Administrator</SelectItem>\n                                <SelectItem value=\"board\">Board Member</SelectItem>\n                                <SelectItem value=\"applicant\">Applicant</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            {roleAssignmentForm.formState.errors.role && (\n                              <p className=\"text-sm text-red-600 mt-1\">\n                                {roleAssignmentForm.formState.errors.role.message}\n                              </p>\n                            )}\n                          </div>\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button type=\"submit\">Assign Role</Button>\n                          </div>\n                        </form>\n                      </DialogContent>\n                    </Dialog>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      {(allUsers as any[]).filter((user: any) => user.role !== 'applicant').length === 0 ? (\n                        <div className=\"col-span-3 text-center py-8 text-gray-500\">\n                          <SettingsIcon className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                          <p>Click \"Assign Role\" to manage user permissions</p>\n                        </div>\n                      ) : (\n                        (allUsers as any[])\n                          .filter((user: any) => user.role !== 'applicant')\n                          .map((user: any) => (\n                            <Card key={user.id}>\n                              <CardContent className=\"p-4\">\n                                <h4 className=\"font-semibold\">{user.name}</h4>\n                                <p className=\"text-sm text-gray-600\">{user.email}</p>\n                                <Badge className=\"mt-2\" variant=\"secondary\">\n                                  {user.role === 'admin' ? 'Administrator' : \n                                   user.role === 'board' ? 'Board Member' : user.role}\n                                </Badge>\n                              </CardContent>\n                            </Card>\n                          ))\n                      )}\n                    </div>\n                    \n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Board Leadership Tab */}\n              <TabsContent value=\"board-leadership\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <div>\n                      <CardTitle>Board Leadership Management</CardTitle>\n                      <p className=\"text-sm text-gray-600 mt-1\">Manage board members and leadership team</p>\n                    </div>\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button>\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Add Board Member\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Add Board Member</DialogTitle>\n                        </DialogHeader>\n                        <form onSubmit={boardMemberForm.handleSubmit(handleCreateBoardMember)} className=\"space-y-4\">\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div>\n                              <Label htmlFor=\"board-name\">Full Name</Label>\n                              <Input \n                                id=\"board-name\" \n                                {...boardMemberForm.register('name')} \n                                placeholder=\"e.g., Dr. John Smith\"\n                              />\n                              {boardMemberForm.formState.errors.name && (\n                                <p className=\"text-sm text-red-600 mt-1\">\n                                  {boardMemberForm.formState.errors.name.message}\n                                </p>\n                              )}\n                            </div>\n                            <div>\n                              <Label htmlFor=\"board-position\">Position/Title</Label>\n                              <Input \n                                id=\"board-position\" \n                                {...boardMemberForm.register('position')} \n                                placeholder=\"e.g., Chairman, CEO\"\n                              />\n                              {boardMemberForm.formState.errors.position && (\n                                <p className=\"text-sm text-red-600 mt-1\">\n                                  {boardMemberForm.formState.errors.position.message}\n                                </p>\n                              )}\n                            </div>\n                          </div>\n                          <div>\n                            <Label htmlFor=\"board-bio\">Biography</Label>\n                            <Textarea \n                              id=\"board-bio\" \n                              {...boardMemberForm.register('bio')} \n                              placeholder=\"Brief biography of the board member...\"\n                              rows={3}\n                            />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"board-photo\">Photo URL</Label>\n                            <Input \n                              id=\"board-photo\" \n                              {...boardMemberForm.register('photoUrl')} \n                              placeholder=\"https://example.com/photo.jpg\"\n                            />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"board-order\">Display Order</Label>\n                            <Input \n                              id=\"board-order\" \n                              type=\"number\"\n                              {...boardMemberForm.register('order', { valueAsNumber: true })} \n                              placeholder=\"0\"\n                            />\n                          </div>\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button type=\"submit\">Add Board Member</Button>\n                          </div>\n                        </form>\n                      </DialogContent>\n                    </Dialog>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                      {(boardMembers as any[]).length === 0 ? (\n                        <div className=\"col-span-3 text-center py-8 text-gray-500\">\n                          <Users className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                          <p>No board members yet. Click \"Add Board Member\" to get started.</p>\n                        </div>\n                      ) : (\n                        (boardMembers as any[]).map((member: any) => (\n                          <Card key={member.id}>\n                            <CardContent className=\"p-4 text-center\">\n                              {member.photoUrl && (\n                                <div className=\"w-20 h-20 mx-auto mb-4 rounded-full overflow-hidden bg-gray-200\">\n                                  <img \n                                    src={member.photoUrl} \n                                    alt={member.name}\n                                    className=\"w-full h-full object-cover\"\n                                  />\n                                </div>\n                              )}\n                              <h4 className=\"font-semibold text-lg\">{member.name}</h4>\n                              <p className=\"text-primary font-medium\">{member.position}</p>\n                              {member.bio && (\n                                <p className=\"text-sm text-gray-600 mt-2 line-clamp-3\">{member.bio}</p>\n                              )}\n                              <Badge className=\"mt-2\" variant=\"outline\">\n                                Order: {member.order || 0}\n                              </Badge>\n                            </CardContent>\n                          </Card>\n                        ))\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* About Page Management Tab */}\n              <TabsContent value=\"about\">\n                <div className=\"space-y-6\">\n                  <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between\">\n                      <div>\n                        <CardTitle>About Page Configuration</CardTitle>\n                        <p className=\"text-sm text-gray-600 mt-1\">Manage content displayed on the about page</p>\n                      </div>\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button>\n                            <Plus className=\"w-4 h-4 mr-2\" />\n                            Add Config\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent>\n                          <DialogHeader>\n                            <DialogTitle>Add About Page Configuration</DialogTitle>\n                          </DialogHeader>\n                          <form onSubmit={aboutConfigForm.handleSubmit(handleCreateAboutConfig)} className=\"space-y-4\">\n                            <div>\n                              <Label htmlFor=\"config-key\">Configuration Key</Label>\n                              <Select onValueChange={(value) => aboutConfigForm.setValue('key', value)}>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select configuration key\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"heroTitle\">Hero Title</SelectItem>\n                                  <SelectItem value=\"heroDescription\">Hero Description</SelectItem>\n                                  <SelectItem value=\"mission\">Mission Statement</SelectItem>\n                                  <SelectItem value=\"vision\">Vision Statement</SelectItem>\n                                  <SelectItem value=\"values\">Values (comma-separated)</SelectItem>\n                                  <SelectItem value=\"whoWeAre\">Who We Are Content</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              {aboutConfigForm.formState.errors.key && (\n                                <p className=\"text-sm text-red-600 mt-1\">\n                                  {aboutConfigForm.formState.errors.key.message}\n                                </p>\n                              )}\n                            </div>\n                            <div>\n                              <Label htmlFor=\"config-value\">Content</Label>\n                              <Textarea \n                                id=\"config-value\" \n                                {...aboutConfigForm.register('value')} \n                                placeholder=\"Enter the content for this configuration\"\n                                rows={4}\n                              />\n                              {aboutConfigForm.formState.errors.value && (\n                                <p className=\"text-sm text-red-600 mt-1\">\n                                  {aboutConfigForm.formState.errors.value.message}\n                                </p>\n                              )}\n                            </div>\n                            <div className=\"flex justify-end space-x-2\">\n                              <Button type=\"submit\">Add Configuration</Button>\n                            </div>\n                          </form>\n                        </DialogContent>\n                      </Dialog>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        {Object.keys(aboutConfig).length === 0 ? (\n                          <div className=\"text-center py-8 text-gray-500\">\n                            <Info className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                            <p>No about page configuration found. Click \"Add Config\" to get started.</p>\n                          </div>\n                        ) : (\n                          Object.entries(aboutConfig).map(([key, value]) => (\n                            <Card key={key}>\n                              <CardContent className=\"p-4\">\n                                <div className=\"flex items-start justify-between\">\n                                  <div className=\"flex-1\">\n                                    <h4 className=\"font-semibold text-sm text-gray-700 uppercase tracking-wide\">{key}</h4>\n                                    <p className=\"text-gray-900 mt-1\">{String(value).substring(0, 200)}{String(value).length > 200 ? '...' : ''}</p>\n                                  </div>\n                                  <div className=\"flex space-x-2 ml-4\">\n                                    <Button variant=\"ghost\" size=\"sm\">\n                                      <Edit className=\"w-4 h-4\" />\n                                    </Button>\n                                    <Button variant=\"ghost\" size=\"sm\">\n                                      <Trash2 className=\"w-4 h-4\" />\n                                    </Button>\n                                  </div>\n                                </div>\n                              </CardContent>\n                            </Card>\n                          ))\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Contact Information</CardTitle>\n                      <p className=\"text-sm text-gray-600 mt-1\">Manage contact details displayed on the about page</p>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        {Object.keys(contactConfig).length === 0 ? (\n                          <div className=\"text-center py-8 text-gray-500\">\n                            <Globe className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                            <p>No contact configuration found.</p>\n                          </div>\n                        ) : (\n                          Object.entries(contactConfig).map(([key, value]) => (\n                            <Card key={key}>\n                              <CardContent className=\"p-4\">\n                                <div className=\"flex items-center justify-between\">\n                                  <div>\n                                    <h4 className=\"font-semibold text-sm text-gray-700 uppercase tracking-wide\">{key}</h4>\n                                    <p className=\"text-gray-900\">{String(value)}</p>\n                                  </div>\n                                  <Button variant=\"ghost\" size=\"sm\">\n                                    <Edit className=\"w-4 h-4\" />\n                                  </Button>\n                                </div>\n                              </CardContent>\n                            </Card>\n                          ))\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n\n              {/* Gallery Management Tab */}\n              <TabsContent value=\"gallery\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <div>\n                      <CardTitle>Gallery Management</CardTitle>\n                      <p className=\"text-sm text-gray-600 mt-1\">Manage gallery items and images</p>\n                    </div>\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button>\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Add Gallery Item\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className='max-w-2xl max-h-[80vh] overflow-y-auto'>\n                        <DialogHeader>\n                          <DialogTitle>Add Gallery Item</DialogTitle>\n                        </DialogHeader>\n                        <form onSubmit={galleryItemForm.handleSubmit(handleCreateGalleryItem)} className=\"space-y-4\">\n                          <div>\n                            <Label htmlFor=\"gallery-title\">Title</Label>\n                            <Input \n                              id=\"gallery-title\" \n                              {...galleryItemForm.register('title')} \n                              placeholder=\"Gallery item title\"\n                            />\n                            {galleryItemForm.formState.errors.title && (\n                              <p className=\"text-sm text-red-600 mt-1\">\n                                {galleryItemForm.formState.errors.title.message}\n                              </p>\n                            )}\n                          </div>\n                          <div>\n                            <Label htmlFor=\"gallery-description\">Description</Label>\n                            <Textarea \n                              id=\"gallery-description\" \n                              {...galleryItemForm.register('description')} \n                              placeholder=\"Gallery item description\"\n                              rows={3}\n                            />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"gallery-category\">Category</Label>\n                            <Select onValueChange={(value) => galleryItemForm.setValue('category', value)}>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select category\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"meetings\">Meetings</SelectItem>\n                                <SelectItem value=\"training\">Training</SelectItem>\n                                <SelectItem value=\"recruitment\">Recruitment</SelectItem>\n                                <SelectItem value=\"events\">Events</SelectItem>\n                                <SelectItem value=\"awards\">Awards</SelectItem>\n                                <SelectItem value=\"outreach\">Outreach</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            {galleryItemForm.formState.errors.category && (\n                              <p className=\"text-sm text-red-600 mt-1\">\n                                {galleryItemForm.formState.errors.category.message}\n                              </p>\n                            )}\n                          </div>\n                          {/* Dynamic Image Input */}\n                          <div>\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <Label>Image</Label>\n                              <div className=\"flex rounded-lg bg-gray-100 p-1\">\n                                <Button\n                                  type=\"button\"\n                                  variant={galleryImageMode === 'url' ? 'default' : 'ghost'}\n                                  size=\"sm\"\n                                  className=\"h-6 px-3\"\n                                  onClick={() => {\n                                    setGalleryImageMode('url');\n                                    setUploadedImageFile(null);\n                                    setPreviewImageUrl('');\n                                  }}\n                                  data-testid=\"button-gallery-url-mode\"\n                                >\n                                  <Link className=\"w-3 h-3 mr-1\" />\n                                  URL\n                                </Button>\n                                <Button\n                                  type=\"button\"\n                                  variant={galleryImageMode === 'upload' ? 'default' : 'ghost'}\n                                  size=\"sm\"\n                                  className=\"h-6 px-3\"\n                                  onClick={() => {\n                                    setGalleryImageMode('upload');\n                                    galleryItemForm.setValue('imageUrl', '');\n                                  }}\n                                  data-testid=\"button-gallery-upload-mode\"\n                                >\n                                  <Upload className=\"w-3 h-3 mr-1\" />\n                                  Upload\n                                </Button>\n                              </div>\n                            </div>\n\n                            {galleryImageMode === 'url' ? (\n                              <div>\n                                <Input \n                                  id=\"gallery-imageUrl\" \n                                  {...galleryItemForm.register('imageUrl')} \n                                  placeholder=\"https://example.com/image.jpg\"\n                                  data-testid=\"input-gallery-url\"\n                                />\n                                {galleryItemForm.formState.errors.imageUrl && (\n                                  <p className=\"text-sm text-red-600 mt-1\">\n                                    {galleryItemForm.formState.errors.imageUrl.message}\n                                  </p>\n                                )}\n                              </div>\n                            ) : (\n                              <div>\n                                <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n                                  {uploadedImageFile ? (\n                                    <div className=\"space-y-3\">\n                                      {previewImageUrl && (\n                                        <img \n                                          src={previewImageUrl} \n                                          alt=\"Preview\" \n                                          className=\"max-h-32 mx-auto rounded-lg\"\n                                        />\n                                      )}\n                                      <div className=\"flex items-center justify-center space-x-2\">\n                                        <span className=\"text-sm text-gray-600\">\n                                          {uploadedImageFile.name}\n                                        </span>\n                                        <Button\n                                          type=\"button\"\n                                          variant=\"ghost\"\n                                          size=\"sm\"\n                                          onClick={() => {\n                                            setUploadedImageFile(null);\n                                            setPreviewImageUrl('');\n                                          }}\n                                          data-testid=\"button-remove-upload\"\n                                        >\n                                          <X className=\"w-4 h-4\" />\n                                        </Button>\n                                      </div>\n                                    </div>\n                                  ) : (\n                                    <div className=\"space-y-2\">\n                                      <Camera className=\"w-8 h-8 text-gray-400 mx-auto\" />\n                                      <div>\n                                        <label htmlFor=\"gallery-file-upload\" className=\"cursor-pointer\">\n                                          <span className=\"text-sm text-blue-600 hover:text-blue-500\">\n                                            Choose an image file\n                                          </span>\n                                          <input\n                                            id=\"gallery-file-upload\"\n                                            type=\"file\"\n                                            className=\"hidden\"\n                                            accept=\"image/*\"\n                                            onChange={(e) => {\n                                              const file = e.target.files?.[0];\n                                              if (file) {\n                                                setUploadedImageFile(file);\n                                                setPreviewImageUrl(URL.createObjectURL(file));\n                                              }\n                                            }}\n                                            data-testid=\"input-gallery-file\"\n                                          />\n                                        </label>\n                                      </div>\n                                      <p className=\"text-xs text-gray-500\">\n                                        PNG, JPG up to 10MB\n                                      </p>\n                                    </div>\n                                  )}\n                                </div>\n                                {galleryFileUpload.state.isUploading && (\n                                  <div className=\"mt-2 text-sm text-blue-600\">\n                                    Uploading image...\n                                  </div>\n                                )}\n                              </div>\n                            )}\n                          </div>\n                          <div>\n                            <Label htmlFor=\"gallery-eventDate\">Event Date</Label>\n                            <Input \n                              id=\"gallery-eventDate\" \n                              type=\"date\"\n                              {...galleryItemForm.register('eventDate')} \n                            />\n                          </div>\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button type=\"submit\">Add Gallery Item</Button>\n                          </div>\n                        </form>\n                      </DialogContent>\n                    </Dialog>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                      {galleryItems.length === 0 ? (\n                        <div className=\"col-span-3 text-center py-8 text-gray-500\">\n                          <Camera className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                          <p>No gallery items yet. Click \"Add Gallery Item\" to get started.</p>\n                        </div>\n                      ) : (\n                        (galleryItems as any[]).map((item: any) => (\n                          <Card key={item.id} className=\"overflow-hidden\">\n                            <div className=\"aspect-video bg-gray-100 relative\">\n                              {item.imageUrl ? (\n                                <img \n                                  src={item.imageUrl} \n                                  alt={item.title}\n                                  className=\"w-full h-full object-cover\"\n                                />\n                              ) : (\n                                <div className=\"w-full h-full flex items-center justify-center\">\n                                  <Camera className=\"w-12 h-12 text-gray-400\" />\n                                </div>\n                              )}\n                              <div className=\"absolute top-2 right-2\">\n                                <Badge variant=\"secondary\">{item.category}</Badge>\n                              </div>\n                            </div>\n                            <CardContent className=\"p-4\">\n                              <h4 className=\"font-semibold mb-2\">{item.title}</h4>\n                              <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\">{item.description}</p>\n                              <div className=\"flex items-center justify-between\">\n                                <p className=\"text-xs text-gray-500\">\n                                  {item.eventDate ? new Date(item.eventDate).toLocaleDateString() : 'No date'}\n                                </p>\n                                <div className=\"flex space-x-2\">\n                                  <Button variant=\"ghost\" size=\"sm\">\n                                    <Edit className=\"w-4 h-4\" />\n                                  </Button>\n                                  <Button variant=\"ghost\" size=\"sm\">\n                                    <Trash2 className=\"w-4 h-4\" />\n                                  </Button>\n                                </div>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        ))\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":95526},"client/src/pages/admin/Notifications.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport Navigation from '@/components/layout/Navigation';\nimport Sidebar from '@/components/layout/Sidebar';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Plus, Send, Bell, Users, Mail, MessageSquare } from 'lucide-react';\n\n// Stats Cards Component\nfunction NotificationStatsCards() {\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: ['/api/admin/notification-stats']\n  });\n\n  const statsData = [\n    {\n      title: 'Total Sent',\n      value: stats?.totalSent || 0,\n      icon: Send,\n      color: 'bg-blue-100',\n      iconColor: 'text-primary',\n      change: '+12% this month'\n    },\n    {\n      title: 'Open Rate',\n      value: `${stats?.openRate || 0}%`,\n      icon: Mail,\n      color: 'bg-green-100', \n      iconColor: 'text-secondary',\n      change: '+3% improvement'\n    },\n    {\n      title: 'Active Users',\n      value: stats?.activeUsers || 0,\n      icon: Users,\n      color: 'bg-purple-100',\n      iconColor: 'text-purple-600',\n      change: '+8% this week'\n    },\n    {\n      title: 'Pending',\n      value: stats?.pending || 0,\n      icon: Bell,\n      color: 'bg-yellow-100',\n      iconColor: 'text-yellow-600',\n      change: 'Scheduled'\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n      {statsData.map((stat, index) => (\n        <Card key={index} data-testid={`card-stats-${stat.title.toLowerCase().replace(' ', '-')}`}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-600 text-sm\" data-testid={`text-${stat.title.toLowerCase().replace(' ', '-')}-label`}>\n                  {stat.title}\n                </p>\n                <p className=\"text-3xl font-bold text-gray-900\" data-testid={`text-${stat.title.toLowerCase().replace(' ', '-')}-value`}>\n                  {statsLoading ? '...' : stat.value.toLocaleString()}\n                </p>\n                <p className=\"text-green-600 text-sm mt-1\" data-testid={`text-${stat.title.toLowerCase().replace(' ', '-')}-change`}>\n                  {stat.change}\n                </p>\n              </div>\n              <div className={`w-12 h-12 ${stat.color} rounded-lg flex items-center justify-center`}>\n                <stat.icon className={`w-6 h-6 ${stat.iconColor}`} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n\nconst notificationSchema = z.object({\n  title: z.string().min(5, \"Title must be at least 5 characters\"),\n  message: z.string().min(10, \"Message must be at least 10 characters\"),\n  type: z.string().min(1, \"Please select notification type\"),\n  targetAudience: z.string().min(1, \"Please select target audience\"),\n  priority: z.string().min(1, \"Please select priority level\"),\n  scheduledAt: z.string().optional(),\n});\n\ntype NotificationFormData = z.infer<typeof notificationSchema>;\n\nexport default function AdminNotifications() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n\n  const { data: notifications = [], isLoading } = useQuery({\n    queryKey: ['/api/admin/notifications'],\n    enabled: !!user && user.role === 'admin',\n  });\n\n  const form = useForm<NotificationFormData>({\n    resolver: zodResolver(notificationSchema),\n    defaultValues: {\n      title: '',\n      message: '',\n      type: '',\n      targetAudience: '',\n      priority: 'medium',\n      scheduledAt: '',\n    },\n  });\n\n  const createNotificationMutation = useMutation({\n    mutationFn: async (data: NotificationFormData) => {\n      return await apiRequest('POST', '/api/admin/notifications', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Notification Sent',\n        description: 'Your notification has been sent successfully.',\n      });\n      // Invalidate both notifications list and stats\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/notifications'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/notification-stats'] });\n      setIsCreateModalOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      // Enhanced error handling with structured response\n      let errorMessage = 'Failed to send notification';\n      \n      if (error.errors && Array.isArray(error.errors)) {\n        // Handle validation errors\n        errorMessage = error.errors.map((err: any) => err.message || err.field).join(', ');\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      \n      toast({\n        title: 'Error',\n        description: errorMessage,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleCreateNotification = (data: NotificationFormData) => {\n    createNotificationMutation.mutate(data);\n  };\n\n  const notificationTypes = [\n    { value: 'email', label: 'Email', icon: Mail },\n    { value: 'sms', label: 'SMS', icon: MessageSquare },\n    { value: 'system', label: 'System Alert', icon: Bell },\n  ];\n\n  const targetAudiences = [\n    { value: 'all', label: 'All Users' },\n    { value: 'applicants', label: 'Applicants Only' },\n    { value: 'admins', label: 'Administrators Only' },\n    { value: 'board', label: 'Board Members Only' },\n  ];\n\n  const priorityLevels = [\n    { value: 'low', label: 'Low Priority', color: 'bg-gray-100 text-gray-800' },\n    { value: 'medium', label: 'Medium Priority', color: 'bg-yellow-100 text-yellow-800' },\n    { value: 'high', label: 'High Priority', color: 'bg-orange-100 text-orange-800' },\n    { value: 'urgent', label: 'Urgent', color: 'bg-red-100 text-red-800' },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar userRole=\"admin\" />\n        \n        <main className=\"flex-1 p-6\">\n          <div className=\"max-w-7xl mx-auto\">\n            {/* Header */}\n            <div className=\"flex justify-between items-center mb-8\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Notifications</h1>\n                <p className=\"text-gray-600\">Send notifications to users and manage communication</p>\n              </div>\n              \n              <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n                <DialogTrigger asChild>\n                  <Button>\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Send Notification\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle>Send New Notification</DialogTitle>\n                  </DialogHeader>\n                  \n                  <form onSubmit={form.handleSubmit(handleCreateNotification)} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"title\">Notification Title</Label>\n                        <Input \n                          id=\"title\" \n                          {...form.register('title')} \n                          placeholder=\"Enter notification title\"\n                        />\n                        {form.formState.errors.title && (\n                          <p className=\"text-sm text-red-600 mt-1\">\n                            {form.formState.errors.title.message}\n                          </p>\n                        )}\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"type\">Notification Type</Label>\n                        <Select onValueChange={(value) => form.setValue('type', value)}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select notification type\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {notificationTypes.map((type) => (\n                              <SelectItem key={type.value} value={type.value}>\n                                <div className=\"flex items-center\">\n                                  <type.icon className=\"w-4 h-4 mr-2\" />\n                                  {type.label}\n                                </div>\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        {form.formState.errors.type && (\n                          <p className=\"text-sm text-red-600 mt-1\">\n                            {form.formState.errors.type.message}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"targetAudience\">Target Audience</Label>\n                        <Select onValueChange={(value) => form.setValue('targetAudience', value)}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select audience\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {targetAudiences.map((audience) => (\n                              <SelectItem key={audience.value} value={audience.value}>\n                                {audience.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        {form.formState.errors.targetAudience && (\n                          <p className=\"text-sm text-red-600 mt-1\">\n                            {form.formState.errors.targetAudience.message}\n                          </p>\n                        )}\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"priority\">Priority Level</Label>\n                        <Select onValueChange={(value) => form.setValue('priority', value)}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select priority\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {priorityLevels.map((priority) => (\n                              <SelectItem key={priority.value} value={priority.value}>\n                                {priority.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        {form.formState.errors.priority && (\n                          <p className=\"text-sm text-red-600 mt-1\">\n                            {form.formState.errors.priority.message}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"message\">Message Content</Label>\n                      <Textarea\n                        id=\"message\"\n                        {...form.register('message')}\n                        placeholder=\"Enter your notification message...\"\n                        rows={4}\n                      />\n                      {form.formState.errors.message && (\n                        <p className=\"text-sm text-red-600 mt-1\">\n                          {form.formState.errors.message.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"scheduledAt\">Schedule for Later (Optional)</Label>\n                      <Input\n                        id=\"scheduledAt\"\n                        type=\"datetime-local\"\n                        {...form.register('scheduledAt')}\n                      />\n                    </div>\n\n                    <div className=\"flex justify-end space-x-2 pt-4\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setIsCreateModalOpen(false)}\n                      >\n                        Cancel\n                      </Button>\n                      <Button type=\"submit\" disabled={createNotificationMutation.isPending}>\n                        <Send className=\"w-4 h-4 mr-2\" />\n                        {createNotificationMutation.isPending ? 'Sending...' : 'Send Notification'}\n                      </Button>\n                    </div>\n                  </form>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {/* Stats Cards */}\n            <NotificationStatsCards />\n\n            {/* Notification History */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Notification History</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {isLoading ? (\n                  <div className=\"animate-pulse space-y-4\">\n                    {[...Array(5)].map((_, i) => (\n                      <div key={i} className=\"h-16 bg-gray-200 rounded\"></div>\n                    ))}\n                  </div>\n                ) : notifications.length === 0 ? (\n                  <div className=\"text-center py-12 text-gray-500\">\n                    <Bell className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                    <p>No notifications sent yet</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {notifications.map((notification: any) => (\n                      <div key={notification.id} className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-gray-900\">{notification.title}</h4>\n                          <p className=\"text-sm text-gray-600 mt-1\">{notification.message}</p>\n                          <div className=\"flex items-center space-x-4 mt-2\">\n                            <Badge variant=\"outline\">{notification.type}</Badge>\n                            <Badge className={priorityLevels.find(p => p.value === notification.priority)?.color}>\n                              {priorityLevels.find(p => p.value === notification.priority)?.label}\n                            </Badge>\n                            <span className=\"text-xs text-gray-500\">\n                              {new Date(notification.createdAt).toLocaleDateString()}\n                            </span>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-sm font-medium text-gray-900\">\n                            {notification.recipientCount || 0} recipients\n                          </p>\n                          <p className=\"text-xs text-gray-500\">\n                            {notification.status || 'Delivered'}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":16147},"client/src/pages/admin/Reports.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport Navigation from '@/components/layout/Navigation';\nimport Sidebar from '@/components/layout/Sidebar';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { BarChart3, Download, FileText, Users, Briefcase, TrendingUp, AlertCircle } from 'lucide-react';\n\nexport default function AdminReports() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [reportType, setReportType] = useState('applications');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [reportData, setReportData] = useState<any>(null);\n\n  // Query for fetching report stats (dashboard data)\n  const { data: statsData, isLoading: statsLoading } = useQuery<any>({\n    queryKey: ['/api/admin/reports', 'performance'],\n    enabled: !!user && user.role === 'admin',\n    queryFn: () => apiRequest('GET', `/api/admin/reports?type=performance`),\n  });\n\n  // Mutation for generating reports\n  const generateReportMutation = useMutation({\n    mutationFn: async () => {\n      const params = new URLSearchParams({ type: reportType });\n      if (startDate) params.append('startDate', startDate);\n      if (endDate) params.append('endDate', endDate);\n      \n      return await apiRequest('GET', `/api/admin/reports?${params.toString()}`);\n    },\n    onSuccess: (data) => {\n      setReportData(data);\n      toast({\n        title: 'Report Generated',\n        description: 'Your report has been generated successfully.',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to generate report',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Mutation for downloading reports as CSV\n  const downloadReportMutation = useMutation({\n    mutationFn: async (format: 'csv' | 'json') => {\n      const params = new URLSearchParams({ type: reportType, format });\n      if (startDate) params.append('startDate', startDate);\n      if (endDate) params.append('endDate', endDate);\n      \n      const response = await fetch(`/api/admin/reports/download?${params.toString()}`, {\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to download report');\n      }\n      \n      if (format === 'csv') {\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = `${reportType}_report_${Date.now()}.csv`;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        window.URL.revokeObjectURL(url);\n      } else {\n        const data = await response.json();\n        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = `${reportType}_report_${Date.now()}.json`;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        window.URL.revokeObjectURL(url);\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Download Started',\n        description: 'Your report download has started.',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Download Failed',\n        description: error.message || 'Failed to download report',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const reportTypes = [\n    { value: 'applications', label: 'Applications Report', icon: FileText },\n    { value: 'jobs', label: 'Job Postings Report', icon: Briefcase },\n    { value: 'users', label: 'Users Report', icon: Users },\n    { value: 'performance', label: 'Performance Report', icon: TrendingUp },\n  ];\n\n  const handleGenerateReport = () => {\n    generateReportMutation.mutate();\n  };\n\n  const handleDownloadReport = (format: 'csv' | 'json') => {\n    downloadReportMutation.mutate(format);\n  };\n\n  const handleDateReset = () => {\n    setStartDate('');\n    setEndDate('');\n    setReportData(null);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      <Navigation />\n      \n      <div className=\"flex\">\n        <Sidebar userRole=\"admin\" />\n        \n        <main className=\"flex-1 p-6\">\n          <div className=\"max-w-7xl mx-auto\">\n            {/* Header */}\n            <div className=\"mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Reports</h1>\n              <p className=\"text-gray-600\">\n                Generate and download recruitment system reports\n              </p>\n            </div>\n\n            {/* Report Configuration */}\n            <Card className=\"mb-8\">\n              <CardHeader>\n                <CardTitle>Generate Report</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Report Type</label>\n                    <Select value={reportType} onValueChange={setReportType}>\n                      <SelectTrigger data-testid=\"select-report-type\">\n                        <SelectValue placeholder=\"Select report type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {reportTypes.map((type) => (\n                          <SelectItem key={type.value} value={type.value}>\n                            <div className=\"flex items-center\">\n                              <type.icon className=\"w-4 h-4 mr-2\" />\n                              {type.label}\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Date Range</label>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <Input \n                        type=\"date\" \n                        value={startDate}\n                        onChange={(e) => setStartDate(e.target.value)}\n                        data-testid=\"input-start-date\"\n                        placeholder=\"Start date\"\n                      />\n                      <Input \n                        type=\"date\" \n                        value={endDate}\n                        onChange={(e) => setEndDate(e.target.value)}\n                        data-testid=\"input-end-date\"\n                        placeholder=\"End date\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"flex flex-col gap-2\">\n                    <Button \n                      onClick={handleGenerateReport} \n                      disabled={generateReportMutation.isPending}\n                      className=\"w-full\"\n                      data-testid=\"button-generate-report\"\n                    >\n                      {generateReportMutation.isPending ? (\n                        <>Loading...</>\n                      ) : (\n                        <>\n                          <FileText className=\"w-4 h-4 mr-2\" />\n                          Generate Report\n                        </>\n                      )}\n                    </Button>\n                    {startDate || endDate ? (\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        onClick={handleDateReset}\n                        data-testid=\"button-reset-dates\"\n                      >\n                        Clear Dates\n                      </Button>\n                    ) : null}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n              {statsLoading ? (\n                Array.from({ length: 4 }).map((_, index) => (\n                  <Card key={index}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-2\">\n                          <Skeleton className=\"h-4 w-24\" />\n                          <Skeleton className=\"h-8 w-16\" />\n                          <Skeleton className=\"h-3 w-20\" />\n                        </div>\n                        <Skeleton className=\"w-12 h-12 rounded-lg\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              ) : (\n                <>\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-gray-600 text-sm\" data-testid=\"text-total-applications\">Total Applications</p>\n                          <p className=\"text-3xl font-bold text-gray-900\" data-testid=\"value-total-applications\">\n                            {statsData?.overallMetrics?.totalApplications || '0'}\n                          </p>\n                          <p className=\"text-green-600 text-sm mt-1\">Real-time data</p>\n                        </div>\n                        <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                          <FileText className=\"w-6 h-6 text-primary\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-gray-600 text-sm\" data-testid=\"text-total-jobs\">Total Jobs</p>\n                          <p className=\"text-3xl font-bold text-gray-900\" data-testid=\"value-total-jobs\">\n                            {statsData?.overallMetrics?.totalJobs || '0'}\n                          </p>\n                          <p className=\"text-green-600 text-sm mt-1\">Active positions</p>\n                        </div>\n                        <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                          <Briefcase className=\"w-6 h-6 text-secondary\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-gray-600 text-sm\" data-testid=\"text-total-hired\">Total Hired</p>\n                          <p className=\"text-3xl font-bold text-gray-900\" data-testid=\"value-total-hired\">\n                            {statsData?.overallMetrics?.totalHired || '0'}\n                          </p>\n                          <p className=\"text-green-600 text-sm mt-1\">Successful hires</p>\n                        </div>\n                        <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                          <Users className=\"w-6 h-6 text-purple-600\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-gray-600 text-sm\" data-testid=\"text-hire-rate\">Hire Rate</p>\n                          <p className=\"text-3xl font-bold text-gray-900\" data-testid=\"value-hire-rate\">\n                            {statsData?.overallMetrics?.hireRate || '0'}%\n                          </p>\n                          <p className=\"text-green-600 text-sm mt-1\">Success rate</p>\n                        </div>\n                        <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                          <TrendingUp className=\"w-6 h-6 text-yellow-600\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </>\n              )}\n            </div>\n\n            {/* Report Preview */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Report Preview</CardTitle>\n                  {reportData && (\n                    <div className=\"flex gap-2\">\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        onClick={() => handleDownloadReport('csv')}\n                        disabled={downloadReportMutation.isPending}\n                        data-testid=\"button-download-csv\"\n                      >\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        CSV\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        onClick={() => handleDownloadReport('json')}\n                        disabled={downloadReportMutation.isPending}\n                        data-testid=\"button-download-json\"\n                      >\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        JSON\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent>\n                {generateReportMutation.isPending ? (\n                  <div className=\"space-y-4\">\n                    <Skeleton className=\"h-4 w-3/4\" />\n                    <Skeleton className=\"h-4 w-1/2\" />\n                    <Skeleton className=\"h-4 w-2/3\" />\n                    <Skeleton className=\"h-32 w-full\" />\n                  </div>\n                ) : generateReportMutation.error ? (\n                  <Alert variant=\"destructive\">\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      {generateReportMutation.error?.message || 'Failed to generate report'}\n                    </AlertDescription>\n                  </Alert>\n                ) : reportData ? (\n                  <div className=\"space-y-6\" data-testid=\"report-preview\">\n                    <div className=\"border rounded-lg p-4\">\n                      <h3 className=\"font-semibold mb-2\">Report Summary</h3>\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                        {Object.entries(reportData.summary || {}).map(([key, value]) => (\n                          <div key={key}>\n                            <p className=\"font-medium capitalize\">{key.replace(/([A-Z])/g, ' $1')}</p>\n                            <p className=\"text-2xl font-bold\">{value as string}</p>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                    \n                    {reportData.data && reportData.data.length > 0 && (\n                      <div className=\"border rounded-lg p-4\">\n                        <h3 className=\"font-semibold mb-2\">Sample Data (First 5 Records)</h3>\n                        <div className=\"overflow-x-auto\">\n                          <table className=\"w-full text-sm border-collapse\">\n                            <thead>\n                              <tr className=\"border-b\">\n                                {Object.keys(reportData.data[0]).map(key => (\n                                  <th key={key} className=\"text-left p-2 border-r\">\n                                    {key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}\n                                  </th>\n                                ))}\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {reportData.data.slice(0, 5).map((row: any, index: number) => (\n                                <tr key={index} className=\"border-b\">\n                                  {Object.values(row).map((value: any, cellIndex: number) => (\n                                    <td key={cellIndex} className=\"p-2 border-r\">\n                                      {value?.toString() || '-'}\n                                    </td>\n                                  ))}\n                                </tr>\n                              ))}\n                            </tbody>\n                          </table>\n                        </div>\n                        {reportData.data.length > 5 && (\n                          <p className=\"text-gray-500 text-sm mt-2\">\n                            Showing 5 of {reportData.data.length} records. Download the full report to see all data.\n                          </p>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12 text-gray-500\">\n                    <FileText className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                    <p>Select report parameters and click \"Generate Report\" to preview data</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":18239},"client/src/components/applicant/ProfileCompletion.tsx":{"content":"import { useAuth } from '@/hooks/useAuth';\nimport { useQuery } from '@tanstack/react-query';\n\ntype ProfileResponse = {\n  applicantProfile?: {\n    profileCompletionPercentage?: number;\n  };\n};\n\nexport default function ProfileCompletion() {\n  const { user } = useAuth();\n  \n  const { data: profile } = useQuery<ProfileResponse>({\n    queryKey: [\"/api/auth/user\"],\n    enabled: !!user,\n  });\n\n  const completionPercentage = profile?.applicantProfile?.profileCompletionPercentage || 0;\n\n  return (\n    <div className=\"mb-4 p-3 bg-gray-50 rounded-lg\">\n      <p className=\"text-xs font-medium text-gray-700 mb-2\">Profile Completion</p>\n      <div className=\"flex items-center space-x-2\">\n        <div className=\"flex-1 bg-gray-200 rounded-full h-2\">\n          <div \n            className=\"bg-primary h-2 rounded-full transition-all duration-300\" \n            style={{ width: `${completionPercentage}%` }}\n          ></div>\n        </div>\n        <span className=\"text-xs text-gray-600\">{completionPercentage}%</span>\n      </div>\n    </div>\n  );\n}","size_bytes":1041},"client/src/pages/applicant/Documents.tsx":{"content":"import { useState } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useQuery } from '@tanstack/react-query';\nimport Navigation from '@/components/layout/Navigation';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Upload, FileText, CheckCircle, AlertCircle } from 'lucide-react';\nimport { useFileUpload, uploadConfigs } from '@/hooks/useFileUpload';\nimport DocumentViewer from '@/components/documents/DocumentViewer';\n\ntype Document = {\n  id: number;\n  type: string;\n  fileName: string;\n  filePath: string;\n  fileSize?: number;\n  mimeType?: string;\n  createdAt: string;\n};\n\ntype ProfileResponse = {\n  applicantProfile?: {\n    documents?: Document[];\n  };\n};\n\nconst documentTypes = [\n  { id: 'national_id', label: 'National ID', required: true },\n  { id: 'birth_certificate', label: 'Birth Certificate', required: true },\n  { id: 'academic_certificate', label: 'Academic Certificate', required: true },\n  { id: 'academic_transcript', label: 'Academic Transcript', required: true },\n  { id: 'professional_certificate', label: 'Professional Certificate', required: false },\n  { id: 'experience_letter', label: 'Experience Letter', required: false },\n  { id: 'clearance_certificate', label: 'Police Clearance', required: true },\n];\n\nexport default function ApplicantDocuments() {\n  const { user } = useAuth();\n  const [viewingDocument, setViewingDocument] = useState<Document | null>(null);\n\n  const { data: profile, isLoading } = useQuery<ProfileResponse>({\n    queryKey: [\"/api/auth/user\"],\n    enabled: !!user,\n  });\n\n  const documents = profile?.applicantProfile?.documents || [];\n\n  // Use the dynamic file upload hook\n  const { uploadFile, state } = useFileUpload(uploadConfigs.documents);\n\n  const handleFileUpload = async (file: File, type: string) => {\n    await uploadFile(file, type, { type });\n  };\n\n  const getDocumentStatus = (type: string) => {\n    const document = documents.find(doc => doc.type === type);\n    if (document) {\n      return { status: 'uploaded', document };\n    }\n    return { status: 'pending', document: null };\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'uploaded':\n        return (\n          <Badge className=\"bg-green-100 text-green-800\">\n            <CheckCircle className=\"w-3 h-3 mr-1\" />\n            Uploaded\n          </Badge>\n        );\n      default:\n        return (\n          <Badge variant=\"outline\" className=\"text-orange-600 border-orange-300\">\n            <AlertCircle className=\"w-3 h-3 mr-1\" />\n            Pending\n          </Badge>\n        );\n    }\n  };\n\n  const formatFileSize = (bytes?: number) => {\n    if (!bytes) return 'Unknown size';\n    const mb = bytes / (1024 * 1024);\n    return `${mb.toFixed(1)} MB`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-neutral-50\">\n        <Navigation />\n        <div className=\"flex justify-center items-center h-64\">\n          <div className=\"text-center\">Loading...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-neutral-50\">\n      <Navigation />\n      <div className=\"max-w-6xl mx-auto px-4 py-8\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Document Management</h1>\n          <p className=\"text-gray-600\">Upload and manage your required documents</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n  {documentTypes.map((docType) => {\n    const { status, document } = getDocumentStatus(docType.id);\n    const isUploading = state.uploadProgress[docType.id] || state.isUploading;\n\n    return (\n      <Card key={docType.id}>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg\">{docType.label}</CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              {docType.required && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  Required\n                </Badge>\n              )}\n              {getStatusBadge(status)}\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {document ? (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n                <FileText className=\"w-8 h-8 text-blue-600\" />\n                <div className=\"flex-1\">\n                  <p className=\"font-medium text-gray-900\">{document.fileName}</p>\n                  <p className=\"text-sm text-gray-600\">\n                    {formatFileSize(document.fileSize)} •{\" \"}\n                    {new Date(document.createdAt).toLocaleDateString()}\n                  </p>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setViewingDocument(document)}\n                  data-testid={`button-view-${docType.id}`}\n                >\n                  View\n                </Button>\n              </div>\n\n              <div className=\"border-t pt-4\">\n                <label\n                  htmlFor={`replace-${docType.id}`}\n                  className=\"block text-sm text-gray-700 mb-2\"\n                >\n                  Replace document:\n                </label>\n                <input\n                  id={`replace-${docType.id}`}\n                  type=\"file\"\n                  accept=\".pdf,.jpg,.jpeg,.png\"\n                  onChange={(e) => {\n                    const file = e.target.files?.[0];\n                    if (file) {\n                      handleFileUpload(file, docType.id);\n                    }\n                  }}\n                  className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 \n                             file:rounded-md file:border-0 file:text-sm file:font-medium \n                             file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100\"\n                  disabled={isUploading}\n                />\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center py-8 border-2 border-dashed border-gray-300 rounded-lg\">\n              <Upload className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-600 mb-4\">\n                Upload your {docType.label.toLowerCase()}\n              </p>\n              <label htmlFor={`upload-${docType.id}`}>\n                <Button variant=\"outline\" disabled={isUploading} asChild>\n                  <span>{isUploading ? \"Uploading...\" : \"Choose File\"}</span>\n                </Button>\n              </label>\n              <input\n                id={`upload-${docType.id}`}\n                type=\"file\"\n                accept=\".pdf,.jpg,.jpeg,.png\"\n                onChange={(e) => {\n                  const file = e.target.files?.[0];\n                  if (file) {\n                    handleFileUpload(file, docType.id);\n                  }\n                }}\n                className=\"hidden\"\n                disabled={isUploading}\n              />\n              <p className=\"text-xs text-gray-500 mt-2\">\n                Supports PDF, JPG, JPEG, PNG (max 10MB)\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    );\n  })}\n</div>\n\n\n        <div className=\"mt-8 p-4 bg-blue-50 rounded-lg\">\n          <h3 className=\"font-medium text-blue-900 mb-2\">Upload Guidelines</h3>\n          <ul className=\"text-sm text-blue-800 space-y-1\">\n            <li>• Ensure all documents are clear and legible</li>\n            <li>• Documents should be in PDF, JPG, JPEG, or PNG format</li>\n            <li>• Maximum file size is 10MB per document</li>\n            <li>• All required documents must be uploaded before submitting applications</li>\n          </ul>\n        </div>\n\n        {/* Document Viewer Modal */}\n        {viewingDocument && (\n          <DocumentViewer\n            document={viewingDocument}\n            isOpen={!!viewingDocument}\n            onClose={() => setViewingDocument(null)}\n          />\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":8217},"client/src/lib/errFormat.ts":{"content":"import { ZodError } from \"zod\";\nimport { Request, Response, NextFunction } from \"express\";\n\n// Utility to format Zod errors into user-friendly messages\nexport function formatZodError(error: ZodError) {\n  const formatted: Record<string, string> = {};\n\n  error.errors.forEach((err) => {\n    const fieldPath = err.path.join(\".\");\n    formatted[fieldPath] = err.message;\n  });\n\n  return formatted;\n}\n\n// Express middleware for handling validation errors\nexport function validationErrorHandler(\n  err: any,\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  if (err instanceof ZodError) {\n    return res.status(400).json({\n      message: \"Validation failed\",\n      errors: formatZodError(err),\n    });\n  }\n  return next(err);\n}\n","size_bytes":732},"client/src/hooks/useFileUpload.ts":{"content":"import { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\nimport { useState } from 'react';\n\nexport interface UploadConfig {\n  endpoint: string;\n  fieldName: string;\n  successMessage?: string;\n  errorMessage?: string;\n  invalidateQueries?: string[];\n  acceptedTypes?: string[];\n  maxSizeInMB?: number;\n  additionalData?: Record<string, any>;\n}\n\nexport interface UploadState {\n  isUploading: boolean;\n  uploadProgress: Record<string, boolean>;\n  uploadedFiles: Record<string, any>;\n}\n\nexport interface UseFileUploadReturn {\n  uploadFile: (file: File, identifier?: string, additionalData?: Record<string, any>) => Promise<any>;\n  uploadMultipleFiles: (files: { file: File; identifier: string; additionalData?: Record<string, any> }[]) => Promise<any[]>;\n  state: UploadState;\n  resetUploadState: () => void;\n}\n\nexport function useFileUpload(config: UploadConfig): UseFileUploadReturn {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [uploadProgress, setUploadProgress] = useState<Record<string, boolean>>({});\n  const [uploadedFiles, setUploadedFiles] = useState<Record<string, any>>({});\n\n  // Validate file before upload\n  const validateFile = (file: File): string | null => {\n    // Check file type\n    if (config.acceptedTypes && config.acceptedTypes.length > 0) {\n      if (!config.acceptedTypes.includes(file.type)) {\n        return `Invalid file type. Accepted types: ${config.acceptedTypes.join(', ')}`;\n      }\n    }\n\n    // Check file size\n    if (config.maxSizeInMB) {\n      const maxSizeInBytes = config.maxSizeInMB * 1024 * 1024;\n      if (file.size > maxSizeInBytes) {\n        return `File too large. Maximum size: ${config.maxSizeInMB}MB`;\n      }\n    }\n\n    return null;\n  };\n\n  const uploadMutation = useMutation({\n    mutationFn: async ({ \n      file, \n      identifier, \n      additionalData \n    }: { \n      file: File; \n      identifier?: string; \n      additionalData?: Record<string, any> \n    }) => {\n      // Validate file\n      const validationError = validateFile(file);\n      if (validationError) {\n        throw new Error(validationError);\n      }\n\n      const formData = new FormData();\n      formData.append(config.fieldName, file);\n      \n      // Add any additional data to the form\n      const dataToAdd = { ...config.additionalData, ...additionalData };\n      Object.entries(dataToAdd).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          formData.append(key, String(value));\n        }\n      });\n\n      const response = await fetch(config.endpoint, {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ message: 'Upload failed' }));\n        throw new Error(errorData.message || 'Upload failed');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      toast({\n        title: \"Success\",\n        description: config.successMessage || \"File uploaded successfully\",\n      });\n      \n      // Store uploaded file data\n      if (variables.identifier) {\n        setUploadedFiles(prev => ({\n          ...prev,\n          [variables.identifier!]: data\n        }));\n      }\n      \n      // Invalidate specified queries\n      if (config.invalidateQueries) {\n        config.invalidateQueries.forEach(queryKey => {\n          queryClient.invalidateQueries({ queryKey: [queryKey] });\n        });\n      }\n    },\n    onError: (error: Error, variables) => {\n      toast({\n        title: \"Error\",\n        description: error.message || config.errorMessage || \"Failed to upload file\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const uploadFile = async (\n    file: File, \n    identifier?: string, \n    additionalData?: Record<string, any>\n  ): Promise<any> => {\n    const uploadId = identifier || file.name;\n    \n    setUploadProgress(prev => ({ ...prev, [uploadId]: true }));\n    \n    try {\n      const result = await uploadMutation.mutateAsync({ file, identifier, additionalData });\n      return result;\n    } finally {\n      setUploadProgress(prev => ({ ...prev, [uploadId]: false }));\n    }\n  };\n\n  const uploadMultipleFiles = async (\n    files: { file: File; identifier: string; additionalData?: Record<string, any> }[]\n  ): Promise<any[]> => {\n    const results = [];\n    \n    for (const { file, identifier, additionalData } of files) {\n      try {\n        const result = await uploadFile(file, identifier, additionalData);\n        results.push({ success: true, identifier, result });\n      } catch (error) {\n        results.push({ success: false, identifier, error });\n      }\n    }\n    \n    return results;\n  };\n\n  const resetUploadState = () => {\n    setUploadProgress({});\n    setUploadedFiles({});\n  };\n\n  return {\n    uploadFile,\n    uploadMultipleFiles,\n    state: {\n      isUploading: uploadMutation.isPending,\n      uploadProgress,\n      uploadedFiles,\n    },\n    resetUploadState,\n  };\n}\n\n// Predefined configurations for common upload scenarios\nexport const uploadConfigs = {\n  documents: {\n    endpoint: '/api/applicant/documents',\n    fieldName: 'document',\n    successMessage: 'Document uploaded successfully',\n    errorMessage: 'Failed to upload document',\n    invalidateQueries: ['/api/auth/user'],\n    acceptedTypes: [\n      'application/pdf',\n      'image/jpeg',\n      'image/jpg', \n      'image/png',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n    ],\n    maxSizeInMB: 10,\n  },\n  profilePhoto: {\n    endpoint: '/api/upload/profile-photo',\n    fieldName: 'profilePhoto',\n    successMessage: 'Profile photo uploaded successfully',\n    errorMessage: 'Failed to upload profile photo',\n    invalidateQueries: ['/api/auth/user'],\n    acceptedTypes: ['image/jpeg', 'image/jpg', 'image/png'],\n    maxSizeInMB: 5,\n  },\n} as const;","size_bytes":5897},"client/src/components/common/PDFViewer.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { X, Download, ExternalLink } from \"lucide-react\";\n\ninterface PDFViewerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  fileUrl: string;\n  fileName: string;\n}\n\nexport default function PDFViewer({\n  isOpen,\n  onClose,\n  fileUrl,\n  fileName,\n}: PDFViewerProps) {\n  const [isLoading, setIsLoading] = useState(true);\n\n  const handleDownload = () => {\n    const link = document.createElement(\"a\");\n    link.href = fileUrl;\n    link.download = fileName;\n    link.click();\n  };\n\n  const handleExternalView = () => {\n    window.open(fileUrl, \"_blank\");\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl h-[80vh] p-0\">\n        {/* Sticky, slim header */}\n        <DialogHeader className=\"sticky top-0 z-10 bg-white px-4 py-2 border-b\">\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle className=\"text-lg font-semibold truncate\">\n              {fileName}\n            </DialogTitle>\n            <div className=\"flex items-center gap-2 ml-4\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleDownload}\n                data-testid=\"button-download-pdf\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Download\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleExternalView}\n                data-testid=\"button-external-pdf\"\n              >\n                <ExternalLink className=\"w-4 h-4 mr-2\" />\n                Open in New Tab\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={onClose}\n                data-testid=\"button-close-pdf\"\n              >\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </DialogHeader>\n\n        <div className=\"flex-1 relative bg-gray-100\">\n          {isLoading && (\n            <div className=\"absolute inset-0 flex items-center justify-center bg-white\">\n              <div className=\"text-center\">\n                <div className=\"animate-spin w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full mx-auto mb-4\"></div>\n                <p className=\"text-gray-600\">Loading PDF...</p>\n              </div>\n            </div>\n          )}\n\n          <iframe\n            src={fileUrl}\n            className=\"w-full h-full border-0\"\n            onLoad={() => setIsLoading(false)}\n            onError={() => {\n              setIsLoading(false);\n              console.warn(\n                \"PDF iframe failed to load, showing fallback options\"\n              );\n            }}\n            title={`PDF Viewer - ${fileName}`}\n            data-testid=\"iframe-pdf-viewer\"\n          />\n\n          {/* Fallback for unsupported browsers */}\n          <div\n            className=\"absolute inset-0 flex items-center justify-center bg-white hidden\"\n            id=\"pdf-fallback\"\n          >\n            <div className=\"text-center p-8\">\n              <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <X className=\"w-8 h-8 text-red-600\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                Cannot display PDF\n              </h3>\n              <p className=\"text-gray-600 mb-6\">\n                Your browser doesn't support inline PDF viewing.\n              </p>\n              <div className=\"flex gap-3 justify-center\">\n                <Button\n                  onClick={handleDownload}\n                  data-testid=\"button-fallback-download\"\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Download PDF\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={handleExternalView}\n                  data-testid=\"button-fallback-external\"\n                >\n                  <ExternalLink className=\"w-4 h-4 mr-2\" />\n                  Open in New Tab\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4449},"client/src/components/documents/DocumentViewer.tsx":{"content":"import { useState, useCallback, useEffect } from 'react';\nimport { Document, Page, pdfjs } from 'react-pdf';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  ChevronLeft, \n  ChevronRight, \n  ZoomIn, \n  ZoomOut, \n  RotateCw,\n  Download,\n  X,\n  Loader2\n} from 'lucide-react';\nimport 'react-pdf/dist/Page/AnnotationLayer.css';\nimport 'react-pdf/dist/Page/TextLayer.css';\n\n// Configure PDF.js worker\npdfjs.GlobalWorkerOptions.workerSrc = new URL(\n  'pdfjs-dist/build/pdf.worker.min.mjs',\n  import.meta.url,\n).toString();\n\ninterface UserDocument {\n  id: number;\n  type: string;\n  fileName: string;\n  filePath: string;\n  fileSize?: number;\n  mimeType?: string;\n  createdAt: string;\n}\n\ninterface DocumentViewerProps {\n  document: UserDocument;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function DocumentViewer({ document, isOpen, onClose }: DocumentViewerProps) {\n  const [numPages, setNumPages] = useState<number>(0);\n  const [pageNumber, setPageNumber] = useState<number>(1);\n  const [scale, setScale] = useState<number>(1.0);\n  const [rotation, setRotation] = useState<number>(0);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [loadError, setLoadError] = useState<string | null>(null);\n\n  // Reset state when document changes or modal opens\n  useEffect(() => {\n    if (isOpen && document) {\n      setPageNumber(1);\n      setScale(1.0);\n      setRotation(0);\n      setLoadError(null);\n      \n      // Set initial loading state based on document type\n      const isPDF = document.mimeType?.includes('pdf') || document.fileName.toLowerCase().endsWith('.pdf');\n      setIsLoading(isPDF); // Only show loading for PDFs, images will handle their own loading\n    }\n  }, [document, isOpen]);\n\n  const onDocumentLoadSuccess = useCallback(({ numPages }: { numPages: number }) => {\n    setNumPages(numPages);\n    setIsLoading(false);\n    setLoadError(null);\n  }, []);\n\n  const onDocumentLoadError = useCallback((error: Error) => {\n    console.error('PDF load error:', error);\n    setLoadError('Failed to load PDF document');\n    setIsLoading(false);\n  }, []);\n\n  const goToPrevPage = useCallback(() => {\n    setPageNumber(prev => Math.max(1, prev - 1));\n  }, []);\n\n  const goToNextPage = useCallback(() => {\n    setPageNumber(prev => Math.min(numPages, prev + 1));\n  }, [numPages]);\n\n  const zoomIn = useCallback(() => {\n    setScale(prev => Math.min(3, prev + 0.2));\n  }, []);\n\n  const zoomOut = useCallback(() => {\n    setScale(prev => Math.max(0.5, prev - 0.2));\n  }, []);\n\n  const rotate = useCallback(() => {\n    setRotation(prev => (prev + 90) % 360);\n  }, []);\n\n  const downloadDocument = useCallback(() => {\n    window.open(document.filePath, '_blank');\n  }, [document.filePath]);\n\n  const resetView = useCallback(() => {\n    setPageNumber(1);\n    setScale(1.0);\n    setRotation(0);\n  }, []);\n\n  // Check if document is a PDF\n  const isPDF = document.mimeType?.includes('pdf') || document.fileName.toLowerCase().endsWith('.pdf');\n\n  // Check if document is an image\n  const isImage = document.mimeType?.includes('image') || \n                  /\\.(jpg|jpeg|png|gif|webp)$/i.test(document.fileName);\n\n  const formatFileSize = (bytes?: number) => {\n    if (!bytes) return 'Unknown size';\n    const mb = bytes / (1024 * 1024);\n    return `${mb.toFixed(1)} MB`;\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-6xl w-full h-[90vh] flex flex-col\" data-testid=\"document-viewer-modal\">\n        <DialogHeader className=\"flex-shrink-0 pb-2\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex-1\">\n              <DialogTitle className=\"text-lg font-semibold truncate pr-4\" data-testid=\"document-title\">\n                {document.fileName}\n              </DialogTitle>\n              <div className=\"flex items-center space-x-4 mt-1\">\n                <Badge variant=\"secondary\" className=\"text-xs\" data-testid=\"document-size\">\n                  {formatFileSize(document.fileSize)}\n                </Badge>\n                <Badge variant=\"outline\" className=\"text-xs\" data-testid=\"document-date\">\n                  {new Date(document.createdAt).toLocaleDateString()}\n                </Badge>\n              </div>\n            </div>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose} data-testid=\"button-close\">\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </DialogHeader>\n\n        {/* Toolbar for PDF controls */}\n        {isPDF && (\n          <div className=\"flex items-center justify-between p-2 bg-gray-50 rounded-lg mb-2 flex-shrink-0\">\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={goToPrevPage}\n                disabled={pageNumber <= 1}\n                data-testid=\"button-prev-page\"\n              >\n                <ChevronLeft className=\"w-4 h-4\" />\n              </Button>\n              <span className=\"text-sm\" data-testid=\"text-page-info\">\n                Page {pageNumber} of {numPages}\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={goToNextPage}\n                disabled={pageNumber >= numPages}\n                data-testid=\"button-next-page\"\n              >\n                <ChevronRight className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Button variant=\"outline\" size=\"sm\" onClick={zoomOut} data-testid=\"button-zoom-out\">\n                <ZoomOut className=\"w-4 h-4\" />\n              </Button>\n              <span className=\"text-sm\" data-testid=\"text-zoom-level\">{Math.round(scale * 100)}%</span>\n              <Button variant=\"outline\" size=\"sm\" onClick={zoomIn} data-testid=\"button-zoom-in\">\n                <ZoomIn className=\"w-4 h-4\" />\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={rotate} data-testid=\"button-rotate\">\n                <RotateCw className=\"w-4 h-4\" />\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={downloadDocument} data-testid=\"button-download\">\n                <Download className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Document content */}\n        <div className=\"flex-1 overflow-auto bg-gray-100 rounded-lg p-1\">\n          {isLoading && (\n            <div className=\"flex items-center space-x-2\" data-testid=\"loading-indicator\">\n              <Loader2 className=\"w-6 h-6 animate-spin\" />\n              <span>Loading document...</span>\n            </div>\n          )}\n\n          {loadError && (\n            <div className=\"text-center space-y-4\" data-testid=\"error-message\">\n              <p className=\"text-red-600\">{loadError}</p>\n              <Button onClick={downloadDocument} data-testid=\"button-download-error\">\n                Download to view externally\n              </Button>\n            </div>\n          )}\n\n          {!loadError && isPDF && (\n            <div className=\"w-full flex justify-center\" data-testid=\"pdf-content\">\n              <div className=\"bg-white shadow-lg\">\n                <Document\n                  file={document.filePath}\n                  onLoadSuccess={onDocumentLoadSuccess}\n                  onLoadError={onDocumentLoadError}\n                  loading={<div className=\"p-4\">Loading PDF...</div>}\n                  error={<div className=\"p-4 text-red-600\">Failed to load PDF</div>}\n                >\n                  <Page\n                    pageNumber={pageNumber}\n                    scale={scale}\n                    rotate={rotation}\n                    renderTextLayer={true}\n                    renderAnnotationLayer={true}\n                  />\n                </Document>\n              </div>\n            </div>\n          )}\n\n          {!loadError && isImage && (\n            <div className=\"max-w-full max-h-full flex items-center justify-center\" data-testid=\"image-content\">\n              {isLoading && <div className=\"flex items-center space-x-2\"><Loader2 className=\"w-6 h-6 animate-spin\" /><span>Loading image...</span></div>}\n              <img\n                src={document.filePath}\n                alt={document.fileName}\n                className={`max-w-full max-h-full object-contain shadow-lg rounded ${isLoading ? 'hidden' : ''}`}\n                style={{ transform: `scale(${scale}) rotate(${rotation}deg)` }}\n                onLoad={() => setIsLoading(false)}\n                onError={() => {\n                  setLoadError('Failed to load image');\n                  setIsLoading(false);\n                }}\n              />\n            </div>\n          )}\n\n          {!loadError && !isPDF && !isImage && (\n            <div className=\"text-center space-y-4\" data-testid=\"unsupported-format\">\n              <p className=\"text-gray-600\">Preview not available for this file type</p>\n              <Button onClick={downloadDocument} data-testid=\"button-download-unsupported\">\n                Download to view\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Bottom controls for images and PDFs */}\n        {(isPDF || isImage) && (\n          <div className=\"flex items-center justify-center space-x-2 mt-4 flex-shrink-0\">\n            {!isPDF && (\n              <>\n                <Button variant=\"outline\" size=\"sm\" onClick={zoomOut} data-testid=\"button-zoom-out-image\">\n                  <ZoomOut className=\"w-4 h-4\" />\n                </Button>\n                <span className=\"text-sm\" data-testid=\"text-zoom-level-image\">{Math.round(scale * 100)}%</span>\n                <Button variant=\"outline\" size=\"sm\" onClick={zoomIn} data-testid=\"button-zoom-in-image\">\n                  <ZoomIn className=\"w-4 h-4\" />\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" onClick={rotate} data-testid=\"button-rotate-image\">\n                  <RotateCw className=\"w-4 h-4\" />\n                </Button>\n              </>\n            )}\n            <Button variant=\"outline\" size=\"sm\" onClick={resetView} data-testid=\"button-reset-view\">\n              Reset View\n            </Button>\n            {!isPDF && (\n              <Button variant=\"outline\" size=\"sm\" onClick={downloadDocument} data-testid=\"button-download-image\">\n                <Download className=\"w-4 h-4\" />\n              </Button>\n            )}\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10694}},"version":1}